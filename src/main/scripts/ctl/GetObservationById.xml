<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" xmlns:fes="http://www.opengis.net/fes/2.0" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:om="http://www.opengis.net/om/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:owsTests="http://www.opengis.net/ows/1.1" xmlns:parsers="http://www.occamlab.com/te/parsers" xmlns:sml="http://www.opengis.net/sensorML/1.0.1" xmlns:soap11="http://schemas.xmlsoap.org/soap/" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:sosFunctions="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<!-- 07.SOS enhancedOperations: GetObservationById -->
   <ctl:test name="sos:GetObservationById-Test" isConformanceClass="true">
      <ctl:param name="GetObservationURL" />
      <ctl:param name="isGetObservationGET" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="serviceURL" />
      <ctl:param name="hasGOBI" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="GetObservationByIdRootElementName" />
      <ctl:param name="GetObservationByIdResponseSchemaLocation" />
      <ctl:param name="GetObservationByIdResponseSchemaType" />
      <ctl:param name="GetObservationByIdResponseContentType" />
      <ctl:param name="exceptionReportSchemaLocation" />
      <ctl:param name="exceptionReportSchemaType" />
      <ctl:param name="test0701" />
      <ctl:param name="test0702" />
      <ctl:param name="test0703" />
      <ctl:param name="test0704" />
      <ctl:param name="test0705" />
      <ctl:param name="test0706" />
      <ctl:param name="test0707" />
      <ctl:param name="test0708" />
      <ctl:param name="test0709" />
      <ctl:assertion>Execute GetObservationById Test.</ctl:assertion>
      <ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
      <ctl:code>
         <xsl:choose>
            <xsl:when test="$hasGOBI eq 'false'">
               <ctl:message>The server does not support the operation "GetObservationById", so skip this test.</ctl:message>
            </xsl:when>
            <xsl:when test="string-length($serviceURL) eq 0">
               <ctl:message>The URL of GetObservationById is empty, so skip this test.</ctl:message>
            </xsl:when>
            <xsl:otherwise>
               <!-- 從GetCapabilities取得有效的 offering,procedure,observedProperty -->
               <!-- get a valid offering-->
               <xsl:variable name="offering" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:identifier" />
               <ctl:message>
                  The offering was:
                  <xsl:value-of select="$offering" />
               </ctl:message>
               <!-- get a valid procedure-->
               <xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:procedure[1]" />
               <ctl:message>
                  The procedure was:
                  <xsl:value-of select="$procedure" />
               </ctl:message>
               <!-- get a valid observableProperty-->
               <xsl:variable name="observableProperty" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:observableProperty[1]" />
               <ctl:message>
                  The observableProperty was:
                  <xsl:value-of select="$observableProperty" />
               </ctl:message>
               <!-- get a valid responseFormat-->
               <xsl:variable name="responseFormat" select="string('http%3A%2F%2Fwww.opengis.net%2Fom%2F2.0')" />
               <ctl:message>
                  The responseFormat was:
                  <xsl:value-of select="$responseFormat" />
               </ctl:message>
               <!-- get a valid observation //just use offering id....wait the response by SOS2 mailing list.-->
               <!-- <xsl:variable name="observation" select="$getObservationResponse//sos:observationData[1]/om:OM_Observation[1]/@gml:id[1]" /> -->
               <xsl:variable name="observation" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetObservationById']/ows:Parameter[@name='observation']/ows:AllowedValues/ows:Value[1]" />
               <ctl:message>
                  The observation was:
                  <xsl:value-of select="$observation" />
               </ctl:message>
               <xsl:if test="$test0701 eq 'true'">
                  <ctl:message select="'******************** 07.01.RequestNoService ********************'" />
                  <ctl:call-test name="sos:GOBIRequestNoService_obsByIdRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
                     <ctl:with-param name="observation" select="$observation" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0702 eq 'true'">
                  <ctl:message select="'******************** 07.02.RequestNullService ********************'" />
                  <ctl:call-test name="sos:GOBIRequestNullService_obsByIdRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
                     <ctl:with-param name="observation" select="$observation" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0703 eq 'true'">
                  <ctl:message select="'******************** 07.03.RequestInvalidService ********************'" />
                  <ctl:call-test name="sos:GOBIRequestInvalidService_obsByIdRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
                     <ctl:with-param name="observation" select="$observation" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0704 eq 'true'">
                  <ctl:message select="'******************** 07.04.RequestNoVersion ********************'" />
                  <ctl:call-test name="sos:GOBIRequestNoVersion_obsByIdRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
                     <ctl:with-param name="observation" select="$observation" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0705 eq 'true'">
                  <ctl:message select="'******************** 07.05.RequestNullVersion ********************'" />
                  <ctl:call-test name="sos:GOBIRequestNullVersion_obsByIdRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
                     <ctl:with-param name="observation" select="$observation" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0706 eq 'true'">
                  <ctl:message select="'******************** 07.06.RequestInvalidVersion ********************'" />
                  <ctl:call-test name="sos:GOBIRequestInvalidVersion_obsByIdRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
                     <ctl:with-param name="observation" select="$observation" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0707 eq 'true'">
                  <ctl:message select="'******************** 07.07.RequestNullobservation ********************'" />
                  <ctl:call-test name="sos:GOBIRequestNullobservation_obsByIdRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
                     <ctl:with-param name="observation" select="$observation" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0708 eq 'true'">
                  <ctl:message select="'******************** 07.08.RequestInvalidobservation ********************'" />
                  <ctl:call-test name="sos:GOBIRequestInvalidobservation_obsByIdRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
                     <ctl:with-param name="observation" select="$observation" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0709 eq 'true'">
                  <ctl:message select="'******************** 07.09.RequestValidRequest ********************'" />
                  <ctl:call-test name="sos:GOBIRequestValidRequest_obsByIdRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
                     <ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
                     <ctl:with-param name="observation" select="$observation" />
                  </ctl:call-test>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0701 Send GetObservationById request without parameter service (KVP) ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
   <!-- 0701 Send GetObservationById request without parameter service (POST or SOAP),the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0".. -->
   <ctl:test name="sos:GOBIRequestNoService_obsByIdRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetObservationByIdRootElementName" />
      <ctl:param name="GetObservationByIdResponseSchemaLocation" />
      <ctl:param name="GetObservationByIdResponseSchemaType" />
      <ctl:param name="observation" />
      <ctl:assertion>Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0".</ctl:assertion>
      <ctl:comment>Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="GetObservationByIdResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservationById</ctl:param>
                     <ctl:param name="observation">
                        <xsl:value-of select="$observation" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservationById version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservationById version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetObservationByIdResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetObservationByIdResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservationById request with no service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                              <ctl:with-param name="locatorToCheck" select="string('service')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
                              <ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with no version parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
                           <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with no service parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0".</ctl:message>
                           <ctl:fail />
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0702 Send GetObservationById request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
   <ctl:test name="sos:GOBIRequestNullService_obsByIdRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetObservationByIdRootElementName" />
      <ctl:param name="GetObservationByIdResponseSchemaLocation" />
      <ctl:param name="GetObservationByIdResponseSchemaType" />
      <ctl:param name="observation" />
      <ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="GetObservationByIdResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service" />
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservationById</ctl:param>
                     <ctl:param name="observation">
                        <xsl:value-of select="$observation" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservationById service="" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservationById service="" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetObservationByIdResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetObservationByIdResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservationById request with invalid service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('service')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with null service parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0703 Send GetObservationById request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
   <ctl:test name="sos:GOBIRequestInvalidService_obsByIdRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetObservationByIdRootElementName" />
      <ctl:param name="GetObservationByIdResponseSchemaLocation" />
      <ctl:param name="GetObservationByIdResponseSchemaType" />
      <ctl:param name="observation" />
      <ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="GetObservationByIdResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">ASDF</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservationById</ctl:param>
                     <ctl:param name="observation">
                        <xsl:value-of select="$observation" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservationById service="ASDF" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservationById service="ASDF" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetObservationByIdResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetObservationByIdResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservationById request with invalid service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('service')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with invalid service parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0704 Send GetObservationById request without parameter version (KVP),the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
   <!-- 0704 Send GetObservationById request without parameter version (POST or SOAP),the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0".. -->
   <ctl:test name="sos:GOBIRequestNoVersion_obsByIdRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetObservationByIdRootElementName" />
      <ctl:param name="GetObservationByIdResponseSchemaLocation" />
      <ctl:param name="GetObservationByIdResponseSchemaType" />
      <ctl:param name="observation" />
      <ctl:assertion>Send a request without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="GetObservationByIdResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="request">GetObservationById</ctl:param>
                     <ctl:param name="observation">
                        <xsl:value-of select="$observation" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetObservationByIdResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetObservationByIdResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservationById request with no version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                              <ctl:with-param name="locatorToCheck" select="string('version')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
                              <ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with no version parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
                           <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with no version parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0".</ctl:message>
                           <ctl:fail />
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0705 Send GetObservationById request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
   <ctl:test name="sos:GOBIRequestNullVersion_obsByIdRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetObservationByIdRootElementName" />
      <ctl:param name="GetObservationByIdResponseSchemaLocation" />
      <ctl:param name="GetObservationByIdResponseSchemaType" />
      <ctl:param name="observation" />
      <ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="GetObservationByIdResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version" />
                     <ctl:param name="request">GetObservationById</ctl:param>
                     <ctl:param name="observation">
                        <xsl:value-of select="$observation" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" version="" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" version="" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetObservationByIdResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetObservationByIdResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservationById request with invalid version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('version')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with null version parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0706 Send GetObservationById request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
   <ctl:test name="sos:GOBIRequestInvalidVersion_obsByIdRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetObservationByIdRootElementName" />
      <ctl:param name="GetObservationByIdResponseSchemaLocation" />
      <ctl:param name="GetObservationByIdResponseSchemaType" />
      <ctl:param name="observation" />
      <ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="GetObservationByIdResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">999</ctl:param>
                     <ctl:param name="request">GetObservationById</ctl:param>
                     <ctl:param name="observation">
                        <xsl:value-of select="$observation" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" version="999" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" version="999" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetObservationByIdResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetObservationByIdResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservationById request with invalid version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('version')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with invalid version parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0707 Send GetObservationById request with null Element observation ,the response must be a valid exception with code "MissingParameterValue" and locator "observation".. -->
   <ctl:test name="sos:GOBIRequestNullobservation_obsByIdRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetObservationByIdRootElementName" />
      <ctl:param name="GetObservationByIdResponseSchemaLocation" />
      <ctl:param name="GetObservationByIdResponseSchemaType" />
      <ctl:param name="observation" />
      <ctl:assertion>Send a request with null parameter "observation",and the response must be a valid exception with code "MissingParameterValue" and locator "observation".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observation"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="GetObservationByIdResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservationById</ctl:param>
                     <ctl:param name="observation" />
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation />
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation />
                        </sos:GetObservationById>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetObservationByIdResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetObservationByIdResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservationById request with invalid observation parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('observation')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with null observation parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observation".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0708 Send GetObservationById request with invalid Element observation ,the response must be an empty GetObservationByIdResponse. -->
   <ctl:test name="sos:GOBIRequestInvalidobservation_obsByIdRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetObservationByIdRootElementName" />
      <ctl:param name="GetObservationByIdResponseSchemaLocation" />
      <ctl:param name="GetObservationByIdResponseSchemaType" />
      <ctl:param name="observation" />
      <ctl:assertion>Send a request with invalid parameter "observation",and the response must be an empty GetObservationByIdResponse.</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid empty GetObservationByIdResponse; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="GetObservationByIdResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservationById</ctl:param>
                     <ctl:param name="observation">
                        <xsl:value-of select="current-dateTime()" />
                     </ctl:param>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$GetObservationByIdResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$GetObservationByIdResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <parsers:SOAPParser return="content">
                        <parsers:XMLValidatingParser>
                           <parsers:schemas>
                              <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                              <parsers:schema>
                                 <xsl:attribute name="type">
                                    <xsl:value-of select="$GetObservationByIdResponseSchemaType" />
                                 </xsl:attribute>
                                 <xsl:value-of select="$GetObservationByIdResponseSchemaLocation" />
                              </parsers:schema>
                           </parsers:schemas>
                        </parsers:XMLValidatingParser>
                     </parsers:SOAPParser>
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$GetObservationByIdResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$GetObservationByIdResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetObservationByIdResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetObservationByIdResponse/*">
                  <!-- check the root is "sos:GetObservationByIdResponse" and empty context.-->
                  <xsl:variable name="responseRoot" select="local-name-from-QName(node-name($GetObservationByIdResponse/*[1]))" />
                  <ctl:message>
                     responseRoot:  "
                     <xsl:value-of select="$responseRoot" />
                     ".
                  </ctl:message>
                  <xsl:variable name="responseRoot2" select="local-name-from-QName(node-name($GetObservationByIdResponse/soap12:Envelope/soap12:Body/*[1]))" />
                  <ctl:message>
                     responseRoot2:  "
                     <xsl:value-of select="$responseRoot2" />
                     ".
                  </ctl:message>
                  <xsl:choose>
                     <xsl:when test="not($responseRoot=$GetObservationByIdRootElementName) and not($responseRoot2=$GetObservationByIdRootElementName)">
                        <ctl:message>
                           FAILURE:  The root element from the response to a GetObservationById request "
                           <xsl:value-of select="$responseRoot" />
                           " does not match the expected root element of "
                           <xsl:value-of select="$GetObservationByIdRootElementName" />
                           "
                        </ctl:message>
                        <ctl:fail />
                     </xsl:when>
                     <xsl:when test="$GetObservationByIdResponse/*[1]/*">
                        <ctl:message>FAILURE:  An empty GetObservationByIdResponse should be returned if no observation was found matching one or more of the identifiers provided in the request.</ctl:message>
                        <ctl:fail />
                     </xsl:when>
                     <xsl:otherwise>
                        <ctl:message>Passed.</ctl:message>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0709 Send valid GetObservationById request, the response must be a valid GetObservationByIdResponse. -->
   <ctl:test name="sos:GOBIRequestValidRequest_obsByIdRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetObservationByIdRootElementName" />
      <ctl:param name="GetObservationByIdResponseSchemaLocation" />
      <ctl:param name="GetObservationByIdResponseSchemaType" />
      <ctl:param name="observation" />
      <ctl:assertion>Send a valid request ,and there must be have a valid GetObservationByIdResponse returned.</ctl:assertion>
      <ctl:comment>Pass if the observation listed in GetObservationByIdResponse are same to GetObservationById request; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <ctl:message>
            observation:  "
            <xsl:value-of select="$observation" />
            ".
         </ctl:message>
         <xsl:variable name="GetObservationByIdResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservationById</ctl:param>
                     <ctl:param name="observation">
                        <xsl:value-of select="$observation" />
                     </ctl:param>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$GetObservationByIdResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$GetObservationByIdResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <parsers:SOAPParser return="content">
                        <parsers:XMLValidatingParser>
                           <parsers:schemas>
                              <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                              <parsers:schema>
                                 <xsl:attribute name="type">
                                    <xsl:value-of select="$GetObservationByIdResponseSchemaType" />
                                 </xsl:attribute>
                                 <xsl:value-of select="$GetObservationByIdResponseSchemaLocation" />
                              </parsers:schema>
                           </parsers:schemas>
                        </parsers:XMLValidatingParser>
                     </parsers:SOAPParser>
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservationById service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:observation>
                              <xsl:value-of select="$observation" />
                           </sos:observation>
                        </sos:GetObservationById>
                     </ctl:body>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$GetObservationByIdResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$GetObservationByIdResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetObservationByIdResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <!-- check the gml:identifier value is same to observation value in the request. -->
               <xsl:if test="$GetObservationByIdResponse/*">
                  <!-- check the root is "sos:GetObservationByIdResponse" and empty context.-->
                  <xsl:variable name="responseRoot" select="local-name-from-QName(node-name($GetObservationByIdResponse/*[1]))" />
                  <ctl:message>
                     responseRoot:  "
                     <xsl:value-of select="$responseRoot" />
                     ".
                  </ctl:message>
                  <xsl:variable name="responseRoot2" select="local-name-from-QName(node-name($GetObservationByIdResponse/soap12:Envelope/soap12:Body/*[1]))" />
                  <ctl:message>
                     responseRoot2:  "
                     <xsl:value-of select="$responseRoot2" />
                     ".
                  </ctl:message>
                  <xsl:variable name="gmlidentifier" select="$GetObservationByIdResponse//sos:GetObservationByIdResponse/sos:observation[1]/om:OM_Observation[1]/@gml:id" />
                  <xsl:choose>
                     <xsl:when test="not($responseRoot=$GetObservationByIdRootElementName) and not($responseRoot2=$GetObservationByIdRootElementName)">
                        <ctl:message>
                           FAILURE:  The root element from the response to a GetObservationById request "
                           <xsl:value-of select="$responseRoot" />
                           " does not match the expected root element of "
                           <xsl:value-of select="$GetObservationByIdRootElementName" />
                           "
                        </ctl:message>
                        <ctl:fail />
                     </xsl:when>
                     <xsl:when test="count(gmlidentifier) &gt; 0 and not($gmlidentifier=$observation)">
                        <ctl:message>
                           FAILURE: The gml:identifier values "
                           <xsl:value-of select="$gmlidentifier" />
                           " in response is not same to observation value "
                           <xsl:value-of select="$observation" />
                           " in the request.
                        </ctl:message>
                        <ctl:fail />
                     </xsl:when>
                     <xsl:otherwise>
                        <ctl:message>Passed.</ctl:message>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
</ctl:package>