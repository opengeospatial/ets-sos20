<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" xmlns:fes="http://www.opengis.net/fes/2.0" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:om="http://www.opengis.net/om/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:owsTests="http://www.opengis.net/ows/1.1" xmlns:parsers="http://www.occamlab.com/te/parsers" xmlns:sml="http://www.opengis.net/sensorML/1.0.1" xmlns:soap11="http://schemas.xmlsoap.org/soap/" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:sosFunctions="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <ctl:function name="sosFunctions:exceptionReportSchemaPath">
      <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
      <ctl:param name="owsVersion">The numeric version of the schema</ctl:param>
      <ctl:code>
         <xsl:value-of select="sosFunctions:schemaPath($schemaRoot, $owsVersion, 'ows', 'owsExceptionReport.xsd')" />
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:schemaPath">
      <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
      <ctl:param name="version">The numeric version of the schema</ctl:param>
      <ctl:param name="encoding">The name of the service or encoding to be used</ctl:param>
      <ctl:param name="filename">Filename of schema file</ctl:param>
      <ctl:code>
         <xsl:value-of select="concat($schemaRoot, $encoding, '/', $version, '/', $filename)" />
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:xmlValidatingParser">
      <ctl:param name="schemaFile">schemaFile</ctl:param>
      <ctl:description>Standard CTL XMLValidatingParser</ctl:description>
      <ctl:code>
         <xsl:choose>
            <xsl:when test="starts-with($schemaFile,'http')">
               <parsers:XMLValidatingParser ignoreErrors="false">
                  <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                  <xsl:if test="$schemaFile='xsd/ogc/om/1.0.0/om.xsd'">
                     <parsers:schema type="resource">xsd/ogc/sampling/1.0.0/sampling.xsd</parsers:schema>
                  </xsl:if>
                  <parsers:schemas>
                     <parsers:schema type="resource">
                        <xsl:value-of select="$schemaFile" />
                     </parsers:schema>
                     <parsers:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</parsers:schema>
                  </parsers:schemas>
               </parsers:XMLValidatingParser>
            </xsl:when>
            <xsl:otherwise>
               <parsers:XMLValidatingParser ignoreErrors="false">
                  <parsers:schemas>
                     <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                     <parsers:schema type="resource">
                        <xsl:value-of select="$schemaFile" />
                     </parsers:schema>
                  </parsers:schemas>
               </parsers:XMLValidatingParser>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:exceptionCode">
      <ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
      <ctl:description>Return the @exceptionCode attribute of an ows:ExceptionReport</ctl:description>
      <ctl:code>
         <xsl:variable name="exceptionElement" select="sosFunctions:exceptionElement($exceptionResponse)" />
         <xsl:value-of select="$exceptionElement/@exceptionCode" />
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:xmlValidatingParser">
      <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
      <ctl:param name="version">The numeric version of the schema</ctl:param>
      <ctl:param name="encoding">The name of the service or encoding to be used</ctl:param>
      <ctl:param name="filename">Filenam of schema file</ctl:param>
      <ctl:description>Standard CTL XMLValidatingParser</ctl:description>
      <ctl:code>
         <xsl:variable name="schemaFile" select="sosFunctions:schemaPath($schemaRoot, $version, $encoding, $filename)" />
         <xsl:copy-of select="sosFunctions:xmlValidatingParser($schemaFile)" />
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:exceptionElement">
      <ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
      <ctl:description>Return the Exception element of an ows:ExceptionReport</ctl:description>
      <ctl:code>
         <xsl:copy-of select="$exceptionResponse//ows:ExceptionReport/ows:Exception[1]" />
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:validateGetCapabilitiesResponseSOAP">
      <ctl:return>The GetCapabilitiesResponse document if it's valid</ctl:return>
      <ctl:description>Validates a GetCapabilitiesResponse document according to its schema</ctl:description>
      <ctl:code>
         <parsers:SOAPParser return="content">
            <parsers:XMLValidatingParser>
               <parsers:schemas>
                  <parsers:schema type="resource">
                     <xsl:value-of select="sosFunctions:getSchemaLocation(string('sosGetCapabilities.xsd'))" />
                  </parsers:schema>
                  <parsers:schema type="resource">
                     <xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
                  </parsers:schema>
               </parsers:schemas>
            </parsers:XMLValidatingParser>
         </parsers:SOAPParser>
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:getSchemaLocation">
      <ctl:param name="schemaName">The name of the schema file for which the full path will be returned</ctl:param>
      <ctl:return>The full schema path</ctl:return>
      <ctl:description>Based on the provided schema name, this function returns the full URL to the schema document</ctl:description>
      <ctl:code>
         <xsl:variable name="schemaLocation" select="string('xsd/ogc/')" />
         <xsl:variable name="sosSchemaLocation" select="concat($schemaLocation,'sos/2.0.0/')" />
         <xsl:variable name="swesSchemaLocation" select="concat($schemaLocation,'swes/2.0/')" />
         <xsl:variable name="owsSchemaLocation" select="concat($schemaLocation,'ows/1.1.0/')" />
         <xsl:variable name="sensorMLSchemaLocation" select="concat($schemaLocation,'sensorML/1.0.1/')" />
         <xsl:variable name="tmlSchemaLocation" select="concat($schemaLocation,'tml/1.0.0/')" />
         <xsl:choose>
            <xsl:when test="starts-with($schemaName,'sos')">
               <xsl:value-of select="concat($sosSchemaLocation,$schemaName)" />
            </xsl:when>
            <xsl:when test="starts-with($schemaName,'swes')">
               <xsl:value-of select="concat($swesSchemaLocation,$schemaName)" />
            </xsl:when>
            <xsl:when test="starts-with($schemaName,'ows')">
               <xsl:value-of select="concat($owsSchemaLocation,$schemaName)" />
            </xsl:when>
            <xsl:when test="starts-with($schemaName,'sensorML')">
               <xsl:value-of select="concat($sensorMLSchemaLocation,$schemaName)" />
            </xsl:when>
            <xsl:when test="starts-with($schemaName,'tml')">
               <xsl:value-of select="concat($tmlSchemaLocation,$schemaName)" />
            </xsl:when>
            <xsl:otherwise>
               <xsl:value-of select="$schemaLocation" />
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:validateExceptionReport">
      <!-- CHECK OK -->
      <ctl:return>The exception report if it's valid</ctl:return>
      <ctl:description>Validates a returned exception report according to its schema and determines if it is an appropriate exception report for an SOS</ctl:description>
      <ctl:code>
         <parsers:XMLValidatingParser>
            <parsers:schemas>
               <parsers:schema type="resource">
                  <xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
               </parsers:schema>
            </parsers:schemas>
         </parsers:XMLValidatingParser>
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:validateExceptionReportSOAP">
      <ctl:return>The exception report if it's valid</ctl:return>
      <ctl:description>Validates a returned exception report according to its schema and determines if it is an appropriate exception report for an SOS</ctl:description>
      <ctl:code>
         <parsers:SOAPParser return="content">
            <parsers:XMLValidatingParser>
               <parsers:schemas>
                  <parsers:schema type="resource">
                     <xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
                  </parsers:schema>
               </parsers:schemas>
            </parsers:XMLValidatingParser>
         </parsers:SOAPParser>
      </ctl:code>
   </ctl:function>
   <!--Validates an ExceptionReport and checks for specific exceptionCode and locator values-->
   <ctl:function name="sosFunctions:checkExceptionReport">
      <!-- CHECK OK -->
      <ctl:param name="exceptionReport">The exception report to check</ctl:param>
      <ctl:param name="exceptionCodeToCheck">The exceptionCode to check</ctl:param>
      <ctl:param name="locatorToCheck">The locator to check (a * can be provided to indicate that any locator value is allowed)</ctl:param>
      <ctl:param name="PostEncodingIsSOAP">Encoding Type</ctl:param>
      <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
      <ctl:description />
      <ctl:code>
         <xsl:if test="$PostEncodingIsSOAP=string('true')">
            <xsl:variable name="exceptionElement" select="$exceptionReport//ows:Exception[1]" />
            <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
            <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
            <xsl:choose>
               <xsl:when test="$locatorToCheck='*'">
                  <xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (string-length(normalize-space($locatorValue))&gt;=0)" />
               </xsl:when>
               <xsl:otherwise>
                  <xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (lower-case($locatorToCheck)=lower-case($locatorValue))" />
               </xsl:otherwise>
            </xsl:choose>
         </xsl:if>
         <xsl:if test="not($PostEncodingIsSOAP=string('true'))">
            <xsl:variable name="exceptionElement" select="$exceptionReport//ows:Exception[1]" />
            <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
            <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
            <xsl:choose>
               <xsl:when test="$locatorToCheck='*'">
                  <xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (string-length(normalize-space($locatorValue))&gt;=0)" />
               </xsl:when>
               <xsl:otherwise>
                  <xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (lower-case($locatorToCheck)=lower-case($locatorValue))" />
               </xsl:otherwise>
            </xsl:choose>
         </xsl:if>
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:getExceptionInfo">
      <ctl:param name="exceptionReport">The exception report</ctl:param>
      <ctl:return>The Exception Code and Locator of an exception report</ctl:return>
      <ctl:code>
         <xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception[1]" />
         <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
         <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
         <xsl:value-of select="concat('Exception Report (exceptionCode, locator):  ',$exceptionCodeValue,',',$locatorValue)" />
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:getExceptionInfoSOAP">
      <!-- CHECK OK -->
      <ctl:param name="exceptionReport">The exception report to check</ctl:param>
      <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
      <ctl:description />
      <ctl:code>
         <xsl:variable name="exceptionElement" select="$exceptionReport//soap12:Detail/ows:Exception[1]" />
         <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
         <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
         <xsl:variable name="exceptionText" select="$exceptionElement/ows:ExceptionText[1]" />
         <xsl:value-of select="concat('ExceptionReport (exceptionCode, locator):  ',$exceptionCodeValue,', ',$locatorValue,' - ',$exceptionText)" />
      </ctl:code>
   </ctl:function>
   <!--Validates a GetObservation response-->
   <ctl:function name="sosFunctions:validateGetObservationResponse">
      <ctl:return>The GetObservationResponse document if it's valid</ctl:return>
      <ctl:description>Validates a GetObservationResponse document according to its schema</ctl:description>
      <ctl:code>
         <parsers:XMLValidatingParser>
            <parsers:schemas>
               <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
               <parsers:schema type="resource">
                  <xsl:value-of select="sosFunctions:getSchemaLocation(string('sosGetObservation.xsd'))" />
               </parsers:schema>
               <parsers:schema type="resource">
                  <xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
               </parsers:schema>
            </parsers:schemas>
         </parsers:XMLValidatingParser>
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:validateGetObservationResponseSOAP">
      <ctl:return>The GetCapabilitiesResponse document if it's valid</ctl:return>
      <ctl:description>Validates a GetCapabilitiesResponse document according to its schema</ctl:description>
      <ctl:code>
         <parsers:SOAPParser return="content">
            <parsers:XMLValidatingParser>
               <parsers:schemas>
                  <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                  <parsers:schema type="resource">
                     <xsl:value-of select="sosFunctions:getSchemaLocation(string('sosGetObservation.xsd'))" />
                  </parsers:schema>
                  <parsers:schema type="resource">
                     <xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
                  </parsers:schema>
               </parsers:schemas>
            </parsers:XMLValidatingParser>
         </parsers:SOAPParser>
      </ctl:code>
   </ctl:function>
   <!--Validates a DescribeSensor response-->
   <ctl:function name="sosFunctions:validateDescribeSensorResponse">
      <ctl:return>The GetObservationResponse document if it's valid</ctl:return>
      <ctl:description>Validates a GetObservationResponse document according to its schema</ctl:description>
      <ctl:code>
         <parsers:XMLValidatingParser>
            <parsers:schemas>
               <parsers:schema type="resource">
                  <xsl:value-of select="sosFunctions:getSchemaLocation(string('swesDescribeSensor.xsd'))" />
               </parsers:schema>
               <parsers:schema type="resource">
                  <xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
               </parsers:schema>
            </parsers:schemas>
         </parsers:XMLValidatingParser>
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:validateDescribeSensorResponseSOAP">
      <ctl:return>The GetCapabilitiesResponse document if it's valid</ctl:return>
      <ctl:description>Validates a GetCapabilitiesResponse document according to its schema</ctl:description>
      <ctl:code>
         <parsers:SOAPParser return="content">
            <parsers:XMLValidatingParser>
               <parsers:schemas>
                  <parsers:schema type="resource">
                     <xsl:value-of select="sosFunctions:getSchemaLocation(string('swesDescribeSensor.xsd'))" />
                  </parsers:schema>
                  <parsers:schema type="resource">
                     <xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
                  </parsers:schema>
               </parsers:schemas>
            </parsers:XMLValidatingParser>
         </parsers:SOAPParser>
      </ctl:code>
   </ctl:function>
   <!-- create OM_Measure -->
   <ctl:function name="sosFunctions:getOMObservation">
      <ctl:param name="observationType">The observationType</ctl:param>
      <ctl:param name="procedure">The procedure</ctl:param>
      <ctl:param name="observableProperty">The observableProperty</ctl:param>
      <ctl:param name="featureOfInterest">The featureOfInterest</ctl:param>
      <ctl:return>The OM_Observation document if it's valid</ctl:return>
      <ctl:description>Return a OM_Observation by params.</ctl:description>
      <ctl:code>
         <om:OM_Observation>
            <xsl:attribute name="gml:id">
               <xsl:value-of select="'obsTest1'" />
            </xsl:attribute>
            <om:type>
               <xsl:attribute name="xlink:href">
                  <xsl:value-of select="$observationType" />
               </xsl:attribute>
            </om:type>
            <om:phenomenonTime>
               <gml:TimeInstant gml:id="phenomenonTime">
                  <xsl:attribute name="gml:id">
                     <xsl:value-of select="'phenomenonTime'" />
                  </xsl:attribute>
                  <gml:timePosition>
                     <xsl:value-of select="current-dateTime()" />
                  </gml:timePosition>
               </gml:TimeInstant>
            </om:phenomenonTime>
            <om:resultTime>
               <xsl:attribute name="xlink:href">
                  <xsl:value-of select="'#phenomenonTime'" />
               </xsl:attribute>
            </om:resultTime>
            <om:procedure>
               <xsl:attribute name="xlink:href">
                  <xsl:value-of select="$procedure" />
               </xsl:attribute>
            </om:procedure>
            <om:parameter>
               <om:NamedValue>
                  <om:name>
                     <xsl:attribute name="xlink:href">
                        <xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" />
                     </xsl:attribute>
                  </om:name>
                  <om:value>
                     <gml:Point>
                        <xsl:attribute name="gml:id">
                           <xsl:value-of select="'SamplingPoint2'" />
                        </xsl:attribute>
                        <gml:pos>
                           <xsl:attribute name="srsName">
                              <xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" />
                           </xsl:attribute>
                           <xsl:value-of select="'54.9 10.52'" />
                        </gml:pos>
                     </gml:Point>
                  </om:value>
               </om:NamedValue>
            </om:parameter>
            <om:observedProperty>
               <xsl:attribute name="xlink:href">
                  <xsl:value-of select="$observableProperty" />
               </xsl:attribute>
            </om:observedProperty>
            <om:featureOfInterest>
               <xsl:attribute name="xlink:href">
                  <xsl:value-of select="$featureOfInterest" />
               </xsl:attribute>
            </om:featureOfInterest>
            <om:result>
               <xsl:attribute name="xsi:type">
                  <xsl:value-of select="'gml:MeasureType'" />
               </xsl:attribute>
               <xsl:attribute name="uom">
                  <xsl:value-of select="'urn:ogc:def:uom:OGC:m'" />
               </xsl:attribute>
               <xsl:value-of select="'0.28'" />
            </om:result>
         </om:OM_Observation>
      </ctl:code>
   </ctl:function>
   <ctl:function name="sosFunctions:getOMObservationTemplate">
      <ctl:param name="procedure">The procedure</ctl:param>
      <ctl:param name="observableProperty">The observableProperty</ctl:param>
      <ctl:param name="featureOfInterest">The featureOfInterest</ctl:param>
      <ctl:return>The OM_Observation document if it's valid</ctl:return>
      <ctl:description>Return a OM_Observation by params.</ctl:description>
      <ctl:code>
         <om:OM_Observation>
            <xsl:attribute name="gml:id">
               <xsl:value-of select="'obsTest2'" />
            </xsl:attribute>
            <om:phenomenonTime>
               <xsl:attribute name="nilReason">
                  <xsl:value-of select="'template'" />
               </xsl:attribute>
            </om:phenomenonTime>
            <om:resultTime>
               <xsl:attribute name="nilReason">
                  <xsl:value-of select="'template'" />
               </xsl:attribute>
            </om:resultTime>
            <om:procedure>
               <xsl:attribute name="xlink:href">
                  <xsl:value-of select="$procedure" />
               </xsl:attribute>
            </om:procedure>
            <om:observedProperty>
               <xsl:attribute name="xlink:href">
                  <xsl:value-of select="$observableProperty" />
               </xsl:attribute>
            </om:observedProperty>
            <om:featureOfInterest>
               <xsl:attribute name="xlink:href">
                  <xsl:value-of select="$featureOfInterest" />
               </xsl:attribute>
            </om:featureOfInterest>
            <om:result />
         </om:OM_Observation>
      </ctl:code>
   </ctl:function>
</ctl:package>