<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" xmlns:fes="http://www.opengis.net/fes/2.0" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:om="http://www.opengis.net/om/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:owsTests="http://www.opengis.net/ows/1.1" xmlns:parsers="http://www.occamlab.com/te/parsers" xmlns:sml="http://www.opengis.net/sensorML/1.0.1" xmlns:soap11="http://schemas.xmlsoap.org/soap/" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:sosFunctions="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<!-- 02.SOS General Main -->
   <ctl:test name="sos:general-main">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="exceptionReportSchema" />
      <ctl:param name="test0201" />
      <ctl:assertion>All assertions for "general" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the general module.</ctl:comment>
      <ctl:code>
         <ctl:message select="concat('run 02.01.SOS.General-InvalidRequest.1: ',$test0201)" />
         <xsl:if test="$test0201 eq 'true'">
            <ctl:message select="'******************** test0201 sos:general-SOS.General-InvalidRequest.1 ********************'" />
            <ctl:call-test name="sos:general-SOS.General-InvalidRequest.1">
               <ctl:with-param name="serviceURL" select="$serviceURL" />
               <ctl:with-param name="isGET" select="$isGET" />
               <ctl:with-param name="isSOAP" select="$isSOAP" />
               <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema" />
            </ctl:call-test>
         </xsl:if>
      </ctl:code>
   </ctl:test>
   <ctl:test name="sos:general-SOS.General-InvalidRequest.1">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="exceptionReportSchema" />
      <ctl:assertion>Sending a request that is non-conformant to a schema associated with an SOS operation causes the server to return a valid error report message with an exceptionCode value of InvalidRequest.</ctl:assertion>
      <ctl:comment>Pass if the service returns a valid exception message with an exceptionCode value of InvalidRequest; fail otherwise.</ctl:comment>
      <ctl:link />
      <ctl:code>
         <!--
					1.)  KVP selected,pass this test.
                    1.)  Validate the response against the ExceptionReport schema.
                    2.)  If the response validates, then check that the exceptionCode value is "InvalidRequest".
                -->
         <xsl:if test="$isGET eq 'true'">
            <ctl:message select="'This test does not support KVP type request,so passed.'" />
         </xsl:if>
         <xsl:if test="$isSOAP eq 'true'">
            <ctl:message select="'This server cannot send soap request which body is only &quot;test&quot;,so passed.'" />
         </xsl:if>
         <xsl:if test="not($isGET eq 'true') and not($isSOAP eq 'true')">
            <ctl:message>
               Issuing an invalid request to:
               <xsl:value-of select="$serviceURL" />
            </ctl:message>
            <ctl:message select="'The body of the request will be &quot;test&quot;'" />
            <xsl:variable name="invalidRequestResponse">
               <ctl:request>
                  <ctl:url>
                     <xsl:value-of select="$serviceURL" />
                  </ctl:url>
                  <ctl:method>post</ctl:method>
                  <ctl:body>test</ctl:body>
                  <ctl:call-function name="sosFunctions:xmlValidatingParser">
                     <ctl:with-param name="schemaFile" select="$exceptionReportSchema" />
                  </ctl:call-function>
               </ctl:request>
            </xsl:variable>
            <xsl:choose>
               <xsl:when test="not($invalidRequestResponse/*)">
                  <ctl:message>
                     FAILURE:  The server did not return a response to an invalid request or the response from the server was not a valid exception report.  The response from the server was:  "
                     <xsl:copy-of select="$invalidRequestResponse/*" />
                     "
                  </ctl:message>
                  <ctl:message select="concat('Schema file: ', $exceptionReportSchema)" />
                  <ctl:fail />
               </xsl:when>
               <xsl:otherwise>
                  <ctl:message>
                     The response was
                     <xsl:value-of select="sosFunctions:getExceptionInfo($invalidRequestResponse)" />
                  </ctl:message>
                  <ctl:message>Checking the validity of the response to an invalid request.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$invalidRequestResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
                        <ctl:with-param name="locatorToCheck" select="string('*')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>
                        FAILURE:  The response to an invalid request was expected to be an exception report with an exceptionCode of "InvalidRequest" and a locator value containing the validation issue.  The returned exception report was:  "
                        <xsl:value-of select="$invalidRequestResponse/*" />
                        "
                     </ctl:message>
                     <ctl:message select="concat('Returned exception code was: &quot;', sosFunctions:exceptionCode($invalidRequestResponse), '&quot;')" />
                     <ctl:message select="'Expected exception code was: &quot;InvalidRequest&quot;'" />
                     <ctl:fail />
                  </xsl:if>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:if>
      </ctl:code>
   </ctl:test>
</ctl:package>