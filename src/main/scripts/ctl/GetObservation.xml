<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" xmlns:fes="http://www.opengis.net/fes/2.0" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:om="http://www.opengis.net/om/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:owsTests="http://www.opengis.net/ows/1.1" xmlns:parsers="http://www.occamlab.com/te/parsers" xmlns:sml="http://www.opengis.net/sensorML/1.0.1" xmlns:soap11="http://schemas.xmlsoap.org/soap/" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:sosFunctions="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<!-- 05.SOS Core: GetObservation -->
   <!-- 05 Send a valid GetObservation (some parameters) ,Check the response (valid GetObservationResponse) and pass the GetObservationResponse to other tests-->
   <ctl:test name="sos:GetObservation-Test" isConformanceClass="true" isBasic="true">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="exceptionReportSchemaLocation" />
      <ctl:param name="exceptionReportSchemaType" />
      <ctl:param name="test0501" />
      <ctl:param name="test0502" />
      <ctl:param name="test0503" />
      <ctl:param name="test0504" />
      <ctl:param name="test0505" />
      <ctl:param name="test0506" />
      <ctl:param name="test0507" />
      <ctl:param name="test0508" />
      <ctl:param name="test0509" />
      <ctl:param name="test0510" />
      <ctl:param name="test0511" />
      <ctl:param name="test0512" />
      <ctl:param name="test0513" />
      <ctl:param name="test0514" />
      <ctl:param name="test0515" />
      <ctl:param name="test0516" />
      <ctl:param name="test0517" />
      <ctl:param name="test0518" />
      <ctl:param name="test0519" />
      <ctl:param name="test0520" />
      <ctl:assertion>Execute GetObservation Test.</ctl:assertion>
      <ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
      <ctl:code>
         <ctl:message>
            The observationResponseSchemaType was:
            <xsl:value-of select="$observationResponseSchemaType" />
         </ctl:message>
         <ctl:message>
            The observationResponseSchemaLocation was:
            <xsl:value-of select="$observationResponseSchemaLocation" />
         </ctl:message>
         <!-- 從GetCapabilities取得有效的 offering,procedure,observedProperty -->
         <!-- get a valid offering-->
         <xsl:variable name="offering" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:identifier" />
         <ctl:message>
            The offering was:
            <xsl:value-of select="$offering" />
         </ctl:message>
         <!-- get a valid procedure-->
         <xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:procedure[1]" />
         <ctl:message>
            The procedure was:
            <xsl:value-of select="$procedure" />
         </ctl:message>
         <!-- get a valid observableProperty-->
         <xsl:variable name="observableProperty" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:observableProperty[1]" />
         <ctl:message>
            The observableProperty was:
            <xsl:value-of select="$observableProperty" />
         </ctl:message>
         <!-- get a valid responseFormat-->
         <xsl:variable name="responseFormat" select="string('http%3A%2F%2Fwww.opengis.net%2Fom%2F2.0')" />
         <ctl:message>
            The responseFormat was:
            <xsl:value-of select="$responseFormat" />
         </ctl:message>
         <!-- get a valid getObservationResponse-->
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$observationResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$observationResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <parsers:SOAPParser return="content">
                        <parsers:XMLValidatingParser>
                           <parsers:schemas>
                              <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                              <parsers:schema>
                                 <xsl:attribute name="type">
                                    <xsl:value-of select="$observationResponseSchemaType" />
                                 </xsl:attribute>
                                 <xsl:value-of select="$observationResponseSchemaLocation" />
                              </parsers:schema>
                           </parsers:schemas>
                        </parsers:XMLValidatingParser>
                     </parsers:SOAPParser>
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$observationResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$observationResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$test0501 eq 'true'">
                  <ctl:message select="'******************** 05.01.RequestNoService ********************'" />
                  <ctl:call-test name="sos:GORequestNoService_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0502 eq 'true'">
                  <ctl:message select="'******************** 05.02.RequestNullService ********************'" />
                  <ctl:call-test name="sos:GORequestNullService_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0503 eq 'true'">
                  <ctl:message select="'******************** 05.03.RequestInvalidService ********************'" />
                  <ctl:call-test name="sos:GORequestInvalidService_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0504 eq 'true'">
                  <ctl:message select="'******************** 05.04.RequestNoVersion ********************'" />
                  <ctl:call-test name="sos:GORequestNoVersion_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0505 eq 'true'">
                  <ctl:message select="'******************** 05.05.RequestNullVersion ********************'" />
                  <ctl:call-test name="sos:GORequestNullVersion_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0506 eq 'true'">
                  <ctl:message select="'******************** 05.06.RequestInvalidVersion ********************'" />
                  <ctl:call-test name="sos:GORequestInvalidVersion_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0507 eq 'true'">
                  <ctl:message select="'******************** 05.07.RequestNullOffering ********************'" />
                  <ctl:call-test name="sos:GORequestNullOffering_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0508 eq 'true'">
                  <ctl:message select="'******************** 05.08.RequestInvalidOffering ********************'" />
                  <ctl:call-test name="sos:GORequestInvalidOffering_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0509 eq 'true'">
                  <ctl:message select="'******************** 05.09.RequestNullObservedProperty ********************'" />
                  <ctl:call-test name="sos:GORequestNullObservedProperty_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0510 eq 'true'">
                  <ctl:message select="'******************** 05.10.RequestInvalidObservedProperty ********************'" />
                  <ctl:call-test name="sos:GORequestInvalidObservedProperty_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0511 eq 'true'">
                  <ctl:message select="'******************** 05.11.RequestNullProcedure ********************'" />
                  <ctl:call-test name="sos:GORequestNullProcedure_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0512 eq 'true'">
                  <ctl:message select="'******************** 05.12.RequestInvalidProcedure ********************'" />
                  <ctl:call-test name="sos:GORequestInvalidProcedure_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0513 eq 'true'">
                  <ctl:message select="'******************** 05.13.RequestNullFeatureOfInterest ********************'" />
                  <ctl:call-test name="sos:GORequestNullFeatureOfInterest_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0514 eq 'true'">
                  <ctl:message select="'******************** 05.14.RequestInvalidFeatureOfInterest ********************'" />
                  <ctl:call-test name="sos:GORequestInvalidFeatureOfInterest_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0515 eq 'true'">
                  <ctl:message select="'******************** 05.15.RequestNullResponseFormat ********************'" />
                  <ctl:call-test name="sos:GORequestNullResponseFormat_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0516 eq 'true'">
                  <ctl:message select="'******************** 05.16.RequestInvalidResponseFormat ********************'" />
                  <ctl:call-test name="sos:GORequestInvalidResponseFormat_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0517 eq 'true'">
                  <ctl:message select="'******************** 05.17.RequestNoResponseFormat ********************'" />
                  <ctl:call-test name="sos:GORequestNoResponseFormat_core">
                     <ctl:with-param name="getObservationResponse" select="$getObservationResponse" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0518 eq 'true'">
                  <ctl:message select="'******************** 05.18.RequestOtherResponseFormat ********************'" />
                  <ctl:call-test name="sos:GORequestOtherResponseFormat_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0519 eq 'true'">
                  <ctl:message select="'******************** 05.19.RequestEmptyObservation ********************'" />
                  <ctl:call-test name="sos:GORequestEmptyObservation_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0520 eq 'true'">
                  <ctl:message select="'******************** 05.20.RequestResponseExceedsSizeLimit ********************'" />
                  <ctl:call-test name="sos:GORequestResponseExceedsSizeLimit_core">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
                     <ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
                     <ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observableProperty" select="$observableProperty" />
                  </ctl:call-test>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0501 Send GetObservation request without parameter service by KVP,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
   <!-- 0501 Send GetObservation request without parameter service by POST or SOAP,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0".. -->
   <ctl:test name="sos:GORequestNoService_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with no service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                              <ctl:with-param name="locatorToCheck" select="string('service')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
                              <ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no service parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
                           <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no service parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0".</ctl:message>
                           <ctl:fail />
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0502 Send GetObservation request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
   <ctl:test name="sos:GORequestNullService_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service" />
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('service')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null service parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0503 Send GetObservation request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
   <ctl:test name="sos:GORequestInvalidService_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">ASDF</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="ASDF" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="ASDF" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('service')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid service parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0504 Send GetObservation request (KVP) without parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
   <!-- 0504 Send GetObservation request (POST or SOAP) without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0".. -->
   <ctl:test name="sos:GORequestNoVersion_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request without parameter "version",and the response (KVP) must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request without parameter "version",and the response (Post or SOAP) must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0".</ctl:assertion>
      <ctl:comment>Pass if (KVP) the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if (POST or SOAP) the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with no version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                              <ctl:with-param name="locatorToCheck" select="string('version')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
                              <ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no version parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
                           <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no version parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0".</ctl:message>
                           <ctl:fail />
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0505 Send GetObservation request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
   <ctl:test name="sos:GORequestNullVersion_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version" />
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('version')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null version parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0506 Send GetObservation request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
   <ctl:test name="sos:GORequestInvalidVersion_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">999</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="999" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="999" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('version')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid version parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0507 Send GetObservation request with null Element offering ,the response must be a valid exception with code "MissingParameterValue" and locator "offering".. -->
   <ctl:test name="sos:GORequestNullOffering_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with null parameter "offering",and the response must be a valid exception with code "MissingParameterValue" and locator "offering".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering" />
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering />
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering />
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid offering parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('offering')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null offering parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "offering".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0508 Send GetObservation request with invalid Element offering ,the response must be a valid exception with code "InvalidParameterValue" and locator "offering".. -->
   <ctl:test name="sos:GORequestInvalidOffering_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with invalid parameter "offering",and the response must be a valid exception with code "InvalidParameterValue" and locator "offering".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="current-dateTime()" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid offering parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('offering')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid offering parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "offering".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0509 Send GetObservation request with null Element observedProperty ,the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty".. -->
   <ctl:test name="sos:GORequestNullObservedProperty_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with null parameter "observedProperty",and the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty" />
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty />
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty />
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid observedProperty parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null observedProperty parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observedProperty".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0510 Send GetObservation request with invalid Element observedProperty ,the response must be a valid exception with code "InvalidParameterValue" and locator "observedProperty".. -->
   <ctl:test name="sos:GORequestInvalidObservedProperty_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with invalid parameter "observableProperty",and the response must be a valid exception with code "InvalidParameterValue" and locator "observableProperty".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observableProperty"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="current-dateTime()" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid observedProperty parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid observedProperty parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observedProperty".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0511 Send GetObservation request with null Element procedure ,the response must be a valid exception with code "MissingParameterValue" and locator "procedure".. -->
   <ctl:test name="sos:GORequestNullProcedure_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with null parameter "procedure",and the response must be a valid exception with code "MissingParameterValue" and locator "procedure".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure" />
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure />
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure />
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid procedure parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('procedure')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null procedure parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedure".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0512 Send GetObservation request with invalid Element procedure ,the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".. -->
   <ctl:test name="sos:GORequestInvalidProcedure_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="current-dateTime()" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid procedure parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('procedure')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid procedure parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedure".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0513 Send GetObservation request with null Element featureOfInterest ,the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest".. -->
   <ctl:test name="sos:GORequestNullFeatureOfInterest_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with null parameter "featureOfInterest",and the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:param name="featureOfInterest" />
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <sos:featureOfInterest />
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <sos:featureOfInterest />
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid featureOfInterest parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null featureOfInterest parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "featureOfInterest".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0514 Send GetObservation request with invalid Element featureOfInterest ,the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest".. -->
   <ctl:test name="sos:GORequestInvalidFeatureOfInterest_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with invalid parameter "featureOfInterest",and the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:param name="featureOfInterest">
                        <xsl:value-of select="current-dateTime()" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <sos:featureOfInterest>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:featureOfInterest>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <sos:featureOfInterest>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:featureOfInterest>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid featureOfInterest parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid featureOfInterest parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "featureOfInterest".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0515 Send GetObservation request with null Element responseFormat ,the response must be a valid exception with code "MissingParameterValue" and locator "responseFormat".. -->
   <ctl:test name="sos:GORequestNullResponseFormat_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with null parameter "responseFormat",and the response must be a valid exception with code "MissingParameterValue" and locator "responseFormat".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "responseFormat"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:param name="responseFormat" />
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <sos:responseFormat />
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <sos:responseFormat />
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid responseFormat parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('responseFormat')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null responseFormat parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "responseFormat".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0516 Send GetObservation request with invalid Element responseFormat ,the response must be a valid exception with code "InvalidParameterValue" and locator "responseFormat".. -->
   <ctl:test name="sos:GORequestInvalidResponseFormat_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with invalid parameter "responseFormat",and the response must be a valid exception with code "InvalidParameterValue" and locator "responseFormat".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "responseFormat"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:param name="responseFormat">
                        <xsl:value-of select="current-dateTime()" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <sos:responseFormat>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:responseFormat>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <sos:responseFormat>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:responseFormat>
                        </sos:GetObservation>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($getObservationResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$getObservationResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetObservation request with invalid responseFormat parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('responseFormat')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid responseFormat parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "responseFormat".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0517 Send GetObservation request without Element responseFormat ,the response must be a valid GetObservationResponse which format is O&M 2.0 -->
   <ctl:test name="sos:GORequestNoResponseFormat_core">
      <ctl:param name="getObservationResponse" />
      <ctl:assertion>Check the response format of GetObservation which request without responseFormat parameter is 'OM 2.0'.</ctl:assertion>
      <ctl:comment>For The GetObservation request without parameter responseFormat ,the response must be a valid GetObservationResponse which format is "OM 2.0"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- to the properties inherited from SWES ExtensibleResponse, the SOS GetObservationResponse shall include the properties observationData. -->
         <xsl:for-each select="$getObservationResponse/*">
            <xsl:variable name="sonElement" select="local-name-from-QName(node-name(.))" />
            <xsl:choose>
               <xsl:when test="not($sonElement=string('observationData'))">
                  <ctl:message>
                     The son element "
                     <xsl:value-of select="$sonElement" />
                     " does not match the expected root element of "
                     <xsl:value-of select="string('observationData')" />
                     "
                  </ctl:message>
                  <ctl:fail />
               </xsl:when>
               <xsl:otherwise>
                  <ctl:message>PASS</ctl:message>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <!-- 0518* Send GetObservation request for each format in content of Capabilities,check each response match specified format -->
   <ctl:test name="sos:GORequestOtherResponseFormat_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send a request with valid parameter responseFormat = "http%3A%2F%2Fwww.opengis.net%2Fom%2F2.0",and the response must be a valid GetObservationResponse with responseFormat is OM 2.0.</ctl:assertion>
      <ctl:comment>Send GetObservation request for each format in content of Capabilities,check each response match specified format; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="targetResponseFormat" select="string('http%3A%2F%2Fwww.opengis.net%2Fom%2F2.0')" />
         <xsl:variable name="targetResponseFormatPost" select="string('http://www.opengis.net/om/2.0')" />
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <ctl:param name="responseFormat">
                        <xsl:value-of select="$targetResponseFormat" />
                     </ctl:param>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$observationResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$observationResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <sos:responseFormat>
                              <xsl:value-of select="$targetResponseFormatPost" />
                           </sos:responseFormat>
                        </sos:GetObservation>
                     </ctl:body>
                     <parsers:SOAPParser return="content">
                        <parsers:XMLValidatingParser>
                           <parsers:schemas>
                              <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                              <parsers:schema>
                                 <xsl:attribute name="type">
                                    <xsl:value-of select="$observationResponseSchemaType" />
                                 </xsl:attribute>
                                 <xsl:value-of select="$observationResponseSchemaLocation" />
                              </parsers:schema>
                           </parsers:schemas>
                        </parsers:XMLValidatingParser>
                     </parsers:SOAPParser>
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <sos:responseFormat>
                              <xsl:value-of select="$targetResponseFormatPost" />
                           </sos:responseFormat>
                        </sos:GetObservation>
                     </ctl:body>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$observationResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$observationResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <!-- 1.root is sos:GetObservationResponse -->
         <xsl:variable name="Root" select="local-name-from-QName(node-name($getObservationResponse/*[1]))" />
         <xsl:choose>
            <xsl:when test="not($Root=string('GetObservationResponse'))">
               <ctl:message>
                  The root element from the response to a GetObservation request "
                  <xsl:value-of select="$Root" />
                  " does not match the expected root element of "
                  <xsl:value-of select="string('GetObservationResponse')" />
                  "
               </ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <!-- 2.sonElement of root is sos:observationData -->
               <xsl:for-each select="$getObservationResponse/*[1]/*">
                  <xsl:variable name="sonElement" select="local-name-from-QName(node-name(.))" />
                  <xsl:choose>
                     <xsl:when test="not($sonElement=string('observationData'))">
                        <ctl:message>
                           The son element "
                           <xsl:value-of select="$sonElement" />
                           " does not match the expected root element of "
                           <xsl:value-of select="string('observationData')" />
                           "
                        </ctl:message>
                        <ctl:fail />
                     </xsl:when>
                     <xsl:otherwise>
                        <ctl:message>PASS</ctl:message>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:for-each>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0519 Send GetObservation request with stringent conditions,check the response is empty GetObservationResponse.-->
   <!-- Send valid GetObservation request with request parameters that
					do not match any observations to server and verify that the SOS
					responds with an empty GetObservation response. -->
   <ctl:test name="sos:GORequestEmptyObservation_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>Send valid GetObservation request with request parameters that
				do not match any observations to server and verify that the SOS
				responds with an empty GetObservation response.</ctl:assertion>
      <ctl:comment>Pass if the observation is empty; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="TemporalOperatorTEquals" select="count($getCapabilitiesResponse//sos:filterCapabilities//fes:TemporalOperator[@name='TEquals'])" />
         <xsl:variable name="getObservationResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetObservation</ctl:param>
                     <ctl:param name="procedure">
                        <xsl:value-of select="$procedure" />
                     </ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observableProperty" />
                     </ctl:param>
                     <xsl:if test="($TemporalOperatorTEquals&gt;0)">
                        <ctl:param name="temporalFilter">phenomenonTime,2020-01-01T01:00:00Z</ctl:param>
                     </xsl:if>
                     <xsl:if test="not($TemporalOperatorTEquals&gt;0)">
                        <ctl:param name="temporalFilter">phenomenonTime,2020-01-01T01:00:00Z/2020-01-01T01:00:01Z</ctl:param>
                     </xsl:if>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$observationResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$observationResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <xsl:if test="($TemporalOperatorTEquals&gt;0)">
                              <sos:temporalFilter>
                                 <fes:TEquals>
                                    <fes:ValueReference>phenomenonTime</fes:ValueReference>
                                    <gml:TimeInstant gml:id="startPosition">
                                       <gml:timePosition>2020-01-01T01:00:00.000Z</gml:timePosition>
                                    </gml:TimeInstant>
                                 </fes:TEquals>
                              </sos:temporalFilter>
                           </xsl:if>
                           <xsl:if test="not($TemporalOperatorTEquals&gt;0)">
                              <sos:temporalFilter>
                                 <fes:During>
                                    <fes:ValueReference>phenomenonTime</fes:ValueReference>
                                    <gml:TimePeriod gml:id="phenomenonTime">
                                       <gml:beginPosition>2020-01-01T01:00:00.000Z</gml:beginPosition>
                                       <gml:endPosition>2020-01-01T01:00:01.000Z</gml:endPosition>
                                    </gml:TimePeriod>
                                 </fes:During>
                              </sos:temporalFilter>
                           </xsl:if>
                        </sos:GetObservation>
                     </ctl:body>
                     <parsers:SOAPParser return="content">
                        <parsers:XMLValidatingParser>
                           <parsers:schemas>
                              <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                              <parsers:schema>
                                 <xsl:attribute name="type">
                                    <xsl:value-of select="$observationResponseSchemaType" />
                                 </xsl:attribute>
                                 <xsl:value-of select="$observationResponseSchemaLocation" />
                              </parsers:schema>
                           </parsers:schemas>
                        </parsers:XMLValidatingParser>
                     </parsers:SOAPParser>
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:procedure>
                              <xsl:value-of select="$procedure" />
                           </sos:procedure>
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observableProperty" />
                           </sos:observedProperty>
                           <xsl:if test="($TemporalOperatorTEquals&gt;0)">
                              <sos:temporalFilter>
                                 <fes:TEquals>
                                    <fes:ValueReference>phenomenonTime</fes:ValueReference>
                                    <gml:TimeInstant gml:id="startPosition">
                                       <gml:timePosition>2020-01-01T01:00:00.000Z</gml:timePosition>
                                    </gml:TimeInstant>
                                 </fes:TEquals>
                              </sos:temporalFilter>
                           </xsl:if>
                           <xsl:if test="not($TemporalOperatorTEquals&gt;0)">
                              <sos:temporalFilter>
                                 <fes:During>
                                    <fes:ValueReference>phenomenonTime</fes:ValueReference>
                                    <gml:TimePeriod gml:id="phenomenonTime">
                                       <gml:beginPosition>2020-01-01T01:00:00.000Z</gml:beginPosition>
                                       <gml:endPosition>2020-01-01T01:00:01.000Z</gml:endPosition>
                                    </gml:TimePeriod>
                                 </fes:During>
                              </sos:temporalFilter>
                           </xsl:if>
                        </sos:GetObservation>
                     </ctl:body>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema type="url">http://schemas.opengis.net/samplingSpatial/2.0/spatialSamplingFeature.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$observationResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$observationResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <!-- 1.root is sos:GetObservationResponse -->
         <xsl:variable name="Root" select="local-name-from-QName(node-name($getObservationResponse/*[1]))" />
         <xsl:choose>
            <xsl:when test="not($Root=string('GetObservationResponse'))">
               <ctl:message>
                  The root element from the response to a GetObservation request "
                  <xsl:value-of select="$Root" />
                  " does not match the expected root element of "
                  <xsl:value-of select="string('GetObservationResponse')" />
                  "
               </ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <!-- 2.sonElement of root is empty -->
               <xsl:choose>
                  <xsl:when test="not($getObservationResponse/*[1]/*)">
                     <ctl:message>PASS</ctl:message>
                  </xsl:when>
                  <xsl:otherwise>
                     <ctl:message>The son element of root must be empty</ctl:message>
                     <ctl:fail />
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0520 Send GetObservation request with no optional parameters, check if the response is valid response or exception response with code "ResponseExceedsSizeLimit" and omit locator. -->
   <ctl:test name="sos:GORequestResponseExceedsSizeLimit_core">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="observationRootElementName" />
      <ctl:param name="observationResponseSchemaLocation" />
      <ctl:param name="observationResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:param name="offering" />
      <ctl:param name="observableProperty" />
      <ctl:assertion>If there are to many observations in the response,the server can return an exception response with ExceptionCode = "ResponseExceedsSizeLimit" and no locator.</ctl:assertion>
      <ctl:comment>Send GetObservation request for each format in content of Capabilities,check each response match specified format; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:if test="$isSOAP=string('true')">
            <ctl:message select="'This validation was ignored due to the SoapParser of teamengine has an issue, so passed.'" />
         </xsl:if>
         <xsl:if test="not($isSOAP=string('true'))">
            <xsl:variable name="getObservationResponse">
               <xsl:choose>
                  <xsl:when test="$isGET eq 'true'">
                     <ctl:request>
                        <ctl:url>
                           <xsl:value-of select="$serviceURL" />
                        </ctl:url>
                        <ctl:method>get</ctl:method>
                        <ctl:param name="service">SOS</ctl:param>
                        <ctl:param name="version">2.0.0</ctl:param>
                        <ctl:param name="request">GetObservation</ctl:param>
                        <ctl:call-function name="sosFunctions:validateGetObservationResponse" />
                     </ctl:request>
                  </xsl:when>
                  <xsl:when test="$isSOAP eq 'true'">
                     <ctl:soap-request version="1.2" charset="UTF-8">
                        <ctl:url>
                           <xsl:value-of select="$serviceURL" />
                        </ctl:url>
                        <ctl:body>
                           <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd             http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" />
                        </ctl:body>
                        <ctl:call-function name="sosFunctions:validateGetObservationResponseSOAP" />
                     </ctl:soap-request>
                  </xsl:when>
                  <xsl:otherwise>
                     <ctl:request>
                        <ctl:url>
                           <xsl:value-of select="$serviceURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                           <sos:GetObservation service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd             http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" />
                        </ctl:body>
                        <ctl:call-function name="sosFunctions:validateGetObservationResponse" />
                     </ctl:request>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:variable>
            <xsl:choose>
               <xsl:when test="not($getObservationResponse/*)">
                  <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" /&gt;.</ctl:message>
                  <ctl:fail />
               </xsl:when>
               <xsl:otherwise>
                  <xsl:variable name="Root" select="local-name-from-QName(node-name($getObservationResponse/*[1]))" />
                  <xsl:if test="$Root=string('ExceptionReport')">
                     <xsl:if test="$isSOAP=string('true')">
                        <ctl:message>
                           The response was:
                           <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" />
                        </ctl:message>
                     </xsl:if>
                     <xsl:if test="not($isSOAP=string('true'))">
                        <ctl:message>
                           The response was:
                           <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" />
                        </ctl:message>
                     </xsl:if>
                     <ctl:message>Checking the validity of the response to a GetObservation request with no parameter specified.</ctl:message>
                     <xsl:variable name="isCorrect">
                        <ctl:call-function name="sosFunctions:checkExceptionReport">
                           <ctl:with-param name="exceptionReport" select="$getObservationResponse" />
                           <ctl:with-param name="exceptionCodeToCheck" select="string('ResponseExceedsSizeLimit')" />
                           <ctl:with-param name="locatorToCheck" select="string('*')" />
                           <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                        </ctl:call-function>
                     </xsl:variable>
                     <ctl:message>
                        The validity check returned:
                        <xsl:value-of select="$isCorrect" />
                     </ctl:message>
                     <xsl:if test="not(xsd:boolean($isCorrect))">
                        <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no parameter specified.</ctl:message>
                        <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "ResponseExceedsSizeLimit" and omit locator.</ctl:message>
                        <ctl:fail />
                     </xsl:if>
                  </xsl:if>
                  <xsl:if test="not($Root=string('ExceptionReport'))">
                     <ctl:message>The response is not an Exception response,omit this test.</ctl:message>
                  </xsl:if>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:if>
      </ctl:code>
   </ctl:test>
</ctl:package>