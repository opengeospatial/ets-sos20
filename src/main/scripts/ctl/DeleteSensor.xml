<?xml version="1.0" encoding="UTF-8"?>
<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" xmlns:fes="http://www.opengis.net/fes/2.0" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:om="http://www.opengis.net/om/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:owsTests="http://www.opengis.net/ows/1.1" xmlns:parsers="http://www.occamlab.com/te/parsers" xmlns:sml="http://www.opengis.net/sensorML/1.0.1" xmlns:soap11="http://schemas.xmlsoap.org/soap/" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:sosFunctions="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<!-- 09.SOS Transactional: DeleteSensor -->
   <ctl:test name="sos:DeleteSensor-Test" isConformanceClass="true">
      <ctl:param name="GetCapabilitiesURL" />
      <ctl:param name="isGetCapabilitiesGET" />
      <ctl:param name="capabilitiesResponseSchemaType" />
      <ctl:param name="capabilitiesResponseSchemaLocation" />
      <ctl:param name="serviceURL" />
      <ctl:param name="hasDeS" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="DeleteSensorRootElementName" />
      <ctl:param name="DeleteSensorResponseSchemaLocation" />
      <ctl:param name="DeleteSensorResponseSchemaType" />
      <ctl:param name="DeleteSensorResponseContentType" />
      <ctl:param name="exceptionReportSchemaLocation" />
      <ctl:param name="exceptionReportSchemaType" />
      <ctl:param name="test0901" />
      <ctl:param name="test0902" />
      <ctl:param name="test0903" />
      <ctl:param name="test0904" />
      <ctl:param name="test0905" />
      <ctl:param name="test0906" />
      <ctl:param name="test0907" />
      <ctl:param name="test0908" />
      <ctl:param name="test0909" />
      <ctl:assertion>Execute DeleteSensor Test.</ctl:assertion>
      <ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
      <ctl:code>
         <xsl:choose>
            <xsl:when test="$hasDeS eq 'false'">
               <ctl:message>The server does not support the operation "DeleteSensor", so skip this test.</ctl:message>
            </xsl:when>
            <xsl:otherwise>
               <!--讓使用者選一個procedure -->
               <xsl:variable name="form-values">
                  <ctl:form height="750" width="1024">
                     <body>
                        <h2>DeleteSensor</h2>
                        <p>Please select which procedure will be deleted.</p>
                        <blockquote>
                           <table border="1" padding="4" bgcolor="#00ffff" align="center">
                              <tr>
                                 <td>
                                    <select name="sensorIDDropDown">
                                       <xsl:for-each select="$getCapabilitiesResponse//swes:procedure">
                                          <xsl:variable name="sensorID" select="." />
                                          <option>
                                             <xsl:attribute name="value">
                                                <xsl:value-of select="$sensorID" />
                                             </xsl:attribute>
                                             <xsl:value-of select="$sensorID" />
                                          </option>
                                       </xsl:for-each>
                                    </select>
                                 </td>
                              </tr>
                           </table>
                        </blockquote>
                        <div align="center">
                           <input type="submit" value="Start" />
                        </div>
                     </body>
                  </ctl:form>
               </xsl:variable>
               <xsl:variable name="procedure" select="$form-values/values/value[@key='sensorIDDropDown']" />
               <xsl:if test="$test0901 eq 'true'">
                  <ctl:message select="'******************** 09.01.RequestNoService ********************'" />
                  <ctl:call-test name="sos:DeSRequestNoService_sensorDeletion">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
                     <ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
                     <ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0902 eq 'true'">
                  <ctl:message select="'******************** 09.02.RequestNullService ********************'" />
                  <ctl:call-test name="sos:DeSRequestNullService_sensorDeletion">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
                     <ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
                     <ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0903 eq 'true'">
                  <ctl:message select="'******************** 09.03.RequestInvalidService ********************'" />
                  <ctl:call-test name="sos:DeSRequestInvalidService_sensorDeletion">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
                     <ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
                     <ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0904 eq 'true'">
                  <ctl:message select="'******************** 09.04.RequestNoVersion ********************'" />
                  <ctl:call-test name="sos:DeSRequestNoVersion_sensorDeletion">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
                     <ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
                     <ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0905 eq 'true'">
                  <ctl:message select="'******************** 09.05.RequestNullVersion ********************'" />
                  <ctl:call-test name="sos:DeSRequestNullVersion_sensorDeletion">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
                     <ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
                     <ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0906 eq 'true'">
                  <ctl:message select="'******************** 09.06.RequestInvalidVersion ********************'" />
                  <ctl:call-test name="sos:DeSRequestInvalidVersion_sensorDeletion">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
                     <ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
                     <ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0907 eq 'true'">
                  <ctl:message select="'******************** 09.07.RequestNullProcedure ********************'" />
                  <ctl:call-test name="sos:DeSRequestNullProcedure_sensorDeletion">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
                     <ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
                     <ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0908 eq 'true'">
                  <ctl:message select="'******************** 09.08.RequestInvalidProcedure ********************'" />
                  <ctl:call-test name="sos:DeSRequestInvalidProcedure_sensorDeletion">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
                     <ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
                     <ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test0909 eq 'true'">
                  <ctl:message select="'******************** 09.09.RequestValidRequest ********************'" />
                  <ctl:call-test name="sos:DeSRequestValidRequest_sensorDeletion">
                     <ctl:with-param name="GetCapabilitiesURL" select="$GetCapabilitiesURL" />
                     <ctl:with-param name="isGetCapabilitiesGET" select="$isGetCapabilitiesGET" />
                     <ctl:with-param name="capabilitiesResponseSchemaType" select="$capabilitiesResponseSchemaType" />
                     <ctl:with-param name="capabilitiesResponseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
                     <ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
                     <ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
                     <ctl:with-param name="procedure" select="$procedure" />
                  </ctl:call-test>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0901 Send DeleteSensor request without parameter service (KVP) ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
   <!-- 0901 Send DeleteSensor request without parameter service (POST or SOAP),the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element DeleteSensor@http://www.opengis.net/swes/2.0".. -->
   <ctl:test name="sos:DeSRequestNoService_sensorDeletion">
      <ctl:param name="serviceURL" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="DeleteSensorRootElementName" />
      <ctl:param name="DeleteSensorResponseSchemaLocation" />
      <ctl:param name="DeleteSensorResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:assertion>Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element DeleteSensor@http://www.opengis.net/swes/2.0".</ctl:assertion>
      <ctl:comment>Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element DeleteSensor@http://www.opengis.net/swes/2.0"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="DeleteSensorResponse">
            <xsl:choose>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <swes:DeleteSensor version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <swes:DeleteSensor version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($DeleteSensorResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$DeleteSensorResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a DeleteSensor request with no service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
                        <ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element DeleteSensor@http://www.opengis.net/swes/2.0')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with no service parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element DeleteSensor@http://www.opengis.net/swes/2.0".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0902 Send DeleteSensor request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
   <ctl:test name="sos:DeSRequestNullService_sensorDeletion">
      <ctl:param name="serviceURL" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="DeleteSensorRootElementName" />
      <ctl:param name="DeleteSensorResponseSchemaLocation" />
      <ctl:param name="DeleteSensorResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="DeleteSensorResponse">
            <xsl:choose>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <swes:DeleteSensor service="" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <swes:DeleteSensor service="" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($DeleteSensorResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$DeleteSensorResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a DeleteSensor request with invalid service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('service')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with null service parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0903 Send DeleteSensor request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
   <ctl:test name="sos:DeSRequestInvalidService_sensorDeletion">
      <ctl:param name="serviceURL" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="DeleteSensorRootElementName" />
      <ctl:param name="DeleteSensorResponseSchemaLocation" />
      <ctl:param name="DeleteSensorResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="DeleteSensorResponse">
            <xsl:choose>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <swes:DeleteSensor service="ASDF" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <swes:DeleteSensor service="ASDF" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($DeleteSensorResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$DeleteSensorResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a DeleteSensor request with invalid service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('service')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with invalid service parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0904 Send DeleteSensor request without parameter version (KVP),the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
   <!-- 0904 Send DeleteSensor request without parameter version (POST or SOAP),the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element DeleteSensor@http://www.opengis.net/swes/2.0".. -->
   <ctl:test name="sos:DeSRequestNoVersion_sensorDeletion">
      <ctl:param name="serviceURL" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="DeleteSensorRootElementName" />
      <ctl:param name="DeleteSensorResponseSchemaLocation" />
      <ctl:param name="DeleteSensorResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:assertion>Send a request (KVP) without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request (POST or SOAP) without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element DeleteSensor@http://www.opengis.net/swes/2.0".</ctl:assertion>
      <ctl:comment>Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element DeleteSensor@http://www.opengis.net/swes/2.0"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="DeleteSensorResponse">
            <xsl:choose>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($DeleteSensorResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$DeleteSensorResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a DeleteSensor request with no version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
                        <ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element DeleteSensor@http://www.opengis.net/swes/2.0')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with no version parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element DeleteSensor@http://www.opengis.net/swes/2.0".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0905 Send DeleteSensor request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
   <ctl:test name="sos:DeSRequestNullVersion_sensorDeletion">
      <ctl:param name="serviceURL" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="DeleteSensorRootElementName" />
      <ctl:param name="DeleteSensorResponseSchemaLocation" />
      <ctl:param name="DeleteSensorResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="DeleteSensorResponse">
            <xsl:choose>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" version="" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" version="" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($DeleteSensorResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$DeleteSensorResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a DeleteSensor request with invalid version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('version')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with null version parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0906 Send DeleteSensor request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
   <ctl:test name="sos:DeSRequestInvalidVersion_sensorDeletion">
      <ctl:param name="serviceURL" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="DeleteSensorRootElementName" />
      <ctl:param name="DeleteSensorResponseSchemaLocation" />
      <ctl:param name="DeleteSensorResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="DeleteSensorResponse">
            <xsl:choose>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" version="999" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" version="999" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($DeleteSensorResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$DeleteSensorResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a DeleteSensor request with invalid version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('version')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with invalid version parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0907 Send DeleteSensor request with null Element procedure ,the response must be a valid exception with code "MissingParameterValue" and locator "procedure".. -->
   <ctl:test name="sos:DeSRequestNullProcedure_sensorDeletion">
      <ctl:param name="serviceURL" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="DeleteSensorRootElementName" />
      <ctl:param name="DeleteSensorResponseSchemaLocation" />
      <ctl:param name="DeleteSensorResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:assertion>Send a request with null parameter "procedure",and the response must be a valid exception with code "MissingParameterValue" and locator "procedure".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="DeleteSensorResponse">
            <xsl:choose>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure />
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure />
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($DeleteSensorResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$DeleteSensorResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a DeleteSensor request with invalid procedure parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('procedure')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with null procedure parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedure".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0908 Send DeleteSensor request with invalid Element procedure ,the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".. -->
   <ctl:test name="sos:DeSRequestInvalidProcedure_sensorDeletion">
      <ctl:param name="serviceURL" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="DeleteSensorRootElementName" />
      <ctl:param name="DeleteSensorResponseSchemaLocation" />
      <ctl:param name="DeleteSensorResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="DeleteSensorResponse">
            <xsl:choose>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="current-dateTime()" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="current-dateTime()" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($DeleteSensorResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$DeleteSensorResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a DeleteSensor request with invalid procedure parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('procedure')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with invalid procedure parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedure".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 0909 Send valid DeleteSensor request, the response must be a valid DeleteSensorResponse. -->
   <ctl:test name="sos:DeSRequestValidRequest_sensorDeletion">
      <ctl:param name="GetCapabilitiesURL" />
      <ctl:param name="isGetCapabilitiesGET" />
      <ctl:param name="capabilitiesResponseSchemaType" />
      <ctl:param name="capabilitiesResponseSchemaLocation" />
      <ctl:param name="serviceURL" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="DeleteSensorRootElementName" />
      <ctl:param name="DeleteSensorResponseSchemaLocation" />
      <ctl:param name="DeleteSensorResponseSchemaType" />
      <ctl:param name="procedure" />
      <ctl:assertion>Send a valid request ,and there must be have a valid DeleteSensorResponse returned.</ctl:assertion>
      <ctl:comment>Pass if the observation listed in DeleteSensorResponse are same to DeleteSensor request; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="DeleteSensorResponse">
            <xsl:choose>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <parsers:SOAPParser return="content">
                        <parsers:XMLValidatingParser>
                           <parsers:schemas>
                              <parsers:schema>
                                 <xsl:attribute name="type">
                                    <xsl:value-of select="$DeleteSensorResponseSchemaType" />
                                 </xsl:attribute>
                                 <xsl:value-of select="$DeleteSensorResponseSchemaLocation" />
                              </parsers:schema>
                           </parsers:schemas>
                        </parsers:XMLValidatingParser>
                     </parsers:SOAPParser>
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <swes:DeleteSensor service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <swes:procedure>
                              <xsl:value-of select="$procedure" />
                           </swes:procedure>
                        </swes:DeleteSensor>
                     </ctl:body>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$DeleteSensorResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$DeleteSensorResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($DeleteSensorResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$DeleteSensorResponse/*">
                  <xsl:variable name="responseRoot" select="local-name-from-QName(node-name($DeleteSensorResponse/*[1]))" />
                  <xsl:if test="not($responseRoot=$DeleteSensorRootElementName)">
                     <ctl:message>
                        FAILURE:  The root element from the response to a DeleteSensor request "
                        <xsl:value-of select="$responseRoot" />
                        " does not match the expected root element of "
                        <xsl:value-of select="$DeleteSensorRootElementName" />
                        "
                     </ctl:message>
                     <ctl:fail />
                  </xsl:if>
                  <!-- 1.response has one and only one deletedProcedure -->
                  <xsl:variable name="deletedProcedureCount" select="count($DeleteSensorResponse//swes:deletedProcedure)" />
                  <xsl:if test="not($deletedProcedureCount=1)">
                     <ctl:message>
                        FAILURE:  The count of swes:deletedProcedure element "
                        <xsl:value-of select="$deletedProcedureCount" />
                        " must be 1.
                     </ctl:message>
                     <ctl:fail />
                  </xsl:if>
                  <!-- 2.Capabilities cannot have the procedure which deleted by request.-->
                  <xsl:variable name="getCapabilitiesResponse2">
                     <xsl:choose>
                        <xsl:when test="$isSOAP eq 'true'">
                           <ctl:soap-request version="1.2" charset="UTF-8">
                              <ctl:url>
                                 <xsl:value-of select="$GetCapabilitiesURL" />
                              </ctl:url>
                              <ctl:body>
                                 <sos:GetCapabilities xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd               http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" />
                              </ctl:body>
                              <parsers:SOAPParser return="content">
                                 <parsers:XMLValidatingParser>
                                    <parsers:schemas>
                                       <parsers:schema>
                                          <xsl:attribute name="type">
                                             <xsl:value-of select="$capabilitiesResponseSchemaType" />
                                          </xsl:attribute>
                                          <xsl:value-of select="$capabilitiesResponseSchemaLocation" />
                                       </parsers:schema>
                                    </parsers:schemas>
                                 </parsers:XMLValidatingParser>
                              </parsers:SOAPParser>
                           </ctl:soap-request>
                        </xsl:when>
                        <xsl:when test="($isGetCapabilitiesGET)">
                           <ctl:request>
                              <ctl:url>
                                 <xsl:value-of select="$GetCapabilitiesURL" />
                              </ctl:url>
                              <ctl:method>get</ctl:method>
                              <ctl:param name="request">GetCapabilities</ctl:param>
                              <parsers:XMLValidatingParser>
                                 <parsers:schemas>
                                    <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                                    <parsers:schema>
                                       <xsl:attribute name="type">
                                          <xsl:value-of select="$capabilitiesResponseSchemaType" />
                                       </xsl:attribute>
                                       <xsl:value-of select="$capabilitiesResponseSchemaLocation" />
                                    </parsers:schema>
                                 </parsers:schemas>
                              </parsers:XMLValidatingParser>
                           </ctl:request>
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:request>
                              <ctl:url>
                                 <xsl:value-of select="$GetCapabilitiesURL" />
                              </ctl:url>
                              <ctl:method>post</ctl:method>
                              <ctl:body>
                                 <sos:GetCapabilities xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd               http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" />
                              </ctl:body>
                              <parsers:XMLValidatingParser>
                                 <parsers:schemas>
                                    <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                                    <parsers:schema>
                                       <xsl:attribute name="type">
                                          <xsl:value-of select="$capabilitiesResponseSchemaType" />
                                       </xsl:attribute>
                                       <xsl:value-of select="$capabilitiesResponseSchemaLocation" />
                                    </parsers:schema>
                                 </parsers:schemas>
                              </parsers:XMLValidatingParser>
                           </ctl:request>
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                     <xsl:when test="not($getCapabilitiesResponse2/*)">
                        <ctl:message>FAILURE: Missing or invalid GetCapabilities response entity.</ctl:message>
                        <ctl:fail />
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:for-each select="$getCapabilitiesResponse2//swes:procedure">
                           <xsl:variable name="identifier" select="." />
                           <xsl:if test="$identifier eq $procedure">
                              <ctl:message>
                                 FAILURE: The deleted procedure "
                                 <xsl:value-of select="$identifier" />
                                 " should not be listed in the Capabilities.
                              </ctl:message>
                              <ctl:fail />
                           </xsl:if>
                        </xsl:for-each>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
</ctl:package>