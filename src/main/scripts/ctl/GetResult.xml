<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" xmlns:fes="http://www.opengis.net/fes/2.0" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:om="http://www.opengis.net/om/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:owsTests="http://www.opengis.net/ows/1.1" xmlns:parsers="http://www.occamlab.com/te/parsers" xmlns:sml="http://www.opengis.net/sensorML/1.0.1" xmlns:soap11="http://schemas.xmlsoap.org/soap/" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:sosFunctions="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<!-- 14.SOS resultRetrieval: GetResult -->
   <ctl:test name="sos:GetResult-Test" isConformanceClass="true">
      <ctl:param name="serviceURL" />
      <ctl:param name="hasGR" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="isInteractive" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="GetResultResponseContentType" />
      <ctl:param name="exceptionReportSchemaLocation" />
      <ctl:param name="exceptionReportSchemaType" />
      <ctl:param name="test1401" />
      <ctl:param name="test1402" />
      <ctl:param name="test1403" />
      <ctl:param name="test1404" />
      <ctl:param name="test1405" />
      <ctl:param name="test1406" />
      <ctl:param name="test1407" />
      <ctl:param name="test1408" />
      <ctl:param name="test1409" />
      <ctl:param name="test1410" />
      <ctl:param name="test1411" />
      <ctl:param name="test1412" />
      <ctl:assertion>Execute GetResult Test.</ctl:assertion>
      <ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
      <ctl:code>
         <xsl:choose>
            <xsl:when test="$hasGR eq 'false'">
               <ctl:message>The server does not support the operation "GetResult", so skip this test.</ctl:message>
            </xsl:when>
            <xsl:otherwise>
               <!--讓使用者選一個 offering 和 observedProperty -->
				<xsl:variable name="form-values">
					<xsl:choose>
						<xsl:when test="$isInteractive eq 'true'">
							<ctl:form height="750" width="1024">
								<body>
									<h2>GetResult</h2>
									<p>Please select an offering.</p>
									<blockquote>
										<table border="1" padding="4" bgcolor="#00ffff" align="center">
											<tr>
												<td>
													<select name="offeringDropDown">
														<xsl:for-each
															select="$getCapabilitiesResponse//sos:contents//swes:offering//swes:identifier">
															<xsl:variable name="offering" select="." />
															<option>
																<xsl:attribute name="value">
			                                                <xsl:value-of
																	select="$offering" />
			                                             </xsl:attribute>
																<xsl:value-of select="$offering" />
															</option>
														</xsl:for-each>
													</select>
												</td>
											</tr>
										</table>
									</blockquote>
									<p>Please select an observedProperty.</p>
									<blockquote>
										<table border="1" padding="4" bgcolor="#00ffff" align="center">
											<tr>
												<td>
													<select name="observedPropertyDropDown">
														<xsl:for-each
															select="$getCapabilitiesResponse//sos:contents//swes:offering//swes:observableProperty">
															<xsl:variable name="observedProperty" select="." />
															<option>
																<xsl:attribute name="value">
			                                                <xsl:value-of
																	select="$observedProperty" />
			                                             </xsl:attribute>
																<xsl:value-of select="$observedProperty" />
															</option>
														</xsl:for-each>
													</select>
												</td>
											</tr>
										</table>
									</blockquote>
									<div align="center">
										<input type="submit" value="Start" />
									</div>
								</body>
							</ctl:form>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="data">
								<values>
									<value key="offeringDropDown"><xsl:value-of select="($getCapabilitiesResponse//sos:contents//swes:offering//swes:identifier)[1]/text()" /></value>
									<value key="observedPropertyDropDown"><xsl:value-of select="($getCapabilitiesResponse//sos:contents//swes:offering//swes:observableProperty)[1]/text()" /></value>
								</values>
							</xsl:variable>
							<xsl:value-of select="$data" />
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
               <!-- get a valid offering-->
               <xsl:variable name="offering" select="$form-values/values/value[@key='offeringDropDown']" />
               <ctl:message>
                  The offering was:
                  <xsl:value-of select="$offering" />
               </ctl:message>
               <!-- get a valid observableProperty-->
               <xsl:variable name="observedProperty" select="$form-values/values/value[@key='observedPropertyDropDown']" />
               <ctl:message>
                  The observedProperty was:
                  <xsl:value-of select="$observedProperty" />
               </ctl:message>
               <xsl:if test="$test1401 eq 'true'">
                  <ctl:message select="'******************** 09.01.RequestNoService ********************'" />
                  <ctl:call-test name="sos:GRRequestNoService_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test1402 eq 'true'">
                  <ctl:message select="'******************** 09.02.RequestNullService ********************'" />
                  <ctl:call-test name="sos:GRRequestNullService_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test1403 eq 'true'">
                  <ctl:message select="'******************** 09.03.RequestInvalidService ********************'" />
                  <ctl:call-test name="sos:GRRequestInvalidService_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test1404 eq 'true'">
                  <ctl:message select="'******************** 09.04.RequestNoVersion ********************'" />
                  <ctl:call-test name="sos:GRRequestNoVersion_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test1405 eq 'true'">
                  <ctl:message select="'******************** 09.05.RequestNullVersion ********************'" />
                  <ctl:call-test name="sos:GRRequestNullVersion_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test1406 eq 'true'">
                  <ctl:message select="'******************** 09.06.RequestInvalidVersion ********************'" />
                  <ctl:call-test name="sos:GRRequestInvalidVersion_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test1407 eq 'true'">
                  <ctl:message select="'******************** 09.07.RequestNulloffering ********************'" />
                  <ctl:call-test name="sos:GRRequestNulloffering_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test1408 eq 'true'">
                  <ctl:message select="'******************** 09.08.RequestInvalidoffering ********************'" />
                  <ctl:call-test name="sos:GRRequestInvalidoffering_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test1409 eq 'true'">
                  <ctl:message select="'******************** 09.09.RequestNullobservedProperty ********************'" />
                  <ctl:call-test name="sos:GRRequestNullobservedProperty_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test1410 eq 'true'">
                  <ctl:message select="'******************** 09.10.RequestInvalidobservedProperty ********************'" />
                  <ctl:call-test name="sos:GRRequestInvalidobservedProperty_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test1411 eq 'true'">
                  <ctl:message select="'******************** 09.11.RequestValidRequest ********************'" />
                  <ctl:call-test name="sos:GRRequestValidRequest_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
               <xsl:if test="$test1412 eq 'true'">
                  <ctl:message select="'******************** 09.12.RequestEmptyResponse ********************'" />
                  <ctl:call-test name="sos:GRRequestEmptyResponse_resultRetrieval">
                     <ctl:with-param name="serviceURL" select="$serviceURL" />
                     <ctl:with-param name="isGET" select="$isGET" />
                     <ctl:with-param name="isSOAP" select="$isSOAP" />
                     <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                     <ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
                     <ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
                     <ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
                     <ctl:with-param name="offering" select="$offering" />
                     <ctl:with-param name="observedProperty" select="$observedProperty" />
                  </ctl:call-test>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1401 Send GetResult request (KVP) without parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
   <!-- 1401 Send GetResult request (POST or SOAP) without parameter service ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetResult@http://www.opengis.net/sos/2.0".. -->
   <ctl:test name="sos:GRRequestNoService_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0".</ctl:assertion>
      <ctl:comment>Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observedProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetResultResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetResult request with no service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                              <ctl:with-param name="locatorToCheck" select="string('service')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
                              <ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetResult@http://www.opengis.net/sos/2.0')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with no service parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
                           <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with no service parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element GetResult@http://www.opengis.net/sos/2.0".</ctl:message>
                           <ctl:fail />
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1402 Send GetResult request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
   <ctl:test name="sos:GRRequestNullService_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service" />
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observedProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult service="" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult service="" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetResultResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetResult request with invalid service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('service')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with null service parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1403 Send GetResult request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
   <ctl:test name="sos:GRRequestInvalidService_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">ASDF</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observedProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult service="ASDF" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult service="ASDF" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetResultResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetResult request with invalid service parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('service')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with invalid service parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1404 Send GetResult request (KVP) without parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
   <!-- 1404 Send GetResult request (POST or SOAP) without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetResult@http://www.opengis.net/sos/2.0".. -->
   <ctl:test name="sos:GRRequestNoVersion_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a request (KVP) without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request (POST or SOAP) without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0".</ctl:assertion>
      <ctl:comment>Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element InsertResultTemplate@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observedProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult service="SOS" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult service="SOS" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetResultResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetResult request with no version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                              <ctl:with-param name="locatorToCheck" select="string('version')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:call-function name="sosFunctions:checkExceptionReport">
                              <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                              <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
                              <ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetResult@http://www.opengis.net/sos/2.0')" />
                              <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                           </ctl:call-function>
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <xsl:choose>
                        <xsl:when test="$isGET eq 'true'">
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with no version parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
                           <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                           <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with no version parameter specified.</ctl:message>
                           <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element GetResult@http://www.opengis.net/sos/2.0".</ctl:message>
                           <ctl:fail />
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1405 Send GetResult request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
   <ctl:test name="sos:GRRequestNullVersion_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version" />
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observedProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetResultResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetResult request with invalid version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('version')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with null version parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1406 Send GetResult request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
   <ctl:test name="sos:GRRequestInvalidVersion_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">999</ctl:param>
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observedProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="999" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="999" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetResultResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetResult request with invalid version parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('version')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with invalid version parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1407 Send GetResult request with null Element offering ,the response must be a valid exception with code "MissingParameterValue" and locator "offering".. -->
   <ctl:test name="sos:GRRequestNulloffering_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a request with null parameter "offering",and the response must be a valid exception with code "MissingParameterValue" and locator "offering".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering" />
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observedProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering />
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering />
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetResultResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetResult request with invalid offering parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('offering')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with null offering parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "offering".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1408 Send GetResult request with invalid Element offering ,the response must be a valid exception with code "InvalidParameterValue" and locator "offering".. -->
   <ctl:test name="sos:GRRequestInvalidoffering_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a request with invalid parameter "offering",and the response must be a valid exception with code "InvalidParameterValue" and locator "offering".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="current-dateTime()" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observedProperty" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetResultResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetResult request with invalid offering parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('offering')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with invalid offering parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "offering".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1409 Send GetResult request with null Element observedProperty ,the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty".. -->
   <ctl:test name="sos:GRRequestNullobservedProperty_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a request with null parameter "observedProperty",and the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <!-- send request -->
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty" />
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty />
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty />
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetResultResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetResult request with invalid observedProperty parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with null observedProperty parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observedProperty".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1410 Send GetResult request with invalid Element observedProperty ,the response must be a valid exception with code "InvalidParameterValue" and locator "observedProperty".. -->
   <ctl:test name="sos:GRRequestInvalidobservedProperty_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a request with invalid parameter "observedProperty",and the response must be a valid exception with code "InvalidParameterValue" and locator "observableProperty".</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="current-dateTime()" />
                     </ctl:param>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="current-dateTime()" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <ctl:call-function name="sosFunctions:validateExceptionReport" />
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetResultResponse/*">
                  <xsl:if test="$isSOAP=string('true')">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <xsl:if test="not($isSOAP=string('true'))">
                     <ctl:message>
                        The response was:
                        <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" />
                     </ctl:message>
                  </xsl:if>
                  <ctl:message>Checking the validity of the response to a GetResult request with invalid observedProperty parameter.</ctl:message>
                  <xsl:variable name="isCorrect">
                     <ctl:call-function name="sosFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$GetResultResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
                        <ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
                     </ctl:call-function>
                  </xsl:variable>
                  <ctl:message>
                     The validity check returned:
                     <xsl:value-of select="$isCorrect" />
                  </ctl:message>
                  <xsl:if test="not(xsd:boolean($isCorrect))">
                     <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with invalid observedProperty parameter specified.</ctl:message>
                     <ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observedProperty".</ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1411 Send valid GetResult request, the response must be a valid GetResultResponse. -->
   <ctl:test name="sos:GRRequestValidRequest_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a valid request ,and there must be have a valid GetResultResponse returned.</ctl:assertion>
      <ctl:comment>Pass if the observation listed in GetResultResponse are same to GetResult request; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observedProperty" />
                     </ctl:param>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$GetResultResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$GetResultResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <parsers:SOAPParser return="content">
                        <parsers:XMLValidatingParser>
                           <parsers:schemas>
                              <parsers:schema>
                                 <xsl:attribute name="type">
                                    <xsl:value-of select="$GetResultResponseSchemaType" />
                                 </xsl:attribute>
                                 <xsl:value-of select="$GetResultResponseSchemaLocation" />
                              </parsers:schema>
                           </parsers:schemas>
                        </parsers:XMLValidatingParser>
                     </parsers:SOAPParser>
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                        </sos:GetResult>
                     </ctl:body>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$GetResultResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$GetResultResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <!-- check the gml:identifier value is same to observation value in the request. -->
               <xsl:if test="$GetResultResponse/*">
                  <!-- check the root is "sos:GetResultResponse" and empty context.-->
                  <xsl:variable name="responseRoot" select="local-name-from-QName(node-name($GetResultResponse/*[1]))" />
                  <xsl:variable name="responseRoot2" select="local-name-from-QName(node-name($GetResultResponse/soap12:Envelope/soap12:Body/*[1]))" />
                  <xsl:if test="not($responseRoot=$GetResultRootElementName) and not($responseRoot2=$GetResultRootElementName)">
                     <ctl:message>
                        FAILURE:  The root element from the response to a GetResult request "
                        <xsl:value-of select="$responseRoot" />
                        " does not match the expected root element of "
                        <xsl:value-of select="$GetResultRootElementName" />
                        "
                     </ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!-- 1412 Send valid GetResult request with temporal filter from the year 40000, the response must be a valid GetResultResponse but empty. -->
   <ctl:test name="sos:GRRequestEmptyResponse_resultRetrieval">
      <ctl:param name="serviceURL" />
      <ctl:param name="isGET" />
      <ctl:param name="isSOAP" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="GetResultRootElementName" />
      <ctl:param name="GetResultResponseSchemaLocation" />
      <ctl:param name="GetResultResponseSchemaType" />
      <ctl:param name="offering" />
      <ctl:param name="observedProperty" />
      <ctl:assertion>Send a valid request ,and there must be have a valid GetResultResponse returned.</ctl:assertion>
      <ctl:comment>Pass if the response is empty; fail otherwise.</ctl:comment>
      <ctl:link title="" />
      <ctl:code>
         <ctl:message>Send a request to service with temporalFilter during 40000-01-10T10:00:00Z/40000-01-10T11:00:00Z</ctl:message>
         <xsl:variable name="GetResultResponse">
            <xsl:choose>
               <xsl:when test="$isGET eq 'true'">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="service">SOS</ctl:param>
                     <ctl:param name="version">2.0.0</ctl:param>
                     <ctl:param name="request">GetResult</ctl:param>
                     <ctl:param name="offering">
                        <xsl:value-of select="$offering" />
                     </ctl:param>
                     <ctl:param name="observedProperty">
                        <xsl:value-of select="$observedProperty" />
                     </ctl:param>
                     <ctl:param name="temporalFilter">
                        <xsl:value-of select="'phenomenonTime,40000-01-10T10:00:00Z/40000-01-10T11:00:00Z'" />
                     </ctl:param>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$GetResultResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$GetResultResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:when>
               <xsl:when test="$isSOAP eq 'true'">
                  <ctl:soap-request version="1.2" charset="UTF-8">
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                           <sos:temporalFilter>
                              <fes:During>
                                 <fes:ValueReference>phenomenonTime</fes:ValueReference>
                                 <gml:TimePeriod gml:id="TimePeriod">
                                    <gml:beginPosition>40000-01-10T10:00:00Z</gml:beginPosition>
                                    <gml:endPosition>40000-01-10T11:00:00Z</gml:endPosition>
                                 </gml:TimePeriod>
                              </fes:During>
                           </sos:temporalFilter>
                        </sos:GetResult>
                     </ctl:body>
                     <parsers:SOAPParser return="content">
                        <parsers:XMLValidatingParser>
                           <parsers:schemas>
                              <parsers:schema>
                                 <xsl:attribute name="type">
                                    <xsl:value-of select="$GetResultResponseSchemaType" />
                                 </xsl:attribute>
                                 <xsl:value-of select="$GetResultResponseSchemaLocation" />
                              </parsers:schema>
                           </parsers:schemas>
                        </parsers:XMLValidatingParser>
                     </parsers:SOAPParser>
                  </ctl:soap-request>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                     </ctl:url>
                     <ctl:method>post</ctl:method>
                     <ctl:body>
                        <sos:GetResult service="SOS" version="2.0.0" xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd            http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
                           <sos:offering>
                              <xsl:value-of select="$offering" />
                           </sos:offering>
                           <sos:observedProperty>
                              <xsl:value-of select="$observedProperty" />
                           </sos:observedProperty>
                           <sos:temporalFilter>
                              <fes:During>
                                 <fes:ValueReference>phenomenonTime</fes:ValueReference>
                                 <gml:TimePeriod gml:id="TimePeriod">
                                    <gml:beginPosition>40000-01-10T10:00:00Z</gml:beginPosition>
                                    <gml:endPosition>40000-01-10T11:00:00Z</gml:endPosition>
                                 </gml:TimePeriod>
                              </fes:During>
                           </sos:temporalFilter>
                        </sos:GetResult>
                     </ctl:body>
                     <parsers:XMLValidatingParser>
                        <parsers:schemas>
                           <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
                           <parsers:schema>
                              <xsl:attribute name="type">
                                 <xsl:value-of select="$GetResultResponseSchemaType" />
                              </xsl:attribute>
                              <xsl:value-of select="$GetResultResponseSchemaLocation" />
                           </parsers:schema>
                        </parsers:schemas>
                     </parsers:XMLValidatingParser>
                  </ctl:request>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not($GetResultResponse/*)">
               <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" /&gt;.</ctl:message>
               <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$GetResultResponse/*">
                  <!-- check the root is "sos:GetResultResponse" and empty context.-->
                  <xsl:variable name="responseRoot" select="local-name-from-QName(node-name($GetResultResponse/*[1]))" />
                  <xsl:variable name="responseRoot2" select="local-name-from-QName(node-name($GetResultResponse/soap12:Envelope/soap12:Body/*[1]))" />
                  <xsl:if test="not($responseRoot=$GetResultRootElementName) and not($responseRoot2=$GetResultRootElementName)">
                     <ctl:message>
                        FAILURE:  The root element from the response to a GetResult request "
                        <xsl:value-of select="$responseRoot" />
                        " does not match the expected root element of "
                        <xsl:value-of select="$GetResultRootElementName" />
                        "
                     </ctl:message>
                     <ctl:fail />
                  </xsl:if>
                  <!-- check the response is empty -->
                  <xsl:variable name="ifResponseIsEmpty" select="count($GetResultResponse//sos:GetResultResponse/*[1][text()]) = 0" />
                  <xsl:if test="not($ifResponseIsEmpty)">
                     <ctl:message>
                        FAILURE:  The response to a GetResult request "
                        <xsl:value-of select="$responseRoot" />
                        " is not empty.
                     </ctl:message>
                     <ctl:fail />
                  </xsl:if>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
</ctl:package>