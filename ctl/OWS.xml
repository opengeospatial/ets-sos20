<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
	xmlns:owsTests="http://www.opengis.net/ows/1.1"
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:fes="http://www.opengis.net/fes/2.0"
	xmlns:gml="http://www.opengis.net/gml/3.2" 
	xmlns:om="http://www.opengis.net/om/2.0"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:soap11="http://schemas.xmlsoap.org/soap/" 
	xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 	
	xmlns:sos="http://www.opengis.net/sos/2.0"	
	xmlns:swe="http://www.opengis.net/swe/2.0"	
	xmlns:swes="http://www.opengis.net/swes/2.0"	
	xmlns:wsa="http://www.w3.org/2005/08/addressing"	
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:owsFunctions="https://www.cite.opengeospatial.org/ows-1.0/functions">

	<!--The main test that should be called by your ETS in order to execute the OWS Common tests.-->
	<ctl:test name="owsTests:ows-main">
		<ctl:param name="serviceURL">The URL of the service being tested</ctl:param>
		<ctl:param name="isGET">Test From HTTP-GET or HTTP-POST</ctl:param>
		<ctl:param name="isSOAP">Test From HTTP-POST with SOAP-Binding</ctl:param>
		<ctl:param name="serviceType">The OGC identifier for the type of service being tested (i.e. sos)</ctl:param>
		<ctl:param name="serviceVersion">The version of the service being tested</ctl:param>
		<ctl:param name="capabilitiesRootElementName">The name of the root element of a Capabilities document returned by this service (i.e. Capabilities, WFS_Capabilities, etc.)</ctl:param>
		<ctl:param name="capabilitiesResponseSchemaLocation">The location of the Capabilities schema for the service being tested</ctl:param>
		<ctl:param name="capabilitiesResponseSchemaType">The type of resource specified in the capabilitiesResponseSchemaLocation above (i.e. url, file, resource).  Corresponds with the CTL XMLValidatingParser schema type attribute.</ctl:param>
		<ctl:param name="capabilitiesResponseContentType">The expected HTTP header content type of the GetCapabilities response (i.e. text/xml)</ctl:param>
		<ctl:param name="exceptionReportSchemaLocation">The location of the ExceptionReport schema for the version of OWS Common being tested</ctl:param>
		<ctl:param name="exceptionReportSchemaType">The type of resource specified in the exceptionReportSchemaLocation above (i.e. url, file, resource).  Corresponds with the CTL XMLValidatingParser schema type attribute.</ctl:param>
		<ctl:param name="test0101">OWS.ContentType.1</ctl:param>
		<ctl:param name="test0102">OWS.GetCapabilities-Exceptions.2</ctl:param>
		<ctl:param name="test0103">OWS.GetCapabilities-UpdateSequence.1</ctl:param>
		<ctl:param name="test0104">OWS.GetCapabilities-Exceptions.5</ctl:param>
		<ctl:param name="test0105">OWS.CaseInsensitiveKvpNames.1</ctl:param>
		<ctl:param name="test0106">OWS.GetCapabilities-AcceptVersions.1</ctl:param>
		<ctl:param name="test0107">OWS.GetCapabilities-AcceptVersions.2</ctl:param>
		<ctl:param name="test0108">OWS.GetCapabilities-AcceptVersions.3</ctl:param>
		<ctl:param name="test0109">OWS.GetCapabilities-Sections.1</ctl:param>
		<ctl:param name="test0110">OWS.GetCapabilities-Sections.2</ctl:param>
		<ctl:param name="test0111">OWS.GetCapabilities-AcceptFormats.1</ctl:param>
		<ctl:assertion>
      Run test group for GetCapabilities requests using the GET or THE POST method.The GET or POST method request must be supported (using HTTP-GET or HTTP-POST).
		</ctl:assertion>
		<ctl:comment>GetCapabilities by GET or POST.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root element matches the provided root element.</ctl:comment>
		<ctl:link>OWS.GetCapabilities</ctl:link>
		<ctl:code>
			<ctl:message>**********************************************************************</ctl:message>
			<ctl:message>GetCapabilities by GET or POST.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root element matches the provided root element.</ctl:message>
			<xsl:variable name="request1">
				<xsl:choose>
					<xsl:when test="$isGET eq 'true'">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<parsers:XMLValidatingParser>						
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:when>
					<xsl:when test="($isSOAP eq 'true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetCapabilities>
							</ctl:body>
							<parsers:SOAPParser return="content">
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</parsers:SOAPParser>
						</ctl:soap-request>
					</xsl:when>
					<xsl:otherwise>
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"/>
							</ctl:body>
							<parsers:XMLValidatingParser>						
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
					<xsl:choose>
						<xsl:when test="not($request1Root=$capabilitiesRootElementName)">
							<ctl:message>The root element from the response to a GetCapabilities request "<xsl:value-of select="$request1Root" />" does not match the expected root element of "<xsl:value-of select="$capabilitiesRootElementName" />"</ctl:message>
							<ctl:fail />
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="capabilitiesDocument">
								<xsl:copy-of select="$request1" />
							</xsl:variable>
							<xsl:if test="$test0101 eq 'true'">
								<!--Content-type-->
								<ctl:message>**********************************************************************</ctl:message>
								<ctl:message select="''"/>
								<ctl:call-test name="owsTests:ows-OWS.ContentType.1">
									<ctl:with-param name="serviceURL" select="$serviceURL"/>
									<ctl:with-param name="isGET" select="$isGET"/>
									<ctl:with-param name="isSOAP" select="$isSOAP"/>
									<ctl:with-param name="serviceType" select="$serviceType"/>
									<ctl:with-param name="serviceVersion" select="$serviceVersion"/>
									<ctl:with-param name="rootElementName" select="$capabilitiesRootElementName" />
									<ctl:with-param name="expectedContentType" select="$capabilitiesResponseContentType" />
								</ctl:call-test>
							</xsl:if>
							<!--Exceptions-->
							<xsl:if test="$test0102 eq 'true'">
								<!--Invalid request parameter value-->
								<ctl:message>**********************************************************************</ctl:message>
								<ctl:message select="''"/>
								<ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Exceptions.2">
									<ctl:with-param name="serviceURL" select="$serviceURL"/>
									<ctl:with-param name="isGET" select="$isGET"/>
									<ctl:with-param name="isSOAP" select="$isSOAP"/>
									<ctl:with-param name="serviceVersion" select="$serviceVersion" />
									<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
									<ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
								</ctl:call-test>
							</xsl:if>
							<xsl:if test="$test0103 eq 'true'">
								<!--Invalid update sequence-->
								<xsl:if test="not(string($capabilitiesDocument//@updateSequence)='')">
									<ctl:message>**********************************************************************</ctl:message>
									<ctl:message select="''"/>
									<ctl:message>updateSequence is supported for GetCapabilities requests.  Running updateSequence tests...</ctl:message>
									<ctl:call-test name="owsTests:ows-OWS.GetCapabilities-UpdateSequence.1">
										<ctl:with-param name="serviceURL" select="$serviceURL"/>
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="serviceType" select="$serviceType" />
										<ctl:with-param name="serviceVersion" select="$serviceVersion" />
										<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
										<ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />	  
									</ctl:call-test>
								</xsl:if>		
							</xsl:if>
							<xsl:if test="$test0104 eq 'true'">
								<!--An error occurs that prevents successful request processing-->
								<ctl:message>**********************************************************************</ctl:message>
								<ctl:message select="''"/>
								<ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Exceptions.5">
									<ctl:with-param name="serviceURL" select="$serviceURL"/>
									<ctl:with-param name="isGET" select="$isGET"/>
									<ctl:with-param name="isSOAP" select="$isSOAP"/>
									<ctl:with-param name="serviceType" select="$serviceType" />
									<ctl:with-param name="serviceVersion" select="$serviceVersion" />
									<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
									<ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
								</ctl:call-test>
							</xsl:if>
							<xsl:if test="$test0105 eq 'true'">
								<!--Case insensitive KVP names-->
								<ctl:message>**********************************************************************</ctl:message>
								<ctl:message select="''"/>
								<ctl:call-test name="owsTests:ows-OWS.CaseInsensitiveKvpNames.1">
									<ctl:with-param name="serviceURL" select="$serviceURL"/>
									<ctl:with-param name="isGET" select="$isGET"/>
									<ctl:with-param name="isSOAP" select="$isSOAP"/>
									<ctl:with-param name="serviceType" select="$serviceType" />
									<ctl:with-param name="serviceVersion" select="$serviceVersion" />
									<ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
									<ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType" />
									<ctl:with-param name="rootElementName" select="$capabilitiesRootElementName" />
								</ctl:call-test>
							</xsl:if>
							<xsl:if test="$test0106 eq 'true'">
								<!--AcceptVersions tests-->
								<ctl:message>**********************************************************************</ctl:message>
								<ctl:message select="''"/>
								<ctl:call-test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.1">
									<ctl:with-param name="serviceURL" select="$serviceURL"/>
									<ctl:with-param name="isGET" select="$isGET"/>
									<ctl:with-param name="isSOAP" select="$isSOAP"/>
									<ctl:with-param name="serviceType" select="$serviceType" />
									<ctl:with-param name="serviceVersion" select="$serviceVersion" />
									<ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
									<ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType" />
									<ctl:with-param name="rootElementName" select="$capabilitiesRootElementName"/>
								</ctl:call-test>
							</xsl:if>
							<xsl:if test="$test0107 eq 'true'">
								<ctl:message>**********************************************************************</ctl:message>
								<ctl:message select="''"/>
								<ctl:call-test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.2">
									<ctl:with-param name="serviceURL" select="$serviceURL"/>
									<ctl:with-param name="isGET" select="$isGET"/>
									<ctl:with-param name="isSOAP" select="$isSOAP"/>
									<ctl:with-param name="serviceType" select="$serviceType"/>
									<ctl:with-param name="serviceVersion" select="$serviceVersion"/>
									<ctl:with-param name="acceptVersions" select="string('2.0.0')"/>
									<ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation"/>
									<ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType"/>
									<ctl:with-param name="rootElementName" select="$capabilitiesRootElementName"/>
								</ctl:call-test>
							</xsl:if>
							<xsl:if test="$test0108 eq 'true'">
								<ctl:message>**********************************************************************</ctl:message>
								<ctl:message select="''"/>
								<ctl:call-test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.3">
									<ctl:with-param name="serviceURL" select="$serviceURL"/>
									<ctl:with-param name="isGET" select="$isGET"/>
									<ctl:with-param name="isSOAP" select="$isSOAP"/>
									<ctl:with-param name="serviceType" select="$serviceType"/>
									<ctl:with-param name="serviceVersion" select="$serviceVersion"/>
									<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation"/>
									<ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType"/>
								</ctl:call-test>
							</xsl:if>
							<!-- run tests for optional capabilities that are implemented -->           
							<xsl:if test="$capabilitiesDocument//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='sections']">
								<xsl:if test="$test0109 eq 'true'">
									<ctl:message>**********************************************************************</ctl:message>
									<ctl:message select="''"/>
									<ctl:message>Sections parameter is supported for GetCapabilities requests.  Running Sections tests...</ctl:message>
									<ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Sections.1">
										<ctl:with-param name="serviceURL" select="$serviceURL"/>
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="serviceType" select="$serviceType" />
										<ctl:with-param name="serviceVersion" select="$serviceVersion" />
										<ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
										<ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType" />
									</ctl:call-test>
									<ctl:message>**********************************************************************</ctl:message>
								</xsl:if>
								<xsl:if test="$test0110 eq 'true'">
									<ctl:message select="''"/>
									<ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Sections.2">
										<ctl:with-param name="serviceURL" select="$serviceURL"/>
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="serviceType" select="$serviceType" />
										<ctl:with-param name="serviceVersion" select="$serviceVersion" />
										<ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
										<ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType" />
									</ctl:call-test>
								</xsl:if>
							</xsl:if>
							<xsl:if test="$test0111 eq 'true'">
								<xsl:if test="$capabilitiesDocument//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='acceptformats']">
									<ctl:message>**********************************************************************</ctl:message>
									<ctl:message select="''"/>
									<ctl:message>AcceptFormats parameter is supported for GetCapabilities requests.  Running AcceptFormats tests...</ctl:message>
									<ctl:call-test name="owsTests:ows-OWS.GetCapabilities-AcceptFormats.1">
										<ctl:with-param name="serviceURL" select="$serviceURL"/>
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="serviceType" select="$serviceType" />
										<ctl:with-param name="formats" select="$capabilitiesDocument//ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='acceptformats']"/>
									</ctl:call-test>
								</xsl:if>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>

		</ctl:code>
	</ctl:test>

	<!-- test0101 -->
	<ctl:test name="owsTests:ows-OWS.ContentType.1">
		<ctl:param name="serviceURL"/>
		<ctl:param name="isGET" />
		<ctl:param name="isSOAP" />
		<ctl:param name="serviceType" />
		<ctl:param name="serviceVersion" />
		<ctl:param name="rootElementName" />
		<ctl:param name="expectedContentType" />
		<ctl:assertion>A response message containing an entity body must contain a Content-Type entity header field that correctly indicates the media type of the message body.</ctl:assertion>
		<ctl:comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document matches the root element name; (3) the response Content-Type header must be $expectedContentType for XML entities.</ctl:comment>
		<ctl:link>ows-1.0.0-common-atc2</ctl:link>
		<ctl:link>OGC 05-008c1, 11.7, p.61</ctl:link>
		<ctl:code>		
			<ctl:message select="concat('Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document matches the root element name; (3) the response Content-Type header must be &quot;', $expectedContentType, '&quot; for XML entities.')"/>
			<xsl:variable name="request1">
				<xsl:choose>
					<xsl:when test="($isGET eq 'true')">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<parsers:HTTPParser/>
						</ctl:request>
					</xsl:when>
					<xsl:when test="($isSOAP eq 'true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetCapabilities>
							</ctl:body>
							<parsers:HTTPParser/>
						</ctl:soap-request>
					</xsl:when>
					<xsl:otherwise>
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"/>
							</ctl:body>
							<parsers:HTTPParser/>
						</ctl:request>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="content-type" select="$request1//response/headers/header[@name='Content-Type']"/>
					<xsl:variable name="isValidMIMEType">
						<ctl:call-function name="owsFunctions:isValidMIMETypeFormat">
							<ctl:with-param name="responseFormat" select="$content-type" />
						</ctl:call-function>
					</xsl:variable>
					<xsl:if test="not(starts-with($content-type,$expectedContentType)) and not(xsd:boolean($isValidMIMEType))">
						<ctl:message>FAILURE: Incorrect response encoding.  "<xsl:value-of select="$expectedContentType" />" was expected, but "<xsl:value-of select="$content-type" />" was returned instead.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>			
		</ctl:code>
	</ctl:test>

	<!-- test0102 -->
	<ctl:test name="owsTests:ows-OWS.GetCapabilities-Exceptions.2">
		<ctl:param name="serviceURL"/>
		<ctl:param name="isGET" />
		<ctl:param name="isSOAP" />
		<ctl:param name="serviceVersion" />
		<ctl:param name="exceptionReportSchemaLocation" />
		<ctl:param name="exceptionReportSchemaType" />
		<ctl:assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</ctl:assertion>
		<ctl:comment>GetCapabilities with a bogus service parameter value ('ADSF').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidParameterValue' exception code; (4) theExceptionReport @locator value shall be that of the invalid parameter.</ctl:comment>
		<ctl:link>ows-1.0.0-metadata-atc5</ctl:link>
		<ctl:link>OGC 05-008c1, 7.4.1, p.19</ctl:link>
		<ctl:code>
			<ctl:message>GetCapabilities with a bogus service parameter value (ADSF).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidParameterValue' exception code; (4) theExceptionReport @locator value shall be that of the invalid parameter.</ctl:message>
			<ctl:message select="concat('Service parameter: ', 'ASDF')"/>
			<xsl:variable name="response">
				<xsl:choose>
					<xsl:when test="($isGET eq 'true')">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">ASDF</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:when>
					<xsl:when test="($isSOAP eq 'true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sos:GetCapabilities service="ASDF" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetCapabilities>
							</ctl:body>
							<parsers:SOAPParser return="content">
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
											<xsl:value-of select="$exceptionReportSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</parsers:SOAPParser>
						</ctl:soap-request>
					</xsl:when>
					<xsl:otherwise>
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sos:GetCapabilities service="ASDF" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"/>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>		
			<xsl:choose>
				<xsl:when test="not($response/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="isValid">
						<ctl:call-function name="owsFunctions:checkExceptionReport">
							<ctl:with-param name="exceptionReport" select="$response" />
							<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
							<ctl:with-param name="locatorToCheck" select="string('service')" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
						</ctl:call-function>
					</xsl:variable>
					<xsl:if test="not(xsd:boolean($isValid))">
						<ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "InvalidParameterValue" and a locator value of "service".</ctl:message>
						<ctl:message select="concat('Returned exception code was: &quot;', owsFunctions:exceptionCode($response), '&quot;')"/>
						<ctl:message select="concat('Returned locator was: &quot;', owsFunctions:exceptionCodeLocator($response), '&quot;')"/>						

						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>

	<!-- test0103 -->
	<ctl:test name="owsTests:ows-OWS.GetCapabilities-UpdateSequence.1">
		<ctl:param name="serviceURL"/>
		<ctl:param name="isGET" />
		<ctl:param name="isSOAP" />
		<ctl:param name="serviceType" />
		<ctl:param name="serviceVersion" />
		<ctl:param name="exceptionReportSchemaLocation" />
		<ctl:param name="exceptionReportSchemaType" />
		<ctl:assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</ctl:assertion>
		<ctl:comment>GetCapabilities with an incorrect updatesequence ('9999999999'), if higher than the update sequence on the current capabilities document give an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidUpdateSequence' exception code.</ctl:comment>
		<ctl:link>ows-1.0.0-metadata-atc5</ctl:link>
		<ctl:link>OGC 05-008c1, 7.4.1, p.19</ctl:link>
		<ctl:code>
			<ctl:message>GetCapabilities with an incorrect updatesequence (9999999999), if higher than the update sequence on the current capabilities document give an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the &quot;InvalidUpdateSequence&quot; exception code.</ctl:message>
			<ctl:message select="concat('Service parameter: ', $serviceType)"/>
			<ctl:message select="concat('UpdateSequence parameter: ', '9999999999')"/>
			<xsl:variable name="request1">
				<xsl:choose>
					<xsl:when test="($isGET eq 'true')">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="updatesequence">9999999999</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:when>
					<xsl:when test="($isSOAP eq 'true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sos:GetCapabilities service="SOS" updateSequence="9999999999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetCapabilities>
							</ctl:body>
							<parsers:SOAPParser return="content">
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
											<xsl:value-of select="$exceptionReportSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</parsers:SOAPParser>
						</ctl:soap-request>
					</xsl:when>
					<xsl:otherwise>
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sos:GetCapabilities service="SOS" updateSequence="9999999999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"/>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:otherwise>
				</xsl:choose>
				
			</xsl:variable>			
			<!--<ctl:message select="concat('*******', $request1)"/>-->
			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="isValid">
						<ctl:call-function name="owsFunctions:checkExceptionReport">
							<ctl:with-param name="exceptionReport" select="$request1" />
							<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidUpdateSequence')" />
							<ctl:with-param name="locatorToCheck" select="string('*')" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
						</ctl:call-function>
					</xsl:variable>
					<xsl:if test="not(xsd:boolean($isValid))">
						<ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "InvalidUpdateSequence".</ctl:message>
						<ctl:message select="concat('Returned exception code was: &quot;', owsFunctions:exceptionCode($request1), '&quot;')"/>
						<ctl:fail/>
					</xsl:if>			
				</xsl:otherwise>
			</xsl:choose>		

		</ctl:code>
	</ctl:test>

	<!-- test0104 -->
	<ctl:test name="owsTests:ows-OWS.GetCapabilities-Exceptions.5">
		<ctl:param name="serviceURL"/>
		<ctl:param name="isGET" />
		<ctl:param name="isSOAP" />
		<ctl:param name="serviceType" />
		<ctl:param name="serviceVersion" />
		<ctl:param name="exceptionReportSchemaLocation" />
		<ctl:param name="exceptionReportSchemaType" />
		<ctl:assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</ctl:assertion>
		<ctl:comment>GetCapabilities with an incorrect KVP query string, triggering the missing parameter value exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'MissingParameterValue' exception code, for both the request and service.</ctl:comment>
		<ctl:link>ows-1.0.0-metadata-atc5</ctl:link>
		<ctl:link>OGC 05-008c1, 7.4.1, p.19</ctl:link>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="($isGET eq 'true')">
					<ctl:message>GetCapabilities with an incorrect KVP query string, triggering the missing parameter value exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the &quot;MissingParameterValue&quot; exception code, for both the request and service.</ctl:message>
					<!--<xsl:variable name="invalidQueryString" select="concat($serviceURL,'?request~GetCapabilities!service~!',$serviceType,'version~',$serviceVersion)"/> No version parameter for GetCapabilities in Specification fix by rocky 2012/05/10-->
					<xsl:variable name="invalidQueryString" select="concat($serviceURL,'?request~GetCapabilities!service~!',$serviceType)"/>
					<ctl:message select="concat('Query String: ', $invalidQueryString)"/>
					<xsl:variable name="request1">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$invalidQueryString"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>
					<!--<ctl:message select="concat('*******', $request1)"/>-->
					<xsl:choose>
						<xsl:when test="not($request1/*)">
							<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="isValid1">
								<ctl:call-function name="owsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$request1" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="'false'" />
								</ctl:call-function>
							</xsl:variable>
							<xsl:variable name="isValid2">
								<ctl:call-function name="owsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$request1" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('request')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="'false'" />
								</ctl:call-function>
							</xsl:variable>
							<xsl:if test="not(xsd:boolean($isValid1) or xsd:boolean($isValid2))">
								<ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "MissingParameterValue" and a locator value of "service" or "request".</ctl:message>
								<ctl:message select="concat('Returned exception code was: &quot;', owsFunctions:exceptionCode($request1), '&quot;')"/>
								<ctl:message select="concat('Returned locator was: &quot;', owsFunctions:exceptionCodeLocator($request1), '&quot;')"/>						
								<ctl:fail/>
							</xsl:if>							
						</xsl:otherwise>
					</xsl:choose>	
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Server doesn't support HTTP-GET. Skip this test.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>

	<!-- test0105 -->
	<ctl:test name="owsTests:ows-OWS.CaseInsensitiveKvpNames.1">
		<ctl:param name="serviceURL"/>
		<ctl:param name="isGET" />
		<ctl:param name="isSOAP" />
		<ctl:param name="serviceType" />
		<ctl:param name="serviceVersion" />
		<ctl:param name="responseSchemaLocation" />
		<ctl:param name="responseSchemaType" />
		<ctl:param name="rootElementName" />
		<ctl:assertion>Parameter names in KVP strings shall be handled in a case-insensitive manner.</ctl:assertion>
		<ctl:comment>GetCapabilities with the KVP parameter names in all uppercase.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root element matches the provided root element.</ctl:comment>
		<ctl:link>ows-1.0.0-common-atc1</ctl:link>
		<ctl:link>OGC 05-008c1, 11.5.2, p.56</ctl:link>
		<ctl:code>		
			<xsl:choose>
				<xsl:when test="($isGET eq 'true')">
					<ctl:message>GetCapabilities with the KVP parameter names in all uppercase.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root element matches the provided root element.</ctl:message>
					<!--Request with all caps parameter keys-->
					<ctl:message>Executing a GetCapabilities request with upper-case parameter names...</ctl:message>
					<xsl:variable name="request1">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="SERVICE"><xsl:value-of select="$serviceType" /></ctl:param>
							<!--<ctl:param name="VERSION"><xsl:value-of select="$serviceVersion" /></ctl:param> No version parameter for GetCapabilities in Specification fix by rocky 2012/05/10-->
							<ctl:param name="REQUEST">GetCapabilities</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>

					<!--Request with mixed case parameter keys-->
					<ctl:message>Executing a GetCapabilities request with mixed-case parameter names...</ctl:message>
					<xsl:variable name="request2">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="SeRvIcE"><xsl:value-of select="$serviceType" /></ctl:param>
							<!--<ctl:param name="vErSiOn"><xsl:value-of select="$serviceVersion" /></ctl:param> No version parameter for GetCapabilities in Specification fix by rocky 2012/05/10-->
							<ctl:param name="RequesT">GetCapabilities</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>

					<!--Request with lower case parameter keys-->
					<ctl:message>Executing a GetCapabilities request with lower-case parameter names...</ctl:message>
					<xsl:variable name="request3">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<!--<ctl:param name="version"><xsl:value-of select="$serviceVersion" /></ctl:param> No version parameter for GetCapabilities in Specification fix by rocky 2012/05/10-->
							<ctl:param name="request">GetCapabilities</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>

					<xsl:choose>
						<xsl:when test="not($request1/*) or not($request2/*) or not($request3/*)">
							<ctl:message>FAILURE: Missing or invalid response entity in one or more of the preceding GetCapabilities requests.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
							<xsl:variable name="request2Root" select="local-name-from-QName(node-name($request2/*[1]))" />
							<xsl:variable name="request3Root" select="local-name-from-QName(node-name($request3/*[1]))" />
							<xsl:if test="not($request1Root=$rootElementName) or not($request2Root=$rootElementName) or not($request3Root=$rootElementName)">
								<ctl:message>FAILURE:  The root element(s) from the responses to GetCapabilities requests with mixed-case parameters do not match the expected root element of "<xsl:value-of select="$rootElementName" />"</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>			
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Server doesn't support HTTP-GET. Skip this test.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>

	<!-- test0106 -->
	<ctl:test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.1">
		<ctl:param name="serviceURL"/>
		<ctl:param name="isGET" />
		<ctl:param name="isSOAP" />
		<ctl:param name="serviceType" />
		<ctl:param name="serviceVersion" />
		<ctl:param name="responseSchemaLocation" />
		<ctl:param name="responseSchemaType" />
		<ctl:param name="rootElementName" />
		<ctl:assertion>If AcceptVersion is not specified, the service must respond with highest supported version.</ctl:assertion>
		<ctl:comment>GetCapabilities with no version and service of $serviceType.  Without AcceptVersion, using version negotiation, sends latest copy.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ows_Capabilities document; (3) the response version must be what was requested.</ctl:comment>
		<ctl:link>ows-1.0.0-metadata-atc3</ctl:link>
		<ctl:link>OGC 05-008c1, 7.3.2, p.16</ctl:link>
		<ctl:code>
			<ctl:message select="concat('GetCapabilities with no version and service of &quot;', $serviceType, '&quot;.  Without AcceptVersion, using version negotiation, sends latest copy.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:OWS_Capabilities document; (3) the response version must be what was requested')"/>
			<xsl:variable name="request1">
				<xsl:choose>
					<xsl:when test="($isGET eq 'true')">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">GetCapabilities</ctl:param>				   
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:when>
					<xsl:when test="($isSOAP eq 'true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetCapabilities>
							</ctl:body>
							<parsers:SOAPParser return="content">
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$responseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</parsers:SOAPParser>
						</ctl:soap-request>
					</xsl:when>
					<xsl:otherwise>
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"/>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>		
			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
					<xsl:variable name="version">
						<xsl:value-of select="$request1/*[1]/@version" />
					</xsl:variable>
					<xsl:if test="not($request1Root=$rootElementName)">
						<ctl:message>FAILURE:  The root element from the response to a GetCapabilities request does not match the expected root element of "<xsl:value-of select="$rootElementName" />"</ctl:message>
						<ctl:message select="concat('Root element was: &quot;', $request1Root, '&quot;')"/>
						<ctl:fail />
					</xsl:if>
					<xsl:if test="not($version=$serviceVersion)">
						<ctl:message>FAILURE:  The returned value in the version attribute "<xsl:value-of select="$version" />" does not match the expected version of "<xsl:value-of select="$serviceVersion" />"</ctl:message>
						<ctl:fail />
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>		
		</ctl:code>
	</ctl:test>

	<!-- test0107 -->
	<ctl:test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.2">
		<ctl:param name="serviceURL"/>
		<ctl:param name="isGET" />
		<ctl:param name="isSOAP" />
		<ctl:param name="serviceType" />
		<ctl:param name="serviceVersion" />
		<ctl:param name="acceptVersions" />
		<ctl:param name="responseSchemaLocation" />
		<ctl:param name="responseSchemaType" />
		<ctl:param name="rootElementName" />
		<ctl:assertion>Version negotiation using AcceptVersions parameter (preference ordering): Return service metadata corresponding to the most preferred version that is supported. If none of the requested versions are supported, the server must generate an exception with code 'VersionNegotiationFailed'.</ctl:assertion>
		<ctl:comment>GetCapabilities with no version and service of $serviceType.  With AcceptVersion, expecting one of the versions listed $acceptVersions.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:OWS_Capabilities document; (3) the response version must be what was requested. The AcceptVersion element is used with a number of versions, one is expected to return ('1.1.0').</ctl:comment>
		<ctl:link>ows-1.0.0-metadata-atc4</ctl:link>
		<ctl:link>OGC 05-008c1, 7.3.2, p.16</ctl:link>
		<ctl:code>
			<ctl:message select="concat('GetCapabilities with no version and service of &quot;', $serviceType, '&quot;.  With AcceptVersion, expecting one of the versions listed $acceptVersions.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:OWS_Capabilities document; (3) the response version must be what was requested. The AcceptVersion element is used with a number of versions, one is expected to return (''1.1.0'').')"/>
			<xsl:variable name="request1">
				<xsl:choose>
					<xsl:when test="($isGET eq 'true')">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">GetCapabilities</ctl:param>				   
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="acceptversions"><xsl:value-of select="$acceptVersions" /></ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:when>
					<xsl:when test="($isSOAP eq 'true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									<ows:AcceptVersions>
										<ows:Version>2.0.0</ows:Version>
									</ows:AcceptVersions>
								</sos:GetCapabilities>
							</ctl:body>
							<parsers:SOAPParser return="content">
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$responseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</parsers:SOAPParser>
						</ctl:soap-request>
					</xsl:when>
					<xsl:otherwise>
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									<ows:AcceptVersions>
										<ows:Version>2.0.0</ows:Version>
									</ows:AcceptVersions>
								</sos:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>	

			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
					<xsl:variable name="version">
						<xsl:value-of select="$request1/*[1]/@version" />
					</xsl:variable>
					<xsl:if test="not($request1Root=$rootElementName)">
						<ctl:message>FAILURE:  The root element from the response to a GetCapabilities request does not match the expected root element of "<xsl:value-of select="$rootElementName" />"</ctl:message>
						<ctl:message select="concat('Root element was: &quot;', $request1Root, '&quot;')"/>
						<ctl:fail />
					</xsl:if>
					<xsl:if test="not($version=$serviceVersion)">
						<ctl:message>FAILURE:  The returned value in the version attribute "<xsl:value-of select="$version" />" does not match the expected version of "<xsl:value-of select="$serviceVersion" />"</ctl:message>
						<ctl:fail />
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>		

		</ctl:code>
	</ctl:test>

	<!-- test0108 -->
	<ctl:test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.3">
		<ctl:param name="serviceURL"/>
		<ctl:param name="isGET" />
		<ctl:param name="isSOAP" />
		<ctl:param name="serviceType" />
		<ctl:param name="serviceVersion" />
		<ctl:param name="exceptionReportSchemaLocation" />
		<ctl:param name="exceptionReportSchemaType" />
		<ctl:assertion>Version negotiation using AcceptVersions parameter (preference ordering): Return service metadata corresponding to the most preferred version that is supported. If none of the requested versions are supported, the server must generate an exception with code 'VersionNegotiationFailed'.</ctl:assertion>
		<ctl:comment>GetCapabilities with no version and service of $serviceType.  With AcceptVersion, using a bogus version number ('2000-01-01').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'VersionNegotiationFailed' exception code.</ctl:comment>
		<ctl:link>ows-1.0.0-metadata-atc4</ctl:link>
		<ctl:link>OGC 05-008c1, 7.3.2, p.16</ctl:link>
		<ctl:code>
			<ctl:message select="concat('GetCapabilities with no version and service of &quot;', $serviceType, '&quot;.  With AcceptVersion, using a bogus version number (2000-01-01).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the &quot;VersionNegotiationFailed&quot; exception code.')"/>
			<xsl:variable name="request1">
				<xsl:choose>
					<xsl:when test="($isGET eq 'true')">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">GetCapabilities</ctl:param>				   
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="acceptversions">2000.01.01</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>							
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:when>
					<xsl:when test="($isSOAP eq 'true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									<ows:AcceptVersions>
										<ows:Version>2000.01.01</ows:Version>
									</ows:AcceptVersions>
								</sos:GetCapabilities>
							</ctl:body>
							<parsers:SOAPParser return="content">
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
											<xsl:value-of select="$exceptionReportSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</parsers:SOAPParser>
						</ctl:soap-request>
					</xsl:when>
					<xsl:otherwise>
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									<ows:AcceptVersions>
										<ows:Version>2000.01.01</ows:Version>
									</ows:AcceptVersions>
								</sos:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>	
			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="isValid">
						<ctl:call-function name="owsFunctions:checkExceptionReport">
							<ctl:with-param name="exceptionReport" select="$request1" />
							<ctl:with-param name="exceptionCodeToCheck" select="string('VersionNegotiationFailed')" />
							<ctl:with-param name="locatorToCheck" select="string('*')" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
						</ctl:call-function>
					</xsl:variable>
					<xsl:if test="not(xsd:boolean($isValid))">
						<ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "VersionNegotiationFailed".</ctl:message>
						<ctl:message select="concat('Returned exception code was: &quot;', owsFunctions:exceptionCode($request1), '&quot;')"/>
						<ctl:fail/>
					</xsl:if>					
				</xsl:otherwise>
			</xsl:choose>						
		</ctl:code>
	</ctl:test>

	<!-- test0109 -->
	<ctl:test name="owsTests:ows-OWS.GetCapabilities-Sections.1">
		<ctl:param name="serviceURL"/>
		<ctl:param name="isGET" />
		<ctl:param name="isSOAP" />
		<ctl:param name="serviceType" />
		<ctl:param name="serviceVersion" />
		<ctl:param name="responseSchemaLocation" />
		<ctl:param name="responseSchemaType" />
		<ctl:assertion>
      The response to a GetCapabilities request that includes a sections parameter 
      with NO VALUE provided shall include an abbreviated capabilities document 
      that omits all optional sections.
		</ctl:assertion>
		<ctl:comment>Pass if the response is schema valid and omits all optional 
      top-level elements.</ctl:comment>
		<ctl:link>ows-1.0.0-metadata-atc9</ctl:link>
		<ctl:link>OGC 05-008c1, 7.3.3, p.17</ctl:link>
		<ctl:code>
			<ctl:message>Pass if the response is schema valid and omits all optional top-level elements.</ctl:message>
			<ctl:message select="concat('Service parameter: ', $serviceType)"/>
			<xsl:variable name="response">
				<xsl:choose>
					<xsl:when test="($isGET eq 'true')">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="sections"></ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:when>
					<xsl:when test="($isSOAP eq 'true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									<ows:Sections>
										<ows:Section></ows:Section>
									</ows:Sections>
								</sos:GetCapabilities>
							</ctl:body>
							<parsers:SOAPParser return="content">
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$responseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</parsers:SOAPParser>
						</ctl:soap-request>
					</xsl:when>
					<xsl:otherwise>
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									<ows:Sections>
										<ows:Section></ows:Section>
									</ows:Sections>
								</sos:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<!--<ctl:message select="concat('*******', $response)"/>-->			
			<xsl:choose>
				<xsl:when test="not($response/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:for-each select="$response/*/*">
						<xsl:variable name="sectionName" select="local-name-from-QName(node-name(.))" />
						<ctl:message>Testing the "<xsl:value-of select="$sectionName" />" section...</ctl:message>
						<xsl:if test="count(index-of($response//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:Parameter[@name='Sections']//ows:Value,$sectionName))>0">
							<ctl:message>FAILURE:  The "<xsl:value-of select="$sectionName" />" section should not be listed in the returned Capabilities document.</ctl:message>
							<ctl:fail/>
						</xsl:if>
					</xsl:for-each>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	
	<!-- test0110 -->
	<ctl:test name="owsTests:ows-OWS.GetCapabilities-Sections.2">
		<ctl:param name="serviceURL"/>
		<ctl:param name="isGET" />
		<ctl:param name="isSOAP" />
		<ctl:param name="serviceType" />
		<ctl:param name="serviceVersion" />
		<ctl:param name="responseSchemaLocation" />
		<ctl:param name="responseSchemaType" />
		<ctl:assertion>
      The response to a GetCapabilities request that includes a sections parameter 
      listing optional elements shall include only the requested elements in the 
      response entity.
		</ctl:assertion>
		<ctl:comment>
      Pass if the response is schema valid and includes only the requested optional 
      elements.
		</ctl:comment>
		<ctl:link>ows-1.0.0-metadata-atc9</ctl:link>
		<ctl:link>OGC 05-008c1, 7.3.3, p.17</ctl:link>
		<ctl:code>
			<ctl:message>Pass if the response is schema valid and includes only the requested optional elements.</ctl:message>
			<ctl:message select="concat('Version parameter: ', $serviceVersion)"/>
			<ctl:message select="concat('Sections parameter: ', 'ServiceIdentification,OperationsMetadata')"/>			
			<xsl:variable name="response">
				<xsl:choose>
					<xsl:when test="($isGET eq 'true')">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="sections">ServiceIdentification,OperationsMetadata</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:when>
					<xsl:when test="($isSOAP eq 'true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									<ows:Sections>
										<ows:Section>ServiceIdentification</ows:Section>
										<ows:Section>OperationsMetadata</ows:Section>
									</ows:Sections>
								</sos:GetCapabilities>
							</ctl:body>
							<parsers:SOAPParser return="content">
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$responseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</parsers:SOAPParser>
						</ctl:soap-request>
					</xsl:when>
					<xsl:otherwise>
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
									http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									<ows:Sections>
										<ows:Section>ServiceIdentification</ows:Section>
										<ows:Section>OperationsMetadata</ows:Section>
									</ows:Sections>
								</sos:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="not($response/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="not($response//ows:OperationsMetadata)">
						<ctl:message>FAILURE: ows:OperationsMetadata element is missing</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<xsl:if test="not($response//ows:ServiceIdentification)">
						<ctl:message>FAILURE: ows:ServiceIdentification element is included</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<xsl:if test="$response//ows:ServiceProvider">
						<ctl:message>FAILURE: ows:ServiceProvider element is included</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	
	<!-- test0111 -->
	<ctl:test name="owsTests:ows-OWS.GetCapabilities-AcceptFormats.1">
		<ctl:param name="serviceURL"/>
		<ctl:param name="isGET" />
		<ctl:param name="isSOAP" />
		<ctl:param name="serviceType" />
		<ctl:param name="formats"/>
		<ctl:assertion>
      The response to a GetCapabilities request containing an AcceptVersions 
      parameter specifying a supported format must include a response entity 
      that corresponds to the requested media type.
		</ctl:assertion>
		<ctl:link>OGC 05-008, 7.3.5</ctl:link>
		<ctl:code>
			<xsl:for-each select="$formats//ows:Value">
				<xsl:variable name="format" select="./text()" />
				<ctl:message select="concat('Service: ', $serviceType)"/>
				<ctl:message select="concat('AcceptsFormats parameter: ', $format)"/>			
				<xsl:variable name="response">
					<xsl:choose>
						<xsl:when test="($isGET eq 'true')">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
								<ctl:param name="request">GetCapabilities</ctl:param>
								<ctl:param name="acceptformats"><xsl:value-of select="$format"/></ctl:param>
								<parsers:HTTPParser>
									<parsers:parse>
										<parsers:NullParser/>
									</parsers:parse>
								</parsers:HTTPParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP eq 'true')">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<ows:AcceptFormats>
											<ows:OutputFormat><xsl:value-of select="$format"/></ows:OutputFormat>
										</ows:AcceptFormats>
									</sos:GetCapabilities>
								</ctl:body>
								<parsers:HTTPParser>
										<parsers:parse>
											<parsers:NullParser/>
										</parsers:parse>
									</parsers:HTTPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<ows:AcceptFormats>
											<ows:OutputFormat><xsl:value-of select="$format"/></ows:OutputFormat>
										</ows:AcceptFormats>
									</sos:GetCapabilities>
								</ctl:body>
								<parsers:HTTPParser>
									<parsers:parse>
										<parsers:NullParser/>
									</parsers:parse>
								</parsers:HTTPParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<!--<ctl:message select="concat('*******', $response)"/>-->

				<xsl:variable name="content-type" select="$response//headers/header[@name='Content-Type']"/>
				<xsl:choose>			
					<xsl:when test="not($response/*)">
						<ctl:message select="'FAILURE: HTTP Header failed validation.'"/>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not(starts-with($content-type, $format))">
						<ctl:message>FAILURE: Unexpected content type for response entity (Request: <xsl:value-of select="$format"/>, Response: <xsl:value-of select="$content-type"/>).</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>

			</xsl:for-each>
		</ctl:code>
	</ctl:test>
	
	<!--===========-->
	<!-- Functions -->
	<!--===========-->

	<!--Validates an ExceptionReport and checks for specific exceptionCode and locator values-->
	<ctl:function name="owsFunctions:checkExceptionReport"><!-- CHECK OK -->
        <ctl:param name="exceptionReport">The exception report to check</ctl:param>
        <ctl:param name="exceptionCodeToCheck">The exceptionCode to check</ctl:param>
        <ctl:param name="locatorToCheck">The locator to check (a * can be provided to indicate that any locator value is allowed)</ctl:param>
		<ctl:param name="PostEncodingIsSOAP">Encoding Type</ctl:param>
        <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
        <ctl:description></ctl:description>
        <ctl:code>
			<xsl:if test="$PostEncodingIsSOAP=string('true')">
				<xsl:variable name="exceptionElement" select="$exceptionReport//soap12:Detail/ows:Exception" />
				<xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
				<xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
				<xsl:choose>
					<xsl:when test="$locatorToCheck='*'">
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (string-length(normalize-space($locatorValue))>=0)" />
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (lower-case($locatorToCheck)=lower-case($locatorValue))" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
			<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
				<xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception" />
				<xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
				<xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
				<xsl:choose>
					<xsl:when test="$locatorToCheck='*'">
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (string-length(normalize-space($locatorValue))>=0)" />
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (lower-case($locatorToCheck)=lower-case($locatorValue))" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="owsFunctions:exceptionElement">
		<ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
		<ctl:code>
			<xsl:copy-of select="$exceptionResponse//ows:ExceptionReport/ows:Exception" />
		</ctl:code>
	</ctl:function>

	<ctl:function name="owsFunctions:exceptionCode">
		<ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
		<ctl:code>
			<xsl:variable name="exceptionElement" select="owsFunctions:exceptionElement($exceptionResponse)"/>
			<xsl:value-of select="$exceptionElement/@exceptionCode" />
		</ctl:code>
	</ctl:function>

	<ctl:function name="owsFunctions:exceptionCodeLocator">
		<ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
		<ctl:code>
			<xsl:variable name="exceptionElement" select="owsFunctions:exceptionElement($exceptionResponse)"/>
			<xsl:value-of select="$exceptionElement/@locator" />
		</ctl:code>
	</ctl:function>

	<ctl:function name="owsFunctions:isValidMIMETypeFormat">
		<ctl:param name="responseFormat">The resosonseFormat to validate</ctl:param>
		<ctl:return>True/False depending on whether the input is a valid MIME type based on ows:owsCommon.xsd</ctl:return>
		<ctl:description>Determines if a definition URN is valid</ctl:description>
		<ctl:code>		
			<xsl:value-of select="(matches($responseFormat,'^(application|audio|image|text|video|message|multipart|model)/.+(;\s*.+=.+)*','i'))"/>
		</ctl:code>
	</ctl:function>	

	
</ctl:package>