<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:sosFunctions="http://www.opengis.net/sos/2.0"	
	xmlns:owsTests="http://www.opengis.net/ows/1.1"
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:fes="http://www.opengis.net/fes/2.0"
	xmlns:gml="http://www.opengis.net/gml/3.2" 
	xmlns:om="http://www.opengis.net/om/2.0"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:soap11="http://schemas.xmlsoap.org/soap/" 
	xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 	
	xmlns:sos="http://www.opengis.net/sos/2.0"	
	xmlns:swe="http://www.opengis.net/swe/2.0"	
	xmlns:swes="http://www.opengis.net/swes/2.0"	
	xmlns:wsa="http://www.w3.org/2005/08/addressing"	
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:parsers="http://www.occamlab.com/te/parsers"
>
	<ctl:suite name="sos:suite">
		<ctl:title>SOS 2.0 Compliance Test Suite</ctl:title>
		<ctl:description>Verifies that an SOS 2.0 implementation complies with a given conformance class.</ctl:description>
		<ctl:link></ctl:link>		
		<ctl:starting-test>sos:Main</ctl:starting-test>
	</ctl:suite>

	<ctl:test name="sos:Main">
		<ctl:assertion>The IUT satisfies all applicable assertions.</ctl:assertion>
		<ctl:code>
			<!-- User Input Form -->
			<xsl:variable name="form-values">
				<ctl:form height="750" width="1024">
					<body>
						<h2 align="center">Compliance test suite for Sensor Observation Service (SOS) 2.0</h2>
						<h3 align="center">Service metadata and test options</h3>
						<p>Please provide a URL from which a capabilities document can be retrieved. </p>
						<p>Modify the URL template below to specify the location of an OGC SOS implementation under test.</p>	
						<blockquote>
							<table border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr>
									<td align="left">Service URL:</td>                        
									<td align="center">
										<input name="service-url" size="128" 
										type="text" 
										value="http://sensorweb.demo.52north.org/52nSOSv4.0.0/sos/kvp"/>
									</td>
								</tr>				
							</table>
						</blockquote>
						<p>Please select how tho send this request.</p>
						<blockquote>
							<table border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr>
									<td><input type="radio" name="request-via" checked="true" value="GET">HTTP Get</input></td>
									<td><input type="radio" name="request-via" value="POST">HTTP Post</input></td>
									<td><input type="radio" name="request-via" value="SOAP">SOAP Binding</input></td>
								</tr>				
							</table>						
						</blockquote>
						<p>Please select whether to run all tests or just selected tests.</p>
						<blockquote>
							<table border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr>
									<td><input type="radio" name="which-tests" checked="true" value="all">Run all tests</input></td>
									<td><input type="radio" name="which-tests" value="selected">Run selected tests</input></td>
								</tr>				
							</table>						
						</blockquote>
						<p>If you want to run selected tests, please select the checkboxes for the tests you want to run.</p>
						<blockquote>
							<table border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr><th colspan="3" align="left"><input type="checkbox" name="01">01.OWS Main</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0101">01.01.OWS.ContentType.1</input></td>
									<td><input type="checkbox" name="0102">01.02.OWS.GetCapabilities-Exceptions.2</input></td>
									<td><input type="checkbox" name="0103">01.03.OWS.GetCapabilities-UpdateSequence.1</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0104">01.04.OWS.GetCapabilities-Exceptions.5</input></td>
									<td><input type="checkbox" name="0105">01.05.OWS.CaseInsensitiveKvpNames.1</input></td>
									<td><input type="checkbox" name="0106">01.06.OWS.GetCapabilities-AcceptVersions.1</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0107">01.07.OWS.GetCapabilities-AcceptVersions.2</input></td>
									<td><input type="checkbox" name="0108">01.08.OWS.GetCapabilities-AcceptVersions.3</input></td>
									<td><input type="checkbox" name="0109">01.09.OWS.GetCapabilities-Sections.1</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0110">01.10.OWS.GetCapabilities-Sections.2</input></td>
									<td><input type="checkbox" name="0111">01.11.OWS.GetCapabilities-AcceptFormats.1</input></td>
									<td>--</td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="02">02.SOS General Main</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0201">02.01.SOS.General-InvalidRequest.1</input></td>
									<td>--</td>
									<td>--</td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="03">03.SOS Core: Get Capabilities</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0301">03.01.CorrectServiceParameter</input></td>
									<td><input type="checkbox" name="0302">03.02.OperationMetadataMandatory</input></td>
									<td><input type="checkbox" name="0303">03.03.RequiredSectionsInCapabilities</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0304">03.04.WrongSectionParameter</input></td>
									<td><input type="checkbox" name="0305">03.05.BBOX</input></td>
									<td><input type="checkbox" name="0306">03.06.OperatorDuringAndTEquals</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0307">03.07.ParametersInObservationOffering</input></td>
									<td><input type="checkbox" name="0308">03.08.ResponseFormat</input></td>
									<td><input type="checkbox" name="0309">03.09.InsertionCapabilities</input></td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="04">04.SOS Core: DescribeSensor</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0401">04.01.RequestNoService</input></td>
									<td><input type="checkbox" name="0402">04.02.RequestNullService</input></td>
									<td><input type="checkbox" name="0403">04.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0404">04.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="0405">04.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="0406">04.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0407">04.07.RequestNullProcedure</input></td>
									<td><input type="checkbox" name="0408">04.08.RequestInvalidProcedure</input></td>
									<td><input type="checkbox" name="0409">04.09.RequestNullProcedureDescriptionFormat</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0410">04.10.RequestInvalidProcedureDescriptionFormat</input></td>
									<td><input type="checkbox" name="0411">04.11.RequestValidRequest</input></td>
									<td>--</td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="05">05.SOS Core: GetObservation</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0501">05.01.RequestNoService</input></td>
									<td><input type="checkbox" name="0502">05.02.RequestNullService</input></td>
									<td><input type="checkbox" name="0503">05.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0504">05.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="0505">05.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="0506">05.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0507">05.07.RequestNullOffering</input></td>
									<td><input type="checkbox" name="0508">05.08.RequestInvalidOffering</input></td>
									<td><input type="checkbox" name="0509">05.09.RequestNullObservedProperty</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0510">05.10.RequestInvalidObservedProperty</input></td>
									<td><input type="checkbox" name="0511">05.11.RequestNullProcedure</input></td>
									<td><input type="checkbox" name="0512">05.12.RequestInvalidProcedure</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0513">05.13.RequestNullFeatureOfInterest</input></td>
									<td><input type="checkbox" name="0514">05.14.RequestInvalidFeatureOfInterest</input></td>
									<td><input type="checkbox" name="0515">05.15.RequestNullResponseFormat</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0516">05.16.RequestInvalidResponseFormat</input></td>
									<td><input type="checkbox" name="0517">05.17.RequestNoResponseFormat</input></td>
									<td><input type="checkbox" name="0518">05.18.RequestOtherResponseFormat</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0519">05.19.RequestEmptyObservation</input></td>
									<td><input type="checkbox" name="0520">05.20.RequestResponseExceedsSizeLimit</input></td>
									<td>--</td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="06">06.SOS enhancedOperations: GetFeatureOfInterest</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0601">06.01.RequestNoService</input></td>
									<td><input type="checkbox" name="0602">06.02.RequestNullService</input></td>
									<td><input type="checkbox" name="0603">06.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0604">06.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="0605">06.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="0606">06.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0607">06.07.RequestNullProcedure</input></td>
									<td><input type="checkbox" name="0608">06.08.RequestInvalidProcedure</input></td>
									<td><input type="checkbox" name="0609">06.09.RequestNullObservedProperty</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0610">06.10.RequestInvalidObservedProperty</input></td>
									<td><input type="checkbox" name="0611">06.11.RequestNullFeatureOfInterest</input></td>
									<td><input type="checkbox" name="0612">06.12.RequestInvalidFeatureOfInterest</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0613">06.13.RequestNULLSpatialFilter</input></td>
									<td><input type="checkbox" name="0614">06.14.RequestInvalidSpatialFilter</input></td>
									<td><input type="checkbox" name="0615">06.15.RequestEmptyResponse</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0616">06.16.RequestValidParameter</input></td>
									<td><input type="checkbox" name="0617">06.17.RequestValidFilter</input></td>
									<td><input type="checkbox" name="0618">06.18.RequestNormalRequest</input></td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="07">07.SOS enhancedOperations: GetObservationById</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0701">07.01.RequestNoService</input></td>
									<td><input type="checkbox" name="0702">07.02.RequestNullService</input></td>
									<td><input type="checkbox" name="0703">07.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0704">07.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="0705">07.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="0706">07.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0707">07.07.RequestNullobservation</input></td>
									<td><input type="checkbox" name="0708">07.08.RequestInvalidobservation</input></td>
									<td><input type="checkbox" name="0709">07.09.RequestValidRequest</input></td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="08">08.SOS Transactional: InsertSensor</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0801">08.01.RequestNoService</input></td>
									<td><input type="checkbox" name="0802">08.02.RequestNullService</input></td>
									<td><input type="checkbox" name="0803">08.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0804">08.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="0805">08.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="0806">08.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0807">08.07.RequestNullprocedureDescriptionFormat</input></td>
									<td><input type="checkbox" name="0808">08.08.RequestInvalidprocedureDescriptionFormat</input></td>
									<td><input type="checkbox" name="0809">08.09.RequestNullfeatureOfInterestType</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0810">08.10.RequestInvalidfeatureOfInterestType</input></td>
									<td><input type="checkbox" name="0811">08.11.RequestNullobservationType</input></td>
									<td><input type="checkbox" name="0812">08.12.RequestInvalidobservationType</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0813">08.13.RequestValidRequest</input></td>
									<td>--</td>
									<td>--</td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="09">09.SOS Transactional: DeleteSensor</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0901">09.01.RequestNoService</input></td>
									<td><input type="checkbox" name="0902">09.02.RequestNullService</input></td>
									<td><input type="checkbox" name="0903">09.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0904">09.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="0905">09.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="0906">09.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0907">09.07.RequestNullProcedure</input></td>
									<td><input type="checkbox" name="0908">09.08.RequestInvalidProcedure</input></td>
									<td><input type="checkbox" name="0909">09.09.RequestValidRequest</input></td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="10">10.SOS Transactional: InsertObservation</input></th></tr>
								<tr>
									<td><input type="checkbox" name="1001">10.01.RequestNoService</input></td>
									<td><input type="checkbox" name="1002">10.02.RequestNullService</input></td>
									<td><input type="checkbox" name="1003">10.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1004">10.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="1005">10.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="1006">10.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1007">10.07.RequestNulloffering</input></td>
									<td><input type="checkbox" name="1008">10.08.RequestInvalidoffering</input></td>
									<td><input type="checkbox" name="1009">10.09.RequestNullobservationtype</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1010">10.10.RequestInvalidobservationtype</input></td>
									<td><input type="checkbox" name="1011">10.11.RequestNullprocedure</input></td>
									<td><input type="checkbox" name="1012">10.12.RequestInvalidprocedure</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1013">10.13.RequestNullobservedProperty</input></td>
									<td><input type="checkbox" name="1014">10.14.RequestInvalidobservedProperty</input></td>
									<td><input type="checkbox" name="1015">10.15.RequestNullfeatureOfInterest</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1016">10.16.RequestInvalidfeatureOfInterest</input></td>
									<td><input type="checkbox" name="1017">10.17.RequestNullresulttype</input></td>
									<td><input type="checkbox" name="1018">10.18.RequestInvalidresulttype</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1019">10.19.RequestValidRequest</input></td>
									<td>--</td>
									<td>--</td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="11">11.SOS resultHandling: InsertResultTemplate</input></th></tr>
								<tr>
									<td><input type="checkbox" name="1101">11.01.RequestNoService</input></td>
									<td><input type="checkbox" name="1102">11.02.RequestNullService</input></td>
									<td><input type="checkbox" name="1103">11.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1104">11.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="1105">11.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="1106">11.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1107">11.07.RequestInvalidobservationType</input></td>
									<td><input type="checkbox" name="1108">11.08.RequestInvalidproposedTemplate</input></td>
									<td><input type="checkbox" name="1109">11.09.RequestValidRequest</input></td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="12">12.SOS resultHandling: InsertResult</input></th></tr>
								<tr>
									<td><input type="checkbox" name="1201">12.01.RequestNoService</input></td>
									<td><input type="checkbox" name="1202">12.02.RequestNullService</input></td>
									<td><input type="checkbox" name="1203">12.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1204">12.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="1205">12.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="1206">12.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1207">12.07.RequestNulltemplate</input></td>
									<td><input type="checkbox" name="1208">12.08.RequestInvalidtemplate</input></td>
									<td><input type="checkbox" name="1209">12.09.RequestNullresultValues</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1210">12.10.RequestInvalidresultValues</input></td>
									<td><input type="checkbox" name="1211">12.11.RequestValidRequest</input></td>
									<td>--</td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="13">13.SOS resultRetrieval: GetResultTemplate</input></th></tr>
								<tr>
									<td><input type="checkbox" name="1301">13.01.RequestNoService</input></td>
									<td><input type="checkbox" name="1302">13.02.RequestNullService</input></td>
									<td><input type="checkbox" name="1303">13.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1304">13.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="1305">13.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="1306">13.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1307">13.07.RequestNulloffering</input></td>
									<td><input type="checkbox" name="1308">13.08.RequestInvalidoffering</input></td>
									<td><input type="checkbox" name="1309">13.09.RequestNullobservedProperty</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1310">13.10.RequestInvalidobservedProperty</input></td>
									<td><input type="checkbox" name="1311">13.11.RequestValidRequest</input></td>
									<td>--</td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="14">14.SOS resultRetrieval: GetResult</input></th></tr>
								<tr>
									<td><input type="checkbox" name="1401">14.01.RequestNoService</input></td>
									<td><input type="checkbox" name="1402">14.02.RequestNullService</input></td>
									<td><input type="checkbox" name="1403">14.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1404">14.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="1405">14.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="1406">14.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1407">14.07.RequestNulloffering</input></td>
									<td><input type="checkbox" name="1408">14.08.RequestInvalidoffering</input></td>
									<td><input type="checkbox" name="1409">14.09.RequestNullobservedProperty</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="1410">14.10.RequestInvalidobservedProperty</input></td>
									<td><input type="checkbox" name="1411">14.11.RequestValidRequest</input></td>
									<td><input type="checkbox" name="1412">14.12.RequestEmptyResponse</input></td>
								</tr>
							</table>						
						</blockquote>

						<p>Please press the "Start" button to start testing.</p>
						<div align="center">
							<input type="submit" value="Start"/>						
						</div>
					</body>
				</ctl:form>
			</xsl:variable>

			<!-- Get user input, message user options -->	
			<xsl:variable name="capabilities-url" select="$form-values/values/value[@key='service-url']"/>
			<ctl:message select="concat('capabilities-url: ',$capabilities-url)"/>
			<xsl:variable name="request-via" select="$form-values/values/value[@key='request-via']"/>
			<ctl:message select="concat('request-via: ',$request-via)"/>
			<xsl:variable name="which-tests" select="$form-values/values/value[@key='which-tests']"/>
			<ctl:message select="concat('which tests: ',$which-tests)"/>
			<xsl:variable name="isSOAP" select="($request-via eq 'SOAP')"/>
			<ctl:message select="concat('Is SOAP Binding: ',$isSOAP)"/>
			<!-- Get capabilities, find url and method(GET or POST) for all operations -->
			<xsl:variable name="user-capabilities">
				<xsl:if test="($request-via eq 'GET')">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$capabilities-url"/>
						</ctl:url>
						<ctl:method>get</ctl:method>
						<ctl:param name="request">GetCapabilities</ctl:param>
					</ctl:request>
				</xsl:if>
				<xsl:if test="($request-via eq 'POST')">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$capabilities-url" />
						</ctl:url>
						<ctl:method>post</ctl:method>
						<ctl:body>
							<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
								http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"/>
						</ctl:body>
					</ctl:request>
				</xsl:if>
				<xsl:if test="($request-via eq 'SOAP')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$capabilities-url"/>
						</ctl:url>
						<ctl:body>
							<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
								http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetCapabilities>
						</ctl:body>
						<ctl:call-function name="sosFunctions:validateGetCapabilitiesResponseSOAP" />
					</ctl:soap-request>
				</xsl:if>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="not($user-capabilities/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<!-- Set Operations's URL -->
					<!-- GetCapabilities parameters -->
					<xsl:variable name="IsGetCapabilities-GET" select="count($user-capabilities//ows:Operation[@name='GetCapabilities']//ows:Get) > 0" />
					<xsl:variable name="GetCapabilities-URL">
						<xsl:if test="$IsGetCapabilities-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetCapabilities']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsGetCapabilities-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetCapabilities']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<!-- DescribeSensor parameters -->
					<xsl:variable name="IsDescribeSensor-GET" select="count($user-capabilities//ows:Operation[@name='DescribeSensor']//ows:Get) > 0" />
					<xsl:variable name="DescribeSensor-URL">
						<xsl:if test="$IsDescribeSensor-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='DescribeSensor']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsDescribeSensor-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='DescribeSensor']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<!-- GetObservation parameters -->
					<xsl:variable name="IsGetObservation-GET" select="count($user-capabilities//ows:Operation[@name='GetObservation']//ows:Get) > 0" />
					<xsl:variable name="GetObservation-URL">
						<xsl:if test="$IsGetObservation-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetObservation']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsGetObservation-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetObservation']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<!-- GetFeatureOfInterest parameters -->
					<xsl:variable name="hasGetFeatureOfInterest" select="count($user-capabilities//ows:Operation[@name='GetFeatureOfInterest']) > 0" />
					<xsl:variable name="IsGetFeatureOfInterest-GET" select="count($user-capabilities//ows:Operation[@name='GetFeatureOfInterest']//ows:Get) > 0" />
					<xsl:variable name="GetFeatureOfInterest-URL">
						<xsl:if test="$IsGetFeatureOfInterest-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetFeatureOfInterest']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsGetFeatureOfInterest-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetFeatureOfInterest']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<!-- GetObservationById parameters -->
					<xsl:variable name="hasGetObservationById" select="count($user-capabilities//ows:Operation[@name='GetObservationById']) > 0" />
					<xsl:variable name="IsGetObservationById-GET" select="count($user-capabilities//ows:Operation[@name='GetObservationById']//ows:Get) > 0" />
					<xsl:variable name="GetObservationById-URL">
						<xsl:if test="$IsGetObservationById-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetObservationById']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsGetObservationById-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetObservationById']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<!-- InsertSensor parameters -->
					<xsl:variable name="hasInsertSensor" select="count($user-capabilities//ows:Operation[@name='InsertSensor']) > 0" />
					<xsl:variable name="IsInsertSensor-POST" select="count($user-capabilities//ows:Operation[@name='InsertSensor']//ows:POST) > 0" />
					<xsl:if test="hasInsertSensor and not($IsInsertSensor-POST)">
						<ctl:message>FAILURE: If InsertSensor Operation is supported by service, the InsertSensor operation must support Http-post .</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<xsl:variable name="InsertSensor-URL">
						<xsl:value-of select="$user-capabilities//ows:Operation[@name='InsertSensor']//ows:POST/@xlink:href"/>
					</xsl:variable>
					
					<!-- DeleteSensor parameters -->
					<xsl:variable name="hasDeleteSensor" select="count($user-capabilities//ows:Operation[@name='DeleteSensor']) > 0" />
					<xsl:variable name="IsDeleteSensor-POST" select="count($user-capabilities//ows:Operation[@name='DeleteSensor']//ows:POST) > 0" />
					<xsl:if test="hasDeleteSensor and not($IsDeleteSensor-POST)">
						<ctl:message>FAILURE: If DeleteSensor Operation is supported by service, the DeleteSensor operation must support Http-post .</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<xsl:variable name="DeleteSensor-URL">
						<xsl:value-of select="$user-capabilities//ows:Operation[@name='DeleteSensor']//ows:POST/@xlink:href"/>
					</xsl:variable>
					
					<!-- InsertObservation parameters -->
					<xsl:variable name="hasInsertObservation" select="count($user-capabilities//ows:Operation[@name='InsertObservation']) > 0" />
					<xsl:variable name="IsInsertObservation-POST" select="count($user-capabilities//ows:Operation[@name='InsertObservation']//ows:POST) > 0" />
					<xsl:if test="hasInsertObservation and not($IsInsertObservation-POST)">
						<ctl:message>FAILURE: If InsertObservation Operation is supported by service, the InsertObservation operation must support Http-post .</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<xsl:variable name="InsertObservation-URL">
						<xsl:value-of select="$user-capabilities//ows:Operation[@name='InsertObservation']//ows:POST/@xlink:href"/>
					</xsl:variable>
		
					<!-- InsertResultTemplate parameters -->
					<xsl:variable name="hasInsertResultTemplate" select="count($user-capabilities//ows:Operation[@name='InsertResultTemplate']) > 0" />
					<xsl:variable name="IsInsertResultTemplate-POST" select="count($user-capabilities//ows:Operation[@name='InsertResultTemplate']//ows:POST) > 0" />
					<xsl:if test="hasInsertResultTemplate and not($IsInsertResultTemplate-POST)">
						<ctl:message>FAILURE: If InsertResultTemplate Operation is supported by service, the InsertResultTemplate operation must support Http-post .</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<xsl:variable name="InsertResultTemplate-URL">
						<xsl:value-of select="$user-capabilities//ows:Operation[@name='InsertResultTemplate']//ows:POST/@xlink:href"/>
					</xsl:variable>
					
					<!-- InsertResult parameters -->
					<xsl:variable name="hasInsertResult" select="count($user-capabilities//ows:Operation[@name='InsertResult']) > 0" />
					<xsl:variable name="IsInsertResult-POST" select="count($user-capabilities//ows:Operation[@name='InsertResult']//ows:POST) > 0" />
					<xsl:if test="hasInsertResult and not($IsInsertResult-POST)">
						<ctl:message>FAILURE: If InsertResult Operation is supported by service, the InsertResult operation must support Http-post .</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<xsl:variable name="InsertResult-URL">
						<xsl:value-of select="$user-capabilities//ows:Operation[@name='InsertResult']//ows:POST/@xlink:href"/>
					</xsl:variable>
		
					<!-- GetResultTemplate parameters -->
					<xsl:variable name="hasGetResultTemplate" select="count($user-capabilities//ows:Operation[@name='GetResultTemplate']) > 0" />
					<xsl:variable name="IsGetResultTemplate-GET" select="count($user-capabilities//ows:Operation[@name='GetResultTemplate']//ows:Get) > 0" />
					<xsl:variable name="GetResultTemplate-URL">
						<xsl:if test="$IsGetResultTemplate-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetResultTemplate']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsGetResultTemplate-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetResultTemplate']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<!-- GetResult parameters -->
					<xsl:variable name="hasGetResult" select="count($user-capabilities//ows:Operation[@name='GetResult']) > 0" />
					<xsl:variable name="IsGetResult-GET" select="count($user-capabilities//ows:Operation[@name='GetResult']//ows:Get) > 0" />
					<xsl:variable name="GetResult-URL">
						<xsl:if test="$IsGetResult-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetResult']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsGetResult-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetResult']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<!-- Set selected tests.-->
					<xsl:variable name="t01" select="$form-values/values/value[@key='01']"/>
					<xsl:variable name="t0101" select="$form-values/values/value[@key='0101']"/>
					<xsl:variable name="test0101" select="($which-tests eq 'all' or $t01 eq 'on' or $t0101 eq 'on' )"/>
					<xsl:variable name="t0102" select="$form-values/values/value[@key='0102']"/>
					<xsl:variable name="test0102" select="($which-tests eq 'all' or $t01 eq 'on' or $t0102 eq 'on' )"/>
					<xsl:variable name="t0103" select="$form-values/values/value[@key='0103']"/>
					<xsl:variable name="test0103" select="($which-tests eq 'all' or $t01 eq 'on' or $t0103 eq 'on' )"/>
					<xsl:variable name="t0104" select="$form-values/values/value[@key='0104']"/>
					<xsl:variable name="test0104" select="($which-tests eq 'all' or $t01 eq 'on' or $t0104 eq 'on' )"/>
					<xsl:variable name="t0105" select="$form-values/values/value[@key='0105']"/>
					<xsl:variable name="test0105" select="($which-tests eq 'all' or $t01 eq 'on' or $t0105 eq 'on' )"/>
					<xsl:variable name="t0106" select="$form-values/values/value[@key='0106']"/>
					<xsl:variable name="test0106" select="($which-tests eq 'all' or $t01 eq 'on' or $t0106 eq 'on' )"/>
					<xsl:variable name="t0107" select="$form-values/values/value[@key='0107']"/>
					<xsl:variable name="test0107" select="($which-tests eq 'all' or $t01 eq 'on' or $t0107 eq 'on' )"/>
					<xsl:variable name="t0108" select="$form-values/values/value[@key='0108']"/>
					<xsl:variable name="test0108" select="($which-tests eq 'all' or $t01 eq 'on' or $t0108 eq 'on' )"/>
					<xsl:variable name="t0109" select="$form-values/values/value[@key='0109']"/>
					<xsl:variable name="test0109" select="($which-tests eq 'all' or $t01 eq 'on' or $t0109 eq 'on' )"/>
					<xsl:variable name="t0110" select="$form-values/values/value[@key='0110']"/>
					<xsl:variable name="test0110" select="($which-tests eq 'all' or $t01 eq 'on' or $t0110 eq 'on' )"/>
					<xsl:variable name="t0111" select="$form-values/values/value[@key='0111']"/>
					<xsl:variable name="test0111" select="($which-tests eq 'all' or $t01 eq 'on' or $t0111 eq 'on' )"/>
					<xsl:variable name="test01" select="$test0101 or $test0102 or $test0103 or $test0104 or $test0105 or $test0106 or $test0107 or $test0108 or $test0109 or $test0110 or $test0111"/><!-- all test in 01-->
					
					<xsl:variable name="t02" select="$form-values/values/value[@key='02']"/>
					<xsl:variable name="t0201" select="$form-values/values/value[@key='0201']"/>
					<xsl:variable name="test0201" select="($which-tests eq 'all' or $t02 eq 'on' or $t0201 eq 'on')"/>
					<xsl:variable name="test02" select="$test0201"/><!-- all test in 02-->

					<xsl:variable name="t03" select="$form-values/values/value[@key='03']"/>
					<xsl:variable name="t0301" select="$form-values/values/value[@key='0301']"/>
					<xsl:variable name="test0301" select="($which-tests eq 'all' or $t03 eq 'on' or $t0301 eq 'on')"/>
					<xsl:variable name="t0302" select="$form-values/values/value[@key='0302']"/>
					<xsl:variable name="test0302" select="($which-tests eq 'all' or $t03 eq 'on' or $t0302 eq 'on')"/>
					<xsl:variable name="t0303" select="$form-values/values/value[@key='0303']"/>
					<xsl:variable name="test0303" select="($which-tests eq 'all' or $t03 eq 'on' or $t0303 eq 'on')"/>
					<xsl:variable name="t0304" select="$form-values/values/value[@key='0304']"/>
					<xsl:variable name="test0304" select="($which-tests eq 'all' or $t03 eq 'on' or $t0304 eq 'on')"/>
					<xsl:variable name="t0305" select="$form-values/values/value[@key='0305']"/>
					<xsl:variable name="test0305" select="($which-tests eq 'all' or $t03 eq 'on' or $t0305 eq 'on')"/>
					<xsl:variable name="t0306" select="$form-values/values/value[@key='0306']"/>
					<xsl:variable name="test0306" select="($which-tests eq 'all' or $t03 eq 'on' or $t0306 eq 'on')"/>
					<xsl:variable name="t0307" select="$form-values/values/value[@key='0307']"/>
					<xsl:variable name="test0307" select="($which-tests eq 'all' or $t03 eq 'on' or $t0307 eq 'on')"/>
					<xsl:variable name="t0308" select="$form-values/values/value[@key='0308']"/>
					<xsl:variable name="test0308" select="($which-tests eq 'all' or $t03 eq 'on' or $t0308 eq 'on')"/>
					<xsl:variable name="t0309" select="$form-values/values/value[@key='0309']"/>
					<xsl:variable name="test0309" select="($which-tests eq 'all' or $t03 eq 'on' or $t0309 eq 'on')"/>
					<xsl:variable name="test03" select="$test0301 or $test0302 or $test0303 or $test0304 or $test0305 or $test0306 or $test0307 or $test0308 or $test0309"/><!-- all test in 03-->

					<xsl:variable name="t04" select="$form-values/values/value[@key='04']"/>
					<xsl:variable name="t0401" select="$form-values/values/value[@key='0401']"/>
					<xsl:variable name="test0401" select="($which-tests eq 'all' or $t04 eq 'on' or $t0401 eq 'on')"/>
					<xsl:variable name="t0402" select="$form-values/values/value[@key='0402']"/>
					<xsl:variable name="test0402" select="($which-tests eq 'all' or $t04 eq 'on' or $t0402 eq 'on')"/>
					<xsl:variable name="t0403" select="$form-values/values/value[@key='0403']"/>
					<xsl:variable name="test0403" select="($which-tests eq 'all' or $t03 eq 'on' or $t0403 eq 'on')"/>
					<xsl:variable name="t0404" select="$form-values/values/value[@key='0404']"/>
					<xsl:variable name="test0404" select="($which-tests eq 'all' or $t04 eq 'on' or $t0404 eq 'on')"/>
					<xsl:variable name="t0405" select="$form-values/values/value[@key='0405']"/>
					<xsl:variable name="test0405" select="($which-tests eq 'all' or $t04 eq 'on' or $t0405 eq 'on')"/>
					<xsl:variable name="t0406" select="$form-values/values/value[@key='0406']"/>
					<xsl:variable name="test0406" select="($which-tests eq 'all' or $t04 eq 'on' or $t0406 eq 'on')"/>
					<xsl:variable name="t0407" select="$form-values/values/value[@key='0407']"/>
					<xsl:variable name="test0407" select="($which-tests eq 'all' or $t04 eq 'on' or $t0407 eq 'on')"/>
					<xsl:variable name="t0408" select="$form-values/values/value[@key='0408']"/>
					<xsl:variable name="test0408" select="($which-tests eq 'all' or $t04 eq 'on' or $t0408 eq 'on')"/>
					<xsl:variable name="t0409" select="$form-values/values/value[@key='0409']"/>
					<xsl:variable name="test0409" select="($which-tests eq 'all' or $t04 eq 'on' or $t0409 eq 'on')"/>
					<xsl:variable name="t0410" select="$form-values/values/value[@key='0410']"/>
					<xsl:variable name="test0410" select="($which-tests eq 'all' or $t04 eq 'on' or $t0410 eq 'on')"/>
					<xsl:variable name="t0411" select="$form-values/values/value[@key='0411']"/>
					<xsl:variable name="test0411" select="($which-tests eq 'all' or $t04 eq 'on' or $t0411 eq 'on')"/>
					<xsl:variable name="test04" select="$test0401 or $test0402 or $test0403 or $test0404 or $test0405 or $test0406 or $test0407 or $test0408 or $test0409 or $test0410 or $test0411"/><!-- all test in 04-->
					
					<xsl:variable name="t05" select="$form-values/values/value[@key='05']"/>
					<xsl:variable name="t0501" select="$form-values/values/value[@key='0501']"/>
					<xsl:variable name="test0501" select="($which-tests eq 'all' or $t05 eq 'on' or $t0501 eq 'on')"/>
					<xsl:variable name="t0502" select="$form-values/values/value[@key='0502']"/>
					<xsl:variable name="test0502" select="($which-tests eq 'all' or $t05 eq 'on' or $t0502 eq 'on')"/>
					<xsl:variable name="t0503" select="$form-values/values/value[@key='0503']"/>
					<xsl:variable name="test0503" select="($which-tests eq 'all' or $t05 eq 'on' or $t0503 eq 'on')"/>
					<xsl:variable name="t0504" select="$form-values/values/value[@key='0504']"/>
					<xsl:variable name="test0504" select="($which-tests eq 'all' or $t05 eq 'on' or $t0504 eq 'on')"/>
					<xsl:variable name="t0505" select="$form-values/values/value[@key='0505']"/>
					<xsl:variable name="test0505" select="($which-tests eq 'all' or $t05 eq 'on' or $t0505 eq 'on')"/>
					<xsl:variable name="t0506" select="$form-values/values/value[@key='0506']"/>
					<xsl:variable name="test0506" select="($which-tests eq 'all' or $t05 eq 'on' or $t0506 eq 'on')"/>
					<xsl:variable name="t0507" select="$form-values/values/value[@key='0507']"/>
					<xsl:variable name="test0507" select="($which-tests eq 'all' or $t05 eq 'on' or $t0507 eq 'on')"/>
					<xsl:variable name="t0508" select="$form-values/values/value[@key='0508']"/>
					<xsl:variable name="test0508" select="($which-tests eq 'all' or $t05 eq 'on' or $t0508 eq 'on')"/>
					<xsl:variable name="t0509" select="$form-values/values/value[@key='0509']"/>
					<xsl:variable name="test0509" select="($which-tests eq 'all' or $t05 eq 'on' or $t0509 eq 'on')"/>
					<xsl:variable name="t0510" select="$form-values/values/value[@key='0510']"/>
					<xsl:variable name="test0510" select="($which-tests eq 'all' or $t05 eq 'on' or $t0510 eq 'on')"/>
					<xsl:variable name="t0511" select="$form-values/values/value[@key='0511']"/>
					<xsl:variable name="test0511" select="($which-tests eq 'all' or $t05 eq 'on' or $t0511 eq 'on')"/>
					<xsl:variable name="t0512" select="$form-values/values/value[@key='0512']"/>
					<xsl:variable name="test0512" select="($which-tests eq 'all' or $t05 eq 'on' or $t0512 eq 'on')"/>
					<xsl:variable name="t0513" select="$form-values/values/value[@key='0513']"/>
					<xsl:variable name="test0513" select="($which-tests eq 'all' or $t05 eq 'on' or $t0513 eq 'on')"/>
					<xsl:variable name="t0514" select="$form-values/values/value[@key='0514']"/>
					<xsl:variable name="test0514" select="($which-tests eq 'all' or $t05 eq 'on' or $t0514 eq 'on')"/>
					<xsl:variable name="t0515" select="$form-values/values/value[@key='0515']"/>
					<xsl:variable name="test0515" select="($which-tests eq 'all' or $t05 eq 'on' or $t0515 eq 'on')"/>
					<xsl:variable name="t0516" select="$form-values/values/value[@key='0516']"/>
					<xsl:variable name="test0516" select="($which-tests eq 'all' or $t05 eq 'on' or $t0516 eq 'on')"/>
					<xsl:variable name="t0517" select="$form-values/values/value[@key='0517']"/>
					<xsl:variable name="test0517" select="($which-tests eq 'all' or $t05 eq 'on' or $t0517 eq 'on')"/>
					<xsl:variable name="t0518" select="$form-values/values/value[@key='0518']"/>
					<xsl:variable name="test0518" select="($which-tests eq 'all' or $t05 eq 'on' or $t0518 eq 'on')"/>
					<xsl:variable name="t0519" select="$form-values/values/value[@key='0519']"/>
					<xsl:variable name="test0519" select="($which-tests eq 'all' or $t05 eq 'on' or $t0519 eq 'on')"/>
					<xsl:variable name="t0520" select="$form-values/values/value[@key='0520']"/>
					<xsl:variable name="test0520" select="($which-tests eq 'all' or $t05 eq 'on' or $t0520 eq 'on')"/>
					<xsl:variable name="test05" select="$test0501 or $test0502 or $test0503 or $test0504 or $test0505 or $test0506 or $test0507 or $test0508 or $test0509 or $test0510 or $test0511 or $test0512 or $test0513 or $test0514 or $test0515 or $test0516 or $test0517 or $test0518 or $test0519 or $test0520"/><!-- all test in 05-->

					<xsl:variable name="t06" select="$form-values/values/value[@key='06']"/>
					<xsl:variable name="t0601" select="$form-values/values/value[@key='0601']"/>
					<xsl:variable name="test0601" select="($which-tests eq 'all' or $t06 eq 'on' or $t0601 eq 'on')"/>
					<xsl:variable name="t0602" select="$form-values/values/value[@key='0602']"/>
					<xsl:variable name="test0602" select="($which-tests eq 'all' or $t06 eq 'on' or $t0602 eq 'on')"/>
					<xsl:variable name="t0603" select="$form-values/values/value[@key='0603']"/>
					<xsl:variable name="test0603" select="($which-tests eq 'all' or $t06 eq 'on' or $t0603 eq 'on')"/>
					<xsl:variable name="t0604" select="$form-values/values/value[@key='0604']"/>
					<xsl:variable name="test0604" select="($which-tests eq 'all' or $t06 eq 'on' or $t0604 eq 'on')"/>
					<xsl:variable name="t0605" select="$form-values/values/value[@key='0605']"/>
					<xsl:variable name="test0605" select="($which-tests eq 'all' or $t06 eq 'on' or $t0605 eq 'on')"/>
					<xsl:variable name="t0606" select="$form-values/values/value[@key='0606']"/>
					<xsl:variable name="test0606" select="($which-tests eq 'all' or $t06 eq 'on' or $t0606 eq 'on')"/>
					<xsl:variable name="t0607" select="$form-values/values/value[@key='0607']"/>
					<xsl:variable name="test0607" select="($which-tests eq 'all' or $t06 eq 'on' or $t0607 eq 'on')"/>
					<xsl:variable name="t0608" select="$form-values/values/value[@key='0608']"/>
					<xsl:variable name="test0608" select="($which-tests eq 'all' or $t06 eq 'on' or $t0608 eq 'on')"/>
					<xsl:variable name="t0609" select="$form-values/values/value[@key='0609']"/>
					<xsl:variable name="test0609" select="($which-tests eq 'all' or $t06 eq 'on' or $t0609 eq 'on')"/>
					<xsl:variable name="t0610" select="$form-values/values/value[@key='0610']"/>
					<xsl:variable name="test0610" select="($which-tests eq 'all' or $t06 eq 'on' or $t0610 eq 'on')"/>
					<xsl:variable name="t0611" select="$form-values/values/value[@key='0611']"/>
					<xsl:variable name="test0611" select="($which-tests eq 'all' or $t06 eq 'on' or $t0611 eq 'on')"/>
					<xsl:variable name="t0612" select="$form-values/values/value[@key='0612']"/>
					<xsl:variable name="test0612" select="($which-tests eq 'all' or $t06 eq 'on' or $t0612 eq 'on')"/>
					<xsl:variable name="t0613" select="$form-values/values/value[@key='0613']"/>
					<xsl:variable name="test0613" select="($which-tests eq 'all' or $t06 eq 'on' or $t0613 eq 'on')"/>
					<xsl:variable name="t0614" select="$form-values/values/value[@key='0614']"/>
					<xsl:variable name="test0614" select="($which-tests eq 'all' or $t06 eq 'on' or $t0614 eq 'on')"/>
					<xsl:variable name="t0615" select="$form-values/values/value[@key='0615']"/>
					<xsl:variable name="test0615" select="($which-tests eq 'all' or $t06 eq 'on' or $t0615 eq 'on')"/>
					<xsl:variable name="test06" select="$test0601 or $test0602 or $test0603 or $test0604 or $test0605 or $test0606 or $test0607 or $test0608 or $test0609 or $test0610 or $test0611 or $test0612 or $test0613 or $test0614 or $test0615"/><!-- all test in 06-->

					<xsl:variable name="t07" select="$form-values/values/value[@key='07']"/>
					<xsl:variable name="t0701" select="$form-values/values/value[@key='0701']"/>
					<xsl:variable name="test0701" select="($which-tests eq 'all' or $t07 eq 'on' or $t0701 eq 'on')"/>
					<xsl:variable name="t0702" select="$form-values/values/value[@key='0702']"/>
					<xsl:variable name="test0702" select="($which-tests eq 'all' or $t07 eq 'on' or $t0702 eq 'on')"/>
					<xsl:variable name="t0703" select="$form-values/values/value[@key='0703']"/>
					<xsl:variable name="test0703" select="($which-tests eq 'all' or $t07 eq 'on' or $t0703 eq 'on')"/>
					<xsl:variable name="t0704" select="$form-values/values/value[@key='0704']"/>
					<xsl:variable name="test0704" select="($which-tests eq 'all' or $t07 eq 'on' or $t0704 eq 'on')"/>
					<xsl:variable name="t0705" select="$form-values/values/value[@key='0705']"/>
					<xsl:variable name="test0705" select="($which-tests eq 'all' or $t07 eq 'on' or $t0705 eq 'on')"/>
					<xsl:variable name="t0706" select="$form-values/values/value[@key='0706']"/>
					<xsl:variable name="test0706" select="($which-tests eq 'all' or $t07 eq 'on' or $t0706 eq 'on')"/>
					<xsl:variable name="t0707" select="$form-values/values/value[@key='0707']"/>
					<xsl:variable name="test0707" select="($which-tests eq 'all' or $t07 eq 'on' or $t0707 eq 'on')"/>
					<xsl:variable name="t0708" select="$form-values/values/value[@key='0708']"/>
					<xsl:variable name="test0708" select="($which-tests eq 'all' or $t07 eq 'on' or $t0708 eq 'on')"/>
					<xsl:variable name="t0709" select="$form-values/values/value[@key='0709']"/>
					<xsl:variable name="test0709" select="($which-tests eq 'all' or $t07 eq 'on' or $t0709 eq 'on')"/>
					<xsl:variable name="test07" select="$test0701 or $test0702 or $test0703 or $test0704 or $test0705 or $test0706 or $test0707 or $test0708 or $test0709"/><!-- all test in 07-->
					
					<xsl:variable name="t08" select="$form-values/values/value[@key='08']"/>
					<xsl:variable name="t0801" select="$form-values/values/value[@key='0801']"/>
					<xsl:variable name="test0801" select="($which-tests eq 'all' or $t08 eq 'on' or $t0801 eq 'on')"/>
					<xsl:variable name="t0802" select="$form-values/values/value[@key='0802']"/>
					<xsl:variable name="test0802" select="($which-tests eq 'all' or $t08 eq 'on' or $t0802 eq 'on')"/>
					<xsl:variable name="t0803" select="$form-values/values/value[@key='0803']"/>
					<xsl:variable name="test0803" select="($which-tests eq 'all' or $t08 eq 'on' or $t0803 eq 'on')"/>
					<xsl:variable name="t0804" select="$form-values/values/value[@key='0804']"/>
					<xsl:variable name="test0804" select="($which-tests eq 'all' or $t08 eq 'on' or $t0804 eq 'on')"/>
					<xsl:variable name="t0805" select="$form-values/values/value[@key='0805']"/>
					<xsl:variable name="test0805" select="($which-tests eq 'all' or $t08 eq 'on' or $t0805 eq 'on')"/>
					<xsl:variable name="t0806" select="$form-values/values/value[@key='0806']"/>
					<xsl:variable name="test0806" select="($which-tests eq 'all' or $t08 eq 'on' or $t0806 eq 'on')"/>
					<xsl:variable name="t0807" select="$form-values/values/value[@key='0807']"/>
					<xsl:variable name="test0807" select="($which-tests eq 'all' or $t08 eq 'on' or $t0807 eq 'on')"/>
					<xsl:variable name="t0808" select="$form-values/values/value[@key='0808']"/>
					<xsl:variable name="test0808" select="($which-tests eq 'all' or $t08 eq 'on' or $t0808 eq 'on')"/>
					<xsl:variable name="t0809" select="$form-values/values/value[@key='0809']"/>
					<xsl:variable name="test0809" select="($which-tests eq 'all' or $t08 eq 'on' or $t0809 eq 'on')"/>
					<xsl:variable name="t0810" select="$form-values/values/value[@key='0810']"/>
					<xsl:variable name="test0810" select="($which-tests eq 'all' or $t08 eq 'on' or $t0810 eq 'on')"/>
					<xsl:variable name="t0811" select="$form-values/values/value[@key='0811']"/>
					<xsl:variable name="test0811" select="($which-tests eq 'all' or $t08 eq 'on' or $t0811 eq 'on')"/>
					<xsl:variable name="t0812" select="$form-values/values/value[@key='0812']"/>
					<xsl:variable name="test0812" select="($which-tests eq 'all' or $t08 eq 'on' or $t0812 eq 'on')"/>
					<xsl:variable name="t0813" select="$form-values/values/value[@key='0813']"/>
					<xsl:variable name="test0813" select="($which-tests eq 'all' or $t08 eq 'on' or $t0813 eq 'on')"/>
					<xsl:variable name="test08" select="$test0801 or $test0802 or $test0803 or $test0804 or $test0805 or $test0806 or $test0807 or $test0808 or $test0809 or $test0810 or $test0811 or $test0812 or $test0813"/><!-- all test in 08-->
					
					<xsl:variable name="t09" select="$form-values/values/value[@key='09']"/>
					<xsl:variable name="t0901" select="$form-values/values/value[@key='0901']"/>
					<xsl:variable name="test0901" select="($which-tests eq 'all' or $t09 eq 'on' or $t0901 eq 'on')"/>
					<xsl:variable name="t0902" select="$form-values/values/value[@key='0902']"/>
					<xsl:variable name="test0902" select="($which-tests eq 'all' or $t09 eq 'on' or $t0902 eq 'on')"/>
					<xsl:variable name="t0903" select="$form-values/values/value[@key='0903']"/>
					<xsl:variable name="test0903" select="($which-tests eq 'all' or $t09 eq 'on' or $t0903 eq 'on')"/>
					<xsl:variable name="t0904" select="$form-values/values/value[@key='0904']"/>
					<xsl:variable name="test0904" select="($which-tests eq 'all' or $t09 eq 'on' or $t0904 eq 'on')"/>
					<xsl:variable name="t0905" select="$form-values/values/value[@key='0905']"/>
					<xsl:variable name="test0905" select="($which-tests eq 'all' or $t09 eq 'on' or $t0905 eq 'on')"/>
					<xsl:variable name="t0906" select="$form-values/values/value[@key='0906']"/>
					<xsl:variable name="test0906" select="($which-tests eq 'all' or $t09 eq 'on' or $t0906 eq 'on')"/>
					<xsl:variable name="t0907" select="$form-values/values/value[@key='0907']"/>
					<xsl:variable name="test0907" select="($which-tests eq 'all' or $t09 eq 'on' or $t0907 eq 'on')"/>
					<xsl:variable name="t0908" select="$form-values/values/value[@key='0908']"/>
					<xsl:variable name="test0908" select="($which-tests eq 'all' or $t09 eq 'on' or $t0908 eq 'on')"/>
					<xsl:variable name="t0909" select="$form-values/values/value[@key='0909']"/>
					<xsl:variable name="test0909" select="($which-tests eq 'all' or $t09 eq 'on' or $t0909 eq 'on')"/>
					<xsl:variable name="test09" select="$test0901 or $test0902 or $test0903 or $test0904 or $test0905 or $test0906 or $test0907 or $test0908 or $test0909"/><!-- all test in 09-->
					
					<xsl:variable name="t10" select="$form-values/values/value[@key='10']"/>
					<xsl:variable name="t1001" select="$form-values/values/value[@key='1001']"/>
					<xsl:variable name="test1001" select="($which-tests eq 'all' or $t10 eq 'on' or $t1001 eq 'on')"/>
					<xsl:variable name="t1002" select="$form-values/values/value[@key='1002']"/>
					<xsl:variable name="test1002" select="($which-tests eq 'all' or $t10 eq 'on' or $t1002 eq 'on')"/>
					<xsl:variable name="t1003" select="$form-values/values/value[@key='1003']"/>
					<xsl:variable name="test1003" select="($which-tests eq 'all' or $t10 eq 'on' or $t1003 eq 'on')"/>
					<xsl:variable name="t1004" select="$form-values/values/value[@key='1004']"/>
					<xsl:variable name="test1004" select="($which-tests eq 'all' or $t10 eq 'on' or $t1004 eq 'on')"/>
					<xsl:variable name="t1005" select="$form-values/values/value[@key='1005']"/>
					<xsl:variable name="test1005" select="($which-tests eq 'all' or $t10 eq 'on' or $t1005 eq 'on')"/>
					<xsl:variable name="t1006" select="$form-values/values/value[@key='1006']"/>
					<xsl:variable name="test1006" select="($which-tests eq 'all' or $t10 eq 'on' or $t1006 eq 'on')"/>
					<xsl:variable name="t1007" select="$form-values/values/value[@key='1007']"/>
					<xsl:variable name="test1007" select="($which-tests eq 'all' or $t10 eq 'on' or $t1007 eq 'on')"/>
					<xsl:variable name="t1008" select="$form-values/values/value[@key='1008']"/>
					<xsl:variable name="test1008" select="($which-tests eq 'all' or $t10 eq 'on' or $t1008 eq 'on')"/>
					<xsl:variable name="t1009" select="$form-values/values/value[@key='1009']"/>
					<xsl:variable name="test1009" select="($which-tests eq 'all' or $t10 eq 'on' or $t1009 eq 'on')"/>
					<xsl:variable name="t1010" select="$form-values/values/value[@key='1010']"/>
					<xsl:variable name="test1010" select="($which-tests eq 'all' or $t10 eq 'on' or $t1010 eq 'on')"/>
					<xsl:variable name="t1011" select="$form-values/values/value[@key='1011']"/>
					<xsl:variable name="test1011" select="($which-tests eq 'all' or $t10 eq 'on' or $t1011 eq 'on')"/>
					<xsl:variable name="t1012" select="$form-values/values/value[@key='1012']"/>
					<xsl:variable name="test1012" select="($which-tests eq 'all' or $t10 eq 'on' or $t1012 eq 'on')"/>
					<xsl:variable name="t1013" select="$form-values/values/value[@key='1013']"/>
					<xsl:variable name="test1013" select="($which-tests eq 'all' or $t10 eq 'on' or $t1013 eq 'on')"/>
					<xsl:variable name="t1014" select="$form-values/values/value[@key='1014']"/>
					<xsl:variable name="test1014" select="($which-tests eq 'all' or $t10 eq 'on' or $t1014 eq 'on')"/>
					<xsl:variable name="t1015" select="$form-values/values/value[@key='1015']"/>
					<xsl:variable name="test1015" select="($which-tests eq 'all' or $t10 eq 'on' or $t1015 eq 'on')"/>
					<xsl:variable name="t1016" select="$form-values/values/value[@key='1016']"/>
					<xsl:variable name="test1016" select="($which-tests eq 'all' or $t10 eq 'on' or $t1016 eq 'on')"/>
					<xsl:variable name="t1017" select="$form-values/values/value[@key='1017']"/>
					<xsl:variable name="test1017" select="($which-tests eq 'all' or $t10 eq 'on' or $t1017 eq 'on')"/>
					<xsl:variable name="t1018" select="$form-values/values/value[@key='1018']"/>
					<xsl:variable name="test1018" select="($which-tests eq 'all' or $t10 eq 'on' or $t1018 eq 'on')"/>
					<xsl:variable name="t1019" select="$form-values/values/value[@key='1019']"/>
					<xsl:variable name="test1019" select="($which-tests eq 'all' or $t10 eq 'on' or $t1019 eq 'on')"/>
					<xsl:variable name="test10" select="$test1001 or $test1002 or $test1003 or $test1004 or $test1005 or $test1006 or $test1007 or $test1008 or $test1009 or $test1010 or $test1011 or $test1012 or $test1013 or $test1014 or $test1015 or $test1016 or $test1017 or $test1018 or $test1019"/><!-- all test in 10-->
					
					<xsl:variable name="t11" select="$form-values/values/value[@key='11']"/>
					<xsl:variable name="t1101" select="$form-values/values/value[@key='1101']"/>
					<xsl:variable name="test1101" select="($which-tests eq 'all' or $t11 eq 'on' or $t1101 eq 'on')"/>
					<xsl:variable name="t1102" select="$form-values/values/value[@key='1102']"/>
					<xsl:variable name="test1102" select="($which-tests eq 'all' or $t11 eq 'on' or $t1102 eq 'on')"/>
					<xsl:variable name="t1103" select="$form-values/values/value[@key='1103']"/>
					<xsl:variable name="test1103" select="($which-tests eq 'all' or $t11 eq 'on' or $t1103 eq 'on')"/>
					<xsl:variable name="t1104" select="$form-values/values/value[@key='1104']"/>
					<xsl:variable name="test1104" select="($which-tests eq 'all' or $t11 eq 'on' or $t1104 eq 'on')"/>
					<xsl:variable name="t1105" select="$form-values/values/value[@key='1105']"/>
					<xsl:variable name="test1105" select="($which-tests eq 'all' or $t11 eq 'on' or $t1105 eq 'on')"/>
					<xsl:variable name="t1106" select="$form-values/values/value[@key='1106']"/>
					<xsl:variable name="test1106" select="($which-tests eq 'all' or $t11 eq 'on' or $t1106 eq 'on')"/>
					<xsl:variable name="t1107" select="$form-values/values/value[@key='1107']"/>
					<xsl:variable name="test1107" select="($which-tests eq 'all' or $t11 eq 'on' or $t1107 eq 'on')"/>
					<xsl:variable name="t1108" select="$form-values/values/value[@key='1108']"/>
					<xsl:variable name="test1108" select="($which-tests eq 'all' or $t11 eq 'on' or $t1108 eq 'on')"/>
					<xsl:variable name="t1109" select="$form-values/values/value[@key='1109']"/>
					<xsl:variable name="test1109" select="($which-tests eq 'all' or $t11 eq 'on' or $t1109 eq 'on')"/>
					<xsl:variable name="test11" select="$test1101 or $test1102 or $test1103 or $test1104 or $test1105 or $test1106 or $test1107 or $test1108 or $test1109"/><!-- all test in 11-->
					
					<xsl:variable name="t12" select="$form-values/values/value[@key='12']"/>
					<xsl:variable name="t1201" select="$form-values/values/value[@key='1201']"/>
					<xsl:variable name="test1201" select="($which-tests eq 'all' or $t12 eq 'on' or $t1201 eq 'on')"/>
					<xsl:variable name="t1202" select="$form-values/values/value[@key='1202']"/>
					<xsl:variable name="test1202" select="($which-tests eq 'all' or $t12 eq 'on' or $t1202 eq 'on')"/>
					<xsl:variable name="t1203" select="$form-values/values/value[@key='1203']"/>
					<xsl:variable name="test1203" select="($which-tests eq 'all' or $t12 eq 'on' or $t1203 eq 'on')"/>
					<xsl:variable name="t1204" select="$form-values/values/value[@key='1204']"/>
					<xsl:variable name="test1204" select="($which-tests eq 'all' or $t12 eq 'on' or $t1204 eq 'on')"/>
					<xsl:variable name="t1205" select="$form-values/values/value[@key='1205']"/>
					<xsl:variable name="test1205" select="($which-tests eq 'all' or $t12 eq 'on' or $t1205 eq 'on')"/>
					<xsl:variable name="t1206" select="$form-values/values/value[@key='1206']"/>
					<xsl:variable name="test1206" select="($which-tests eq 'all' or $t12 eq 'on' or $t1206 eq 'on')"/>
					<xsl:variable name="t1207" select="$form-values/values/value[@key='1207']"/>
					<xsl:variable name="test1207" select="($which-tests eq 'all' or $t12 eq 'on' or $t1207 eq 'on')"/>
					<xsl:variable name="t1208" select="$form-values/values/value[@key='1208']"/>
					<xsl:variable name="test1208" select="($which-tests eq 'all' or $t12 eq 'on' or $t1208 eq 'on')"/>
					<xsl:variable name="t1209" select="$form-values/values/value[@key='1209']"/>
					<xsl:variable name="test1209" select="($which-tests eq 'all' or $t12 eq 'on' or $t1209 eq 'on')"/>
					<xsl:variable name="t1210" select="$form-values/values/value[@key='1210']"/>
					<xsl:variable name="test1210" select="($which-tests eq 'all' or $t12 eq 'on' or $t1210 eq 'on')"/>
					<xsl:variable name="t1211" select="$form-values/values/value[@key='1211']"/>
					<xsl:variable name="test1211" select="($which-tests eq 'all' or $t12 eq 'on' or $t1211 eq 'on')"/>
					<xsl:variable name="test12" select="$test1108 and ($test1201 or $test1202 or $test1203 or $test1204 or $test1205 or $test1206 or $test1207 or $test1208 or $test1209 or $test1210 or $test1211)"/><!-- all test in 12-->
					<xsl:if test="$test12 and not($test1108) ">
						<ctl:message>*****:If you want to run test12 ,you should run test1108 first.</ctl:message>
					</xsl:if>
					
					<xsl:variable name="t13" select="$form-values/values/value[@key='13']"/>
					<xsl:variable name="t1301" select="$form-values/values/value[@key='1301']"/>
					<xsl:variable name="test1301" select="($which-tests eq 'all' or $t13 eq 'on' or $t1301 eq 'on')"/>
					<xsl:variable name="t1302" select="$form-values/values/value[@key='1302']"/>
					<xsl:variable name="test1302" select="($which-tests eq 'all' or $t13 eq 'on' or $t1302 eq 'on')"/>
					<xsl:variable name="t1303" select="$form-values/values/value[@key='1303']"/>
					<xsl:variable name="test1303" select="($which-tests eq 'all' or $t13 eq 'on' or $t1303 eq 'on')"/>
					<xsl:variable name="t1304" select="$form-values/values/value[@key='1304']"/>
					<xsl:variable name="test1304" select="($which-tests eq 'all' or $t13 eq 'on' or $t1304 eq 'on')"/>
					<xsl:variable name="t1305" select="$form-values/values/value[@key='1305']"/>
					<xsl:variable name="test1305" select="($which-tests eq 'all' or $t13 eq 'on' or $t1305 eq 'on')"/>
					<xsl:variable name="t1306" select="$form-values/values/value[@key='1306']"/>
					<xsl:variable name="test1306" select="($which-tests eq 'all' or $t13 eq 'on' or $t1306 eq 'on')"/>
					<xsl:variable name="t1307" select="$form-values/values/value[@key='1307']"/>
					<xsl:variable name="test1307" select="($which-tests eq 'all' or $t13 eq 'on' or $t1307 eq 'on')"/>
					<xsl:variable name="t1308" select="$form-values/values/value[@key='1308']"/>
					<xsl:variable name="test1308" select="($which-tests eq 'all' or $t13 eq 'on' or $t1308 eq 'on')"/>
					<xsl:variable name="t1309" select="$form-values/values/value[@key='1309']"/>
					<xsl:variable name="test1309" select="($which-tests eq 'all' or $t13 eq 'on' or $t1309 eq 'on')"/>
					<xsl:variable name="t1310" select="$form-values/values/value[@key='1310']"/>
					<xsl:variable name="test1310" select="($which-tests eq 'all' or $t13 eq 'on' or $t1310 eq 'on')"/>
					<xsl:variable name="t1311" select="$form-values/values/value[@key='1311']"/>
					<xsl:variable name="test1311" select="($which-tests eq 'all' or $t13 eq 'on' or $t1311 eq 'on')"/>
					<xsl:variable name="test13" select="$test1301 or $test1302 or $test1303 or $test1304 or $test1305 or $test1306 or $test1307 or $test1308 or $test1309 or $test1310 or $test1311"/><!-- all test in 13-->
					
					<xsl:variable name="t14" select="$form-values/values/value[@key='14']"/>
					<xsl:variable name="t1401" select="$form-values/values/value[@key='1401']"/>
					<xsl:variable name="test1401" select="($which-tests eq 'all' or $t14 eq 'on' or $t1401 eq 'on')"/>
					<xsl:variable name="t1402" select="$form-values/values/value[@key='1402']"/>
					<xsl:variable name="test1402" select="($which-tests eq 'all' or $t14 eq 'on' or $t1402 eq 'on')"/>
					<xsl:variable name="t1403" select="$form-values/values/value[@key='1403']"/>
					<xsl:variable name="test1403" select="($which-tests eq 'all' or $t14 eq 'on' or $t1403 eq 'on')"/>
					<xsl:variable name="t1404" select="$form-values/values/value[@key='1404']"/>
					<xsl:variable name="test1404" select="($which-tests eq 'all' or $t14 eq 'on' or $t1404 eq 'on')"/>
					<xsl:variable name="t1405" select="$form-values/values/value[@key='1405']"/>
					<xsl:variable name="test1405" select="($which-tests eq 'all' or $t14 eq 'on' or $t1405 eq 'on')"/>
					<xsl:variable name="t1406" select="$form-values/values/value[@key='1406']"/>
					<xsl:variable name="test1406" select="($which-tests eq 'all' or $t14 eq 'on' or $t1406 eq 'on')"/>
					<xsl:variable name="t1407" select="$form-values/values/value[@key='1407']"/>
					<xsl:variable name="test1407" select="($which-tests eq 'all' or $t14 eq 'on' or $t1407 eq 'on')"/>
					<xsl:variable name="t1408" select="$form-values/values/value[@key='1408']"/>
					<xsl:variable name="test1408" select="($which-tests eq 'all' or $t14 eq 'on' or $t1408 eq 'on')"/>
					<xsl:variable name="t1409" select="$form-values/values/value[@key='1409']"/>
					<xsl:variable name="test1409" select="($which-tests eq 'all' or $t14 eq 'on' or $t1409 eq 'on')"/>
					<xsl:variable name="t1410" select="$form-values/values/value[@key='1410']"/>
					<xsl:variable name="test1410" select="($which-tests eq 'all' or $t14 eq 'on' or $t1410 eq 'on')"/>
					<xsl:variable name="t1411" select="$form-values/values/value[@key='1411']"/>
					<xsl:variable name="test1411" select="($which-tests eq 'all' or $t14 eq 'on' or $t1411 eq 'on')"/>
					<xsl:variable name="t1412" select="$form-values/values/value[@key='1412']"/>
					<xsl:variable name="test1412" select="($which-tests eq 'all' or $t14 eq 'on' or $t1412 eq 'on')"/>
					<xsl:variable name="test14" select="$test1401 or $test1402 or $test1403 or $test1404 or $test1405 or $test1406 or $test1407 or $test1408 or $test1409 or $test1410 or $test1411 or $test1412"/><!-- all test in 14-->
					
					
					<!-- Show message about selected test.  -->
					<ctl:message select="concat('run 01.OWS Main: ',$test01)"/>
					<ctl:message select="concat('run 01.01.OWS.ContentType.1: ',$test0101)"/>
					<ctl:message select="concat('run 01.02.OWS.GetCapabilities-Exceptions.2: ',$test0102)"/>
					<ctl:message select="concat('run 01.03.OWS.GetCapabilities-UpdateSequence.1: ',$test0103)"/>
					<ctl:message select="concat('run 01.04.OWS.GetCapabilities-Exceptions.5: ',$test0104)"/>
					<ctl:message select="concat('run 01.05.OWS.CaseInsensitiveKvpNames.1: ',$test0105)"/>
					<ctl:message select="concat('run 01.06.OWS.GetCapabilities-AcceptVersions.1: ',$test0106)"/>
					<ctl:message select="concat('run 01.07.OWS.GetCapabilities-AcceptVersions.2: ',$test0107)"/>
					<ctl:message select="concat('run 01.08.OWS.GetCapabilities-AcceptVersions.3: ',$test0108)"/>
					<ctl:message select="concat('run 01.09.OWS.GetCapabilities-Sections.1: ',$test0109)"/>
					<ctl:message select="concat('run 01.10.OWS.GetCapabilities-Sections.2: ',$test0110)"/>
					<ctl:message select="concat('run 01.11.OWS.GetCapabilities-AcceptFormats.1: ',$test0111)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 02.SOS General Main: ',$test02)"/>
					<ctl:message select="concat('run 02.01.SOS.General-InvalidRequest.1: ',$test0201)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 03.SOS Core: Get Capabilities: ',$test03)"/>
					<ctl:message select="concat('run 03.01.CorrectServiceParameter: ',$test0301)"/>
					<ctl:message select="concat('run 03.02.OperationMetadataMandatory: ',$test0302)"/>
					<ctl:message select="concat('run 03.03.RequiredSectionsInCapabilities: ',$test0303)"/>
					<ctl:message select="concat('run 03.04.WrongSectionParameter: ',$test0304)"/>
					<ctl:message select="concat('run 03.05.BBOX: ',$test0305)"/>
					<ctl:message select="concat('run 03.06.OperatorDuringAndTEquals: ',$test0306)"/>
					<ctl:message select="concat('run 03.07.ParametersInObservationOffering: ',$test0307)"/>
					<ctl:message select="concat('run 03.08.ResponseFormat: ',$test0308)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 04.SOS Core: DescribeSensor: ',$test04)"/>
					<ctl:message select="concat('run 04.01.RequestNoService: ',$test0401)"/>
					<ctl:message select="concat('run 04.02.RequestNullService: ',$test0402)"/>
					<ctl:message select="concat('run 04.03.RequestInvalidService: ',$test0403)"/>
					<ctl:message select="concat('run 04.04.RequestNoVersion: ',$test0404)"/>
					<ctl:message select="concat('run 04.05.RequestNullVersion: ',$test0405)"/>
					<ctl:message select="concat('run 04.06.RequestInvalidVersion: ',$test0406)"/>
					<ctl:message select="concat('run 04.07.RequestNullProcedure: ',$test0407)"/>
					<ctl:message select="concat('run 04.08.RequestInvalidProcedure: ',$test0408)"/>
					<ctl:message select="concat('run 04.09.RequestNullProcedureDescriptionFormat: ',$test0409)"/>
					<ctl:message select="concat('run 04.10.RequestInvalidProcedureDescriptionFormat: ',$test0410)"/>
					<ctl:message select="concat('run 04.11.RequestValidRequest: ',$test0411)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 05.SOS Core: GetObservation: ',$test05)"/>
					<ctl:message select="concat('run 05.01.RequestNoService: ',$test0501)"/>
					<ctl:message select="concat('run 05.02.RequestNullService: ',$test0502)"/>
					<ctl:message select="concat('run 05.03.RequestInvalidService: ',$test0503)"/>
					<ctl:message select="concat('run 05.04.RequestNoVersion: ',$test0504)"/>
					<ctl:message select="concat('run 05.05.RequestNullVersion: ',$test0505)"/>
					<ctl:message select="concat('run 05.06.RequestInvalidVersion: ',$test0506)"/>
					<ctl:message select="concat('run 05.07.RequestNullOffering: ',$test0507)"/>
					<ctl:message select="concat('run 05.08.RequestInvalidOffering: ',$test0508)"/>
					<ctl:message select="concat('run 05.09.RequestNullObservedProperty: ',$test0509)"/>
					<ctl:message select="concat('run 05.10.RequestInvalidObservedProperty: ',$test0510)"/>
					<ctl:message select="concat('run 05.11.RequestNullProcedure: ',$test0511)"/>
					<ctl:message select="concat('run 05.12.RequestInvalidProcedure: ',$test0512)"/>
					<ctl:message select="concat('run 05.13.RequestNullFeatureOfInterest: ',$test0513)"/>
					<ctl:message select="concat('run 05.14.RequestInvalidFeatureOfInterest: ',$test0514)"/>
					<ctl:message select="concat('run 05.15.RequestNullResponseFormat: ',$test0515)"/>
					<ctl:message select="concat('run 05.16.RequestInvalidResponseFormat: ',$test0516)"/>
					<ctl:message select="concat('run 05.17.RequestNoResponseFormat: ',$test0517)"/>
					<ctl:message select="concat('run 05.18.RequestOtherResponseFormat: ',$test0518)"/>
					<ctl:message select="concat('run 05.19.RequestEmptyObservation: ',$test0519)"/>
					<ctl:message select="concat('run 05.20.RequestResponseExceedsSizeLimit: ',$test0520)"/>
					<ctl:message select="'*********************************************************'"/>				
					<ctl:message select="concat('run 06.SOS enhancedOperations: GetFeatureOfInterest: ',$test06)"/>
					<ctl:message select="concat('run 06.01.RequestNoService: ',$test0601)"/>
					<ctl:message select="concat('run 06.02.RequestNullService: ',$test0602)"/>
					<ctl:message select="concat('run 06.03.RequestInvalidService: ',$test0603)"/>
					<ctl:message select="concat('run 06.04.RequestNoVersion: ',$test0604)"/>
					<ctl:message select="concat('run 06.05.RequestNullVersion: ',$test0605)"/>
					<ctl:message select="concat('run 06.06.RequestInvalidVersion: ',$test0606)"/>
					<ctl:message select="concat('run 06.07.RequestNullProcedure: ',$test0607)"/>
					<ctl:message select="concat('run 06.08.RequestInvalidProcedure: ',$test0608)"/>
					<ctl:message select="concat('run 06.09.RequestNullObservedProperty: ',$test0609)"/>
					<ctl:message select="concat('run 06.10.RequestInvalidObservedProperty: ',$test0610)"/>
					<ctl:message select="concat('run 06.11.RequestNullFeatureOfInterest: ',$test0611)"/>
					<ctl:message select="concat('run 06.12.RequestInvalidFeatureOfInterest: ',$test0612)"/>
					<ctl:message select="concat('run 06.13.RequestNULLSpatialFilter: ',$test0613)"/>
					<ctl:message select="concat('run 06.14.RequestInvalidSpatialFilter: ',$test0614)"/>
					<ctl:message select="concat('run 06.15.RequestEmptyResponse: ',$test0615)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 07.SOS enhancedOperations: GetObservationById: ',$test07)"/>
					<ctl:message select="concat('run 07.01.RequestNoService: ',$test0701)"/>
					<ctl:message select="concat('run 07.02.RequestNullService: ',$test0702)"/>
					<ctl:message select="concat('run 07.03.RequestInvalidService: ',$test0703)"/>
					<ctl:message select="concat('run 07.04.RequestNoVersion: ',$test0704)"/>
					<ctl:message select="concat('run 07.05.RequestNullVersion: ',$test0705)"/>
					<ctl:message select="concat('run 07.06.RequestInvalidVersion: ',$test0706)"/>
					<ctl:message select="concat('run 07.07.RequestNullobservation: ',$test0707)"/>
					<ctl:message select="concat('run 07.08.RequestInvalidobservation: ',$test0708)"/>
					<ctl:message select="concat('run 07.09.RequestValidRequest: ',$test0709)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 08.SOS Transactional: InsertSensor: ',$test08)"/>
					<ctl:message select="concat('run 08.01.RequestNoService: ',$test0801)"/>
					<ctl:message select="concat('run 08.02.RequestNullService: ',$test0802)"/>
					<ctl:message select="concat('run 08.03.RequestInvalidService: ',$test0803)"/>
					<ctl:message select="concat('run 08.04.RequestNoVersion: ',$test0804)"/>
					<ctl:message select="concat('run 08.05.RequestNullVersion: ',$test0805)"/>
					<ctl:message select="concat('run 08.06.RequestInvalidVersion: ',$test0806)"/>
					<ctl:message select="concat('run 08.07.RequestNullprocedureDescriptionFormat: ',$test0807)"/>
					<ctl:message select="concat('run 08.08.RequestInvalidprocedureDescriptionFormat: ',$test0808)"/>
					<ctl:message select="concat('run 08.09.RequestNullfeatureOfInterestType: ',$test0809)"/>
					<ctl:message select="concat('run 08.10.RequestInvalidfeatureOfInterestType: ',$test0810)"/>
					<ctl:message select="concat('run 08.11.RequestNullobservationType: ',$test0811)"/>
					<ctl:message select="concat('run 08.12.RequestInvalidobservationType: ',$test0812)"/>
					<ctl:message select="concat('run 08.13.RequestValidRequest: ',$test0813)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 09.SOS Transactional: DeleteSensor: ',$test10)"/>
					<ctl:message select="concat('run 09.01.RequestNoService: ',$test0901)"/>
					<ctl:message select="concat('run 09.02.RequestNullService: ',$test0902)"/>
					<ctl:message select="concat('run 09.03.RequestInvalidService: ',$test0903)"/>
					<ctl:message select="concat('run 09.04.RequestNoVersion: ',$test0904)"/>
					<ctl:message select="concat('run 09.05.RequestNullVersion: ',$test0905)"/>
					<ctl:message select="concat('run 09.06.RequestInvalidVersion: ',$test0906)"/>
					<ctl:message select="concat('run 09.07.RequestNullProcedure: ',$test0907)"/>
					<ctl:message select="concat('run 09.08.RequestInvalidProcedure: ',$test0908)"/>
					<ctl:message select="concat('run 09.09.RequestValidRequest: ',$test0909)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 10.SOS Transactional: InsertObservation: ',$test10)"/>
					<ctl:message select="concat('run 10.01.RequestNoService: ',$test1001)"/>
					<ctl:message select="concat('run 10.02.RequestNullService: ',$test1002)"/>
					<ctl:message select="concat('run 10.03.RequestInvalidService: ',$test1003)"/>
					<ctl:message select="concat('run 10.04.RequestNoVersion: ',$test1004)"/>
					<ctl:message select="concat('run 10.05.RequestNullVersion: ',$test1005)"/>
					<ctl:message select="concat('run 10.06.RequestInvalidVersion: ',$test1006)"/>
					<ctl:message select="concat('run 10.07.RequestNulloffering: ',$test1007)"/>
					<ctl:message select="concat('run 10.08.RequestInvalidoffering: ',$test1008)"/>
					<ctl:message select="concat('run 10.09.RequestNullobservationType: ',$test1009)"/>
					<ctl:message select="concat('run 10.10.RequestInvalidobservationType: ',$test1010)"/>
					<ctl:message select="concat('run 10.11.RequestNullprocedure: ',$test1011)"/>
					<ctl:message select="concat('run 10.12.RequestInvalidprocedure: ',$test1012)"/>
					<ctl:message select="concat('run 10.13.RequestNullobservedProperty: ',$test1013)"/>
					<ctl:message select="concat('run 10.14.RequestInvalidobservedProperty: ',$test1014)"/>
					<ctl:message select="concat('run 10.15.RequestNullfeatureOfInterest: ',$test1015)"/>
					<ctl:message select="concat('run 10.16.RequestInvalidfeatureOfInterest: ',$test1016)"/>
					<ctl:message select="concat('run 10.17.RequestNullresultType: ',$test1017)"/>
					<ctl:message select="concat('run 10.18.RequestInvalidresultType: ',$test1018)"/>
					<ctl:message select="concat('run 10.19.RequestValidRequest: ',$test1019)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 11.SOS resultHandling: InsertResultTemplate: ',$test11)"/>
					<ctl:message select="concat('run 11.01.RequestNoService: ',$test1101)"/>
					<ctl:message select="concat('run 11.02.RequestNullService: ',$test1102)"/>
					<ctl:message select="concat('run 11.03.RequestInvalidService: ',$test1103)"/>
					<ctl:message select="concat('run 11.04.RequestNoVersion: ',$test1104)"/>
					<ctl:message select="concat('run 11.05.RequestNullVersion: ',$test1105)"/>
					<ctl:message select="concat('run 11.06.RequestInvalidVersion: ',$test1106)"/>
					<ctl:message select="concat('run 11.07.RequestInvalidobservationType: ',$test1107)"/>
					<ctl:message select="concat('run 11.08.RequestInvalidproposedTemplate: ',$test1107)"/>
					<ctl:message select="concat('run 11.09.RequestValidRequest: ',$test1109)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 12.SOS resultHandling: InsertResult: ',$test12)"/>
					<ctl:message select="concat('run 12.01.RequestNoService: ',$test1101)"/>
					<ctl:message select="concat('run 12.02.RequestNullService: ',$test1102)"/>
					<ctl:message select="concat('run 12.03.RequestInvalidService: ',$test1103)"/>
					<ctl:message select="concat('run 12.04.RequestNoVersion: ',$test1104)"/>
					<ctl:message select="concat('run 12.05.RequestNullVersion: ',$test1105)"/>
					<ctl:message select="concat('run 12.06.RequestInvalidVersion: ',$test1106)"/>
					<ctl:message select="concat('run 12.07.RequestNulltemplate: ',$test1207)"/>
					<ctl:message select="concat('run 12.08.RequestInvalidtemplate: ',$test1208)"/>
					<ctl:message select="concat('run 12.09.RequestNullresultValues: ',$test1209)"/>
					<ctl:message select="concat('run 12.10.RequestInvalidresultValues: ',$test1210)"/>
					<ctl:message select="concat('run 12.11.RequestValidRequest: ',$test1211)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 13.SOS resultRetrieval: GetResultTemplate: ',$test13)"/>
					<ctl:message select="concat('run 13.01.RequestNoService: ',$test1301)"/>
					<ctl:message select="concat('run 13.02.RequestNullService: ',$test1302)"/>
					<ctl:message select="concat('run 13.03.RequestInvalidService: ',$test1303)"/>
					<ctl:message select="concat('run 13.04.RequestNoVersion: ',$test1304)"/>
					<ctl:message select="concat('run 13.05.RequestNullVersion: ',$test1305)"/>
					<ctl:message select="concat('run 13.06.RequestInvalidVersion: ',$test1306)"/>
					<ctl:message select="concat('run 13.07.RequestNulloffering: ',$test1307)"/>
					<ctl:message select="concat('run 13.08.RequestInvalidoffering: ',$test1308)"/>
					<ctl:message select="concat('run 13.09.RequestNullobservedProperty: ',$test1309)"/>
					<ctl:message select="concat('run 13.10.RequestInvalidobservedProperty: ',$test1310)"/>
					<ctl:message select="concat('run 13.11.RequestValidRequest: ',$test1311)"/>
					<ctl:message select="'*********************************************************'"/>
					<ctl:message select="concat('run 14.SOS resultRetrieval: GetResult: ',$test14)"/>
					<ctl:message select="concat('run 14.01.RequestNoService: ',$test1401)"/>
					<ctl:message select="concat('run 14.02.RequestNullService: ',$test1402)"/>
					<ctl:message select="concat('run 14.03.RequestInvalidService: ',$test1403)"/>
					<ctl:message select="concat('run 14.04.RequestNoVersion: ',$test1404)"/>
					<ctl:message select="concat('run 14.05.RequestNullVersion: ',$test1405)"/>
					<ctl:message select="concat('run 14.06.RequestInvalidVersion: ',$test1406)"/>
					<ctl:message select="concat('run 14.07.RequestNulloffering: ',$test1407)"/>
					<ctl:message select="concat('run 14.08.RequestInvalidoffering: ',$test1408)"/>
					<ctl:message select="concat('run 14.09.RequestNullobservedProperty: ',$test1409)"/>
					<ctl:message select="concat('run 14.10.RequestInvalidobservedProperty: ',$test1410)"/>
					<ctl:message select="concat('run 14.11.RequestValidRequest: ',$test1411)"/>
					<ctl:message select="concat('run 14.12.RequestEmptyResponse: ',$test1412)"/>
					<ctl:message select="'*********************************************************'"/>
					<!-- set other "global" variables -->			
					<xsl:variable name="ogc.schema.root" select="'xsd/ogc/'"/>
					<xsl:variable name="sos.schema.root" select="$ogc.schema.root"/>

					<xsl:variable name="sos.version" select="'2.0.0'"/>		
					<xsl:variable name="ows.version" select="'1.1.0'"/>
					<xsl:variable name="swes.version" select="'2.0'"/>
					<xsl:variable name="exceptionReportSchema" select="sosFunctions:exceptionReportSchemaPath($ogc.schema.root, $ows.version)"/>


					<!-- 分類測試 -->
					<xsl:if test="$test01">
						<ctl:message>***************************</ctl:message>
						<ctl:message>Running OWS Common Tests...</ctl:message>
						<ctl:message>***************************</ctl:message>
						<ctl:call-test name="owsTests:ows-main">
							<ctl:with-param name="serviceURL" select="$GetCapabilities-URL"/>
							<ctl:with-param name="isGET" select="$IsGetCapabilities-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="capabilitiesRootElementName" select="string('Capabilities')" />
							<ctl:with-param name="capabilitiesResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetCapabilities.xsd')"/>
							<ctl:with-param name="capabilitiesResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="capabilitiesResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0101" select="$test0101"/>
							<ctl:with-param name="test0102" select="$test0102"/>
							<ctl:with-param name="test0103" select="$test0103"/>
							<ctl:with-param name="test0104" select="$test0104"/>
							<ctl:with-param name="test0105" select="$test0105"/>
							<ctl:with-param name="test0106" select="$test0106"/>
							<ctl:with-param name="test0107" select="$test0107"/>
							<ctl:with-param name="test0108" select="$test0108"/>
							<ctl:with-param name="test0109" select="$test0109"/>
							<ctl:with-param name="test0110" select="$test0110"/>
							<ctl:with-param name="test0111" select="$test0111"/>
						</ctl:call-test>
					</xsl:if>

					<xsl:if test="$test02">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running General SOS Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:general-main">
							<ctl:with-param name="serviceURL" select="$GetCapabilities-URL" />
							<ctl:with-param name="isGET" select="$IsGetCapabilities-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema" />
							<ctl:with-param name="test0201" select="$test0201"/>
						</ctl:call-test>			
					</xsl:if>

					<xsl:if test="$test03">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 03.SOS Core: Get Capabilities Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:GetCapabilities-Test">
							<ctl:with-param name="serviceURL" select="$GetCapabilities-URL"/>
							<ctl:with-param name="isGET" select="$IsGetCapabilities-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="capabilitiesRootElementName" select="string('Capabilities')" />
							<ctl:with-param name="capabilitiesResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetCapabilities.xsd')"/>
							<ctl:with-param name="capabilitiesResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="capabilitiesResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0301" select="$test0301"/>
							<ctl:with-param name="test0302" select="$test0302"/>
							<ctl:with-param name="test0303" select="$test0303"/>
							<ctl:with-param name="test0304" select="$test0304"/>
							<ctl:with-param name="test0305" select="$test0305"/>
							<ctl:with-param name="test0306" select="$test0306"/>
							<ctl:with-param name="test0307" select="$test0307"/>
							<ctl:with-param name="test0308" select="$test0308"/>
							<ctl:with-param name="test0309" select="$test0309"/>
						</ctl:call-test>
					</xsl:if>
					
					<xsl:if test="$test04">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 04.SOS Core: DescribeSensor Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:DescribeSensor-Test">
							<ctl:with-param name="serviceURL" select="$DescribeSensor-URL"/>
							<ctl:with-param name="isGET" select="$IsDescribeSensor-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="test0401" select="$test0401"/>
							<ctl:with-param name="test0402" select="$test0402"/>
							<ctl:with-param name="test0403" select="$test0403"/>
							<ctl:with-param name="test0404" select="$test0404"/>
							<ctl:with-param name="test0405" select="$test0405"/>
							<ctl:with-param name="test0406" select="$test0406"/>
							<ctl:with-param name="test0407" select="$test0407"/>
							<ctl:with-param name="test0408" select="$test0408"/>
							<ctl:with-param name="test0409" select="$test0409"/>
							<ctl:with-param name="test0410" select="$test0410"/>
							<ctl:with-param name="test0411" select="$test0411"/>
						</ctl:call-test>
					</xsl:if>
					
					<xsl:if test="$test05">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 05.SOS Core: GetObservation Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:GetObservation-Test">
							<ctl:with-param name="serviceURL" select="$GetObservation-URL"/>
							<ctl:with-param name="isGET" select="$IsGetObservation-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="observationRootElementName" select="string('GetObservationResponse')" />
							<ctl:with-param name="observationResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetObservation.xsd')"/>
							<ctl:with-param name="observationResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0501" select="$test0501"/>
							<ctl:with-param name="test0502" select="$test0502"/>
							<ctl:with-param name="test0503" select="$test0503"/>
							<ctl:with-param name="test0504" select="$test0504"/>
							<ctl:with-param name="test0505" select="$test0505"/>
							<ctl:with-param name="test0506" select="$test0506"/>
							<ctl:with-param name="test0507" select="$test0507"/>
							<ctl:with-param name="test0508" select="$test0508"/>
							<ctl:with-param name="test0509" select="$test0509"/>
							<ctl:with-param name="test0510" select="$test0510"/>
							<ctl:with-param name="test0511" select="$test0511"/>
							<ctl:with-param name="test0512" select="$test0512"/>
							<ctl:with-param name="test0513" select="$test0513"/>
							<ctl:with-param name="test0514" select="$test0514"/>
							<ctl:with-param name="test0515" select="$test0515"/>
							<ctl:with-param name="test0516" select="$test0516"/>
							<ctl:with-param name="test0517" select="$test0517"/>
							<ctl:with-param name="test0518" select="$test0518"/>
							<ctl:with-param name="test0519" select="$test0519"/>
							<ctl:with-param name="test0520" select="$test0520"/>
						</ctl:call-test>
					</xsl:if>
					
					<xsl:if test="$test06">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 06.SOS enhancedOperations: GetFeatureOfInterest Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:GetFeatureOfInterest-Test">
							<ctl:with-param name="GetObservationURL" select="$GetObservation-URL"/>
							<ctl:with-param name="isGetObservationGET" select="$IsGetObservation-GET"/>
							<ctl:with-param name="observationResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="observationResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetObservation.xsd')"/>
							<ctl:with-param name="serviceURL" select="$GetFeatureOfInterest-URL"/>
							<ctl:with-param name="hasFOI" select="$hasGetFeatureOfInterest"/>
							<ctl:with-param name="isGET" select="$IsGetFeatureOfInterest-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="featureOfInterestRootElementName" select="string('GetFeatureOfInterestResponse')" />
							<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetFeatureOfInterest.xsd')"/>
							<ctl:with-param name="featureOfInterestResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="featureOfInterestResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0601" select="$test0601"/>
							<ctl:with-param name="test0602" select="$test0602"/>
							<ctl:with-param name="test0603" select="$test0603"/>
							<ctl:with-param name="test0604" select="$test0604"/>
							<ctl:with-param name="test0605" select="$test0605"/>
							<ctl:with-param name="test0606" select="$test0606"/>
							<ctl:with-param name="test0607" select="$test0607"/>
							<ctl:with-param name="test0608" select="$test0608"/>
							<ctl:with-param name="test0609" select="$test0609"/>
							<ctl:with-param name="test0610" select="$test0610"/>
							<ctl:with-param name="test0611" select="$test0611"/>
							<ctl:with-param name="test0612" select="$test0612"/>
							<ctl:with-param name="test0613" select="$test0613"/>
							<ctl:with-param name="test0614" select="$test0614"/>
							<ctl:with-param name="test0615" select="$test0615"/>
						</ctl:call-test>
					</xsl:if>

					<xsl:if test="$test07">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 07.SOS enhancedOperations: GetObservationById Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:GetObservationById-Test">
							<ctl:with-param name="GetObservationURL" select="$GetObservation-URL"/>
							<ctl:with-param name="isGetObservationGET" select="$IsGetObservation-GET"/>
							<ctl:with-param name="observationResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="observationResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetObservation.xsd')"/>
							<ctl:with-param name="serviceURL" select="$GetObservationById-URL"/>
							<ctl:with-param name="hasGOBI" select="$hasGetObservationById"/>
							<ctl:with-param name="isGET" select="$IsGetObservationById-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="GetObservationByIdRootElementName" select="string('GetObservationByIdResponse')" />
							<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetObservationById.xsd')"/>
							<ctl:with-param name="GetObservationByIdResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="GetObservationByIdResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0701" select="$test0701"/>
							<ctl:with-param name="test0702" select="$test0702"/>
							<ctl:with-param name="test0703" select="$test0703"/>
							<ctl:with-param name="test0704" select="$test0704"/>
							<ctl:with-param name="test0705" select="$test0705"/>
							<ctl:with-param name="test0706" select="$test0706"/>
							<ctl:with-param name="test0707" select="$test0707"/>
							<ctl:with-param name="test0708" select="$test0708"/>
							<ctl:with-param name="test0709" select="$test0709"/>
						</ctl:call-test>
					</xsl:if>

					<xsl:if test="$test08">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 08.SOS Transactional: InsertSensor Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:InsertSensor-Test">
							<ctl:with-param name="serviceURL" select="$InsertSensor-URL"/>
							<ctl:with-param name="hasIS" select="$hasInsertSensor"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="InsertSensorRootElementName" select="string('InsertSensorResponse')" />
							<ctl:with-param name="InsertSensorResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosInsertSensor.xsd')"/>
							<ctl:with-param name="InsertSensorResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="InsertSensorResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0801" select="$test0801"/>
							<ctl:with-param name="test0802" select="$test0802"/>
							<ctl:with-param name="test0803" select="$test0803"/>
							<ctl:with-param name="test0804" select="$test0804"/>
							<ctl:with-param name="test0805" select="$test0805"/>
							<ctl:with-param name="test0806" select="$test0806"/>
							<ctl:with-param name="test0807" select="$test0807"/>
							<ctl:with-param name="test0808" select="$test0808"/>
							<ctl:with-param name="test0809" select="$test0809"/>
							<ctl:with-param name="test0810" select="$test0810"/>
							<ctl:with-param name="test0811" select="$test0811"/>
							<ctl:with-param name="test0812" select="$test0812"/>
							<ctl:with-param name="test0813" select="$test0813"/>
						</ctl:call-test>
					</xsl:if>
					
					<xsl:if test="$test09">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 09.SOS Transactional: DeleteSensor Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:DeleteSensor-Test">
							<ctl:with-param name="GetCapabilitiesURL" select="$GetCapabilities-URL"/>
							<ctl:with-param name="isGetCapabilitiesGET" select="$IsGetCapabilities-GET"/>
							<ctl:with-param name="capabilitiesResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="capabilitiesResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetCapabilities.xsd')"/>
							<ctl:with-param name="serviceURL" select="$DeleteSensor-URL"/>
							<ctl:with-param name="hasDeS" select="$hasDeleteSensor"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="DeleteSensorRootElementName" select="string('DeleteSensorResponse')" />
							<ctl:with-param name="DeleteSensorResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $swes.version,'swes', 'swesDeleteSensor.xsd')"/>
							<ctl:with-param name="DeleteSensorResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="DeleteSensorResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0901" select="$test0901"/>
							<ctl:with-param name="test0902" select="$test0902"/>
							<ctl:with-param name="test0903" select="$test0903"/>
							<ctl:with-param name="test0904" select="$test0904"/>
							<ctl:with-param name="test0905" select="$test0905"/>
							<ctl:with-param name="test0906" select="$test0906"/>
							<ctl:with-param name="test0907" select="$test0907"/>
							<ctl:with-param name="test0908" select="$test0908"/>
							<ctl:with-param name="test0909" select="$test0909"/>
						</ctl:call-test>
					</xsl:if>

					<xsl:if test="$test10">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 10.SOS Transactional: InsertObservation Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:InsertObservation-Test">
							<ctl:with-param name="GetCapabilitiesURL" select="$GetCapabilities-URL"/>
							<ctl:with-param name="isGetCapabilitiesGET" select="$IsGetCapabilities-GET"/>
							<ctl:with-param name="capabilitiesResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="capabilitiesResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetCapabilities.xsd')"/>
							<ctl:with-param name="GetObservationURL" select="$GetObservation-URL"/>
							<ctl:with-param name="isGetObservationGET" select="$IsGetObservation-GET"/>
							<ctl:with-param name="observationResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="observationResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetObservation.xsd')"/>
							<ctl:with-param name="serviceURL" select="$InsertObservation-URL"/>
							<ctl:with-param name="hasIO" select="$hasInsertObservation"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="InsertObservationRootElementName" select="string('InsertObservationResponse')" />
							<ctl:with-param name="InsertObservationResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosInsertObservation.xsd')"/>
							<ctl:with-param name="InsertObservationResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="InsertObservationResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test1001" select="$test1001"/>
							<ctl:with-param name="test1002" select="$test1002"/>
							<ctl:with-param name="test1003" select="$test1003"/>
							<ctl:with-param name="test1004" select="$test1004"/>
							<ctl:with-param name="test1005" select="$test1005"/>
							<ctl:with-param name="test1006" select="$test1006"/>
							<ctl:with-param name="test1007" select="$test1007"/>
							<ctl:with-param name="test1008" select="$test1008"/>
							<ctl:with-param name="test1009" select="$test1009"/>
							<ctl:with-param name="test1010" select="$test1010"/>
							<ctl:with-param name="test1011" select="$test1011"/>
							<ctl:with-param name="test1012" select="$test1012"/>
							<ctl:with-param name="test1013" select="$test1013"/>
							<ctl:with-param name="test1014" select="$test1014"/>
							<ctl:with-param name="test1015" select="$test1015"/>
							<ctl:with-param name="test1016" select="$test1016"/>
							<ctl:with-param name="test1017" select="$test1017"/>
							<ctl:with-param name="test1018" select="$test1018"/>
							<ctl:with-param name="test1019" select="$test1019"/>
						</ctl:call-test>
					</xsl:if>

					<xsl:if test="$test11">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 11.SOS resultHandling: InsertResultTemplate Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:InsertResultTemplate-Test">
							<ctl:with-param name="GetCapabilitiesURL" select="$GetCapabilities-URL"/>
							<ctl:with-param name="isGetCapabilitiesGET" select="$IsGetCapabilities-GET"/>
							<ctl:with-param name="capabilitiesResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="capabilitiesResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetCapabilities.xsd')"/>
							<ctl:with-param name="GetObservationURL" select="$GetObservation-URL"/>
							<ctl:with-param name="isGetObservationGET" select="$IsGetObservation-GET"/>
							<ctl:with-param name="observationResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="observationResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetObservation.xsd')"/>
							<ctl:with-param name="serviceURL" select="$InsertResultTemplate-URL"/>
							<ctl:with-param name="hasIRT" select="$hasInsertResultTemplate"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="InsertResultTemplateRootElementName" select="string('InsertResultTemplateResponse')" />
							<ctl:with-param name="InsertResultTemplateResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosInsertResultTemplate.xsd')"/>
							<ctl:with-param name="InsertResultTemplateResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="InsertResultTemplateResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="test1101" select="$test1101"/>
							<ctl:with-param name="test1102" select="$test1102"/>
							<ctl:with-param name="test1103" select="$test1103"/>
							<ctl:with-param name="test1104" select="$test1104"/>
							<ctl:with-param name="test1105" select="$test1105"/>
							<ctl:with-param name="test1106" select="$test1106"/>
							<ctl:with-param name="test1107" select="$test1107"/>
							<ctl:with-param name="test1108" select="$test1108"/>
							<ctl:with-param name="test1109" select="$test1109"/>
							<ctl:with-param name="test12" select="$test12"/>
							<ctl:with-param name="InsertResult-URL" select="$InsertResult-URL"/>
							<ctl:with-param name="hasInsertResult" select="$hasInsertResult"/>
							<ctl:with-param name="InsertResultRootElementName" select="string('InsertResultResponse')" />
							<ctl:with-param name="InsertResultResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosInsertResult.xsd')"/>
							<ctl:with-param name="InsertResultResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="InsertResultResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="test1201" select="$test1201"/>
							<ctl:with-param name="test1202" select="$test1202"/>
							<ctl:with-param name="test1203" select="$test1203"/>
							<ctl:with-param name="test1204" select="$test1204"/>
							<ctl:with-param name="test1205" select="$test1205"/>
							<ctl:with-param name="test1206" select="$test1206"/>
							<ctl:with-param name="test1207" select="$test1207"/>
							<ctl:with-param name="test1208" select="$test1208"/>
							<ctl:with-param name="test1209" select="$test1209"/>
							<ctl:with-param name="test1208" select="$test1208"/>
							<ctl:with-param name="test1209" select="$test1209"/>
							<ctl:with-param name="test1210" select="$test1210"/>
							<ctl:with-param name="test1211" select="$test1211"/>
						</ctl:call-test>
					</xsl:if>
					
					<xsl:if test="$test13">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 13.SOS resultRetrieval: GetResultTemplate Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:GetResultTemplate-Test">
							<ctl:with-param name="serviceURL" select="$GetResultTemplate-URL"/>
							<ctl:with-param name="hasGRT" select="$hasGetResultTemplate"/>
							<ctl:with-param name="isGET" select="$IsGetResultTemplate-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="GetResultTemplateRootElementName" select="string('GetResultTemplateResponse')" />
							<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetResultTemplate.xsd')"/>
							<ctl:with-param name="GetResultTemplateResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="GetResultTemplateResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test1301" select="$test1301"/>
							<ctl:with-param name="test1302" select="$test1302"/>
							<ctl:with-param name="test1303" select="$test1303"/>
							<ctl:with-param name="test1304" select="$test1304"/>
							<ctl:with-param name="test1305" select="$test1305"/>
							<ctl:with-param name="test1306" select="$test1306"/>
							<ctl:with-param name="test1307" select="$test1307"/>
							<ctl:with-param name="test1308" select="$test1308"/>
							<ctl:with-param name="test1309" select="$test1309"/>
							<ctl:with-param name="test1310" select="$test1310"/>
							<ctl:with-param name="test1311" select="$test1311"/>
						</ctl:call-test>
					</xsl:if>
					
					<xsl:if test="$test14">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 14.SOS resultRetrieval: GetResult Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:GetResult-Test">
							<ctl:with-param name="serviceURL" select="$GetResult-URL"/>
							<ctl:with-param name="hasGR" select="$hasGetResult"/>
							<ctl:with-param name="isGET" select="$IsGetResult-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="GetResultRootElementName" select="string('GetResultResponse')" />
							<ctl:with-param name="GetResultResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetResult.xsd')"/>
							<ctl:with-param name="GetResultResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="GetResultResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test1401" select="$test1401"/>
							<ctl:with-param name="test1402" select="$test1402"/>
							<ctl:with-param name="test1403" select="$test1403"/>
							<ctl:with-param name="test1404" select="$test1404"/>
							<ctl:with-param name="test1405" select="$test1405"/>
							<ctl:with-param name="test1406" select="$test1406"/>
							<ctl:with-param name="test1407" select="$test1407"/>
							<ctl:with-param name="test1408" select="$test1408"/>
							<ctl:with-param name="test1409" select="$test1409"/>
							<ctl:with-param name="test1410" select="$test1410"/>
							<ctl:with-param name="test1411" select="$test1411"/>
							<ctl:with-param name="test1412" select="$test1412"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>

	<!-- 02.SOS General Main -->
	<ctl:package>
		<ctl:test name="sos:general-main">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="exceptionReportSchema" />
			<ctl:param name="test0201" />
			<ctl:assertion>All assertions for "general" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the general module.</ctl:comment>
			<ctl:code>
				<ctl:message select="concat('run 02.01.SOS.General-InvalidRequest.1: ',$test0201)"/>
				<xsl:if test="$test0201 eq 'true'">
					<ctl:message select="'******************** test0201 sos:general-SOS.General-InvalidRequest.1 ********************'"/>
					<ctl:call-test name="sos:general-SOS.General-InvalidRequest.1">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema" />
					</ctl:call-test>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:general-SOS.General-InvalidRequest.1">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="exceptionReportSchema" />
			<ctl:assertion>Sending a request that is non-conformant to a schema associated with an SOS operation causes the server to return a valid error report message with an exceptionCode value of InvalidRequest.</ctl:assertion>
			<ctl:comment>Pass if the service returns a valid exception message with an exceptionCode value of InvalidRequest; fail otherwise.</ctl:comment>
			<ctl:link></ctl:link>
			<ctl:code>
			
				<!--
					1.)  KVP selected,pass this test.
                    1.)  Validate the response against the ExceptionReport schema.
                    2.)  If the response validates, then check that the exceptionCode value is "InvalidRequest".
                -->
				<xsl:if test="($isGET)">
					<ctl:message select="'This test does not support KVP type request,so passed.'"/>
					
				</xsl:if>
				<xsl:if test="not($isGET)">

					<ctl:message>Issuing an invalid request to:  <xsl:value-of select="$serviceURL" /></ctl:message>		     
					<ctl:message select="'The body of the request will be &quot;test&quot;'"/>
					<xsl:variable name="invalidRequestResponse">
						<xsl:choose>
							<xsl:when test="($isSOAP)">
								<ctl:soap-request version="1.2" charset="UTF-8">
									<ctl:url>
										<xsl:value-of select="$serviceURL"/>
									</ctl:url>
									<ctl:body>test</ctl:body>
									<parsers:SOAPParser return="content">
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="'resource'" /></xsl:attribute>
													<xsl:value-of select="$exceptionReportSchema" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</parsers:SOAPParser>
								</ctl:soap-request>
							</xsl:when>
							<xsl:otherwise>
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$serviceURL" />
									</ctl:url>
									<ctl:method>post</ctl:method>
									<ctl:body>test</ctl:body>
									<ctl:call-function name="sosFunctions:xmlValidatingParser">	
										<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
									</ctl:call-function>
								</ctl:request>
							</xsl:otherwise>
						</xsl:choose>
						
					</xsl:variable>        
					<xsl:choose>
						<xsl:when test="not($invalidRequestResponse/*)">
							<ctl:message>FAILURE:  The server did not return a response to an invalid request or the response from the server was not a valid exception report.  The response from the server was:  "<xsl:copy-of select="$invalidRequestResponse/*" />"</ctl:message>
							<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
							<ctl:fail />
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>The response was <xsl:value-of select="sosFunctions:getExceptionInfo($invalidRequestResponse)" /></ctl:message>
							<ctl:message>Checking the validity of the response to an invalid request.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$invalidRequestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('*')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The response to an invalid request was expected to be an exception report with an exceptionCode of "InvalidRequest" and a locator value containing the validation issue.  The returned exception report was:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
								<ctl:message select="concat('Returned exception code was: &quot;', sosFunctions:exceptionCode($invalidRequestResponse), '&quot;')"/>
								<ctl:message select="'Expected exception code was: &quot;InvalidRequest&quot;'"/>
								<ctl:fail />
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>
				
				</xsl:if>
				
				
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<!-- 03.SOS Core: Get Capabilities -->
		<!-- 03 Send a valid GetCapailities (no parameters) ,Check the response (valid Capabilities) and pass the capabilities to other tests-->
	<ctl:package>
		<ctl:test name="sos:GetCapabilities-Test">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="capabilitiesRootElementName" />
			<ctl:param name="capabilitiesResponseSchemaLocation" />
			<ctl:param name="capabilitiesResponseSchemaType" />
			<ctl:param name="capabilitiesResponseContentType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test0301" />
			<ctl:param name="test0302" />
			<ctl:param name="test0303" />
			<ctl:param name="test0304" />
			<ctl:param name="test0305" />
			<ctl:param name="test0306" />
			<ctl:param name="test0307" />
			<ctl:param name="test0308" />
			<ctl:param name="test0309" />
			<ctl:assertion>All assertions for "GetCapabilities" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the GetCapabilities module.</ctl:comment>
			<ctl:code>
				<xsl:variable name="CapabilitiesResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">GetCapabilities</ctl:param>				   
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetCapabilities>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"/>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($CapabilitiesResponse/*)">
						<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="concat('run 03.01.CorrectServiceParameter: ',$test0301)"/>
						<xsl:if test="$test0301 eq 'true'">
							<ctl:message select="'******************** 03.01.CorrectServiceParameter ********************'"/>
							<ctl:call-test name="sos:GCCorrectServiceParameter">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="capabilitiesRootElementName" select="$capabilitiesRootElementName" />
								<ctl:with-param name="capabilitiesResponseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
								<ctl:with-param name="capabilitiesResponseSchemaType" select="$capabilitiesResponseSchemaType" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.02.OperationMetadataMandatory: ',$test0302)"/>
						<xsl:if test="$test0302 eq 'true'">
							<ctl:message select="'******************** 03.02.OperationMetadataMandatory ********************'"/>
							<ctl:call-test name="sos:GCOperationMetadataMandatory">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.03.RequiredSectionsInCapabilities: ',$test0303)"/>
						<xsl:if test="$test0303 eq 'true'">
							<ctl:message select="'******************** 03.03.RequiredSectionsInCapabilities ********************'"/>
							<ctl:call-test name="sos:GCRequiredSectionsInCapabilities">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.04.WrongSectionParameter: ',$test0304)"/>
						<xsl:if test="$test0304 eq 'true'">
							<ctl:message select="'******************** 03.04.WrongSectionParameter ********************'"/>
							<ctl:call-test name="sos:GCWrongSectionParameter">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="capabilitiesRootElementName" select="$capabilitiesRootElementName" />
								<ctl:with-param name="capabilitiesResponseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
								<ctl:with-param name="capabilitiesResponseSchemaType" select="$capabilitiesResponseSchemaType" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.05.BBOX: ',$test0305)"/>
						<xsl:if test="$test0305 eq 'true'">
							<ctl:message select="'******************** 03.05.BBOX ********************'"/>
							<ctl:call-test name="sos:GCBBOX">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.06.OperatorDuringAndTEquals: ',$test0306)"/>
						<xsl:if test="$test0306 eq 'true'">
							<ctl:message select="'******************** 03.06.OperatorDuringAndTEquals ********************'"/>
							<ctl:call-test name="sos:GCOperatorDuringAndTEquals">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.07.ParametersInObservationOffering: ',$test0307)"/>
						<xsl:if test="$test0307 eq 'true'">
							<ctl:message select="'******************** 03.07.ParametersInObservationOffering ********************'"/>
							<ctl:call-test name="sos:GCParametersInObservationOffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.08.ResponseFormat: ',$test0308)"/>
						<xsl:if test="$test0308 eq 'true'">
							<ctl:message select="'******************** 03.08.ResponseFormat ********************'"/>
							<ctl:call-test name="sos:GCResponseFormat">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.09.InsertionCapabilities: ',$test0309)"/>
						<xsl:if test="$test0309 eq 'true'">
							<ctl:message select="'******************** 03.08.InsertionCapabilities ********************'"/>
							<ctl:call-test name="sos:GCInsertionCapabilities">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0301 Send GetCapabilities request with parameter service=SOS ,check the response is valid capabilities. -->
		<ctl:test name="sos:GCCorrectServiceParameter">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="capabilitiesRootElementName" />
			<ctl:param name="capabilitiesResponseSchemaLocation" />
			<ctl:param name="capabilitiesResponseSchemaType" />
			<ctl:assertion>
			The response to a GetCapabilities request that includes a service parameter
			with CORRECT VALUE provided shall include an complete capabilities document.
			</ctl:assertion>
			<ctl:comment>
			Pass if all of the following conditions are true:
				(1) the response is schema valid;
				(2) the root document matches the root element name.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="request">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">GetCapabilities</ctl:param>				   
								<ctl:param name="service"><xsl:value-of select="'SOS'" /></ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetCapabilities>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"/>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>	
				<xsl:choose>
					<xsl:when test="not($request/*)">
						<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($request/*[1]))" />
						<xsl:choose>
							<xsl:when test="not($responseRoot=$capabilitiesRootElementName)">
								<ctl:message>FAILURE:  The root element from the response to a GetCapabilities request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$capabilitiesRootElementName" />"</ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Passed.</ctl:message>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>
		</ctl:test>
		
		<!-- 0302 Check test03 Capabilities OperationMetadata must contain GetCapabilities DescribeSensor GetObservation operations -->
		<ctl:test name="sos:GCOperationMetadataMandatory">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>There are three operations ,GetCapabilities DescribeSensor and GetObservation, in OperationMetadata in the Capabilities.</ctl:assertion>
			<ctl:comment>Pass if there are at least three operations in OperationMetadata Sections in the Capabilities.</ctl:comment>
			<ctl:code>
				<xsl:variable name="GetCapabilities" select="count($CapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities'])" />
				<xsl:variable name="DescribeSensor" select="count($CapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeSensor'])" />
				<xsl:variable name="GetObservation" select="count($CapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetObservation'])" />
				<xsl:choose>
					<xsl:when test="not($GetCapabilities=1)">
						<ctl:message>FAILURE: Mandatory Operation "GetCapabilities" Missed in OperationMetadata.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($DescribeSensor=1)">
						<ctl:message>FAILURE: Mandatory Operation "DescribeSensor" Missed in OperationMetadata.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($GetObservation=1)">
						<ctl:message>FAILURE: Mandatory Operation "GetObservation" Missed in OperationMetadata.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Passed.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0303 Check test03 Capabilities must have and only have those sections ServiceIdentification ,ServiceProvider ,OperationMetadata ,filter_Capabilities ,contents [,extension] -->
		<ctl:test name="sos:GCRequiredSectionsInCapabilities">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>There are required sections,ServiceIdentification ServiceProvider OperationMetadata filter_Capabilities and contents in the Capabilities.</ctl:assertion>
			<ctl:comment>Pass if there are at least required sections in the Capabilities.</ctl:comment>
			<ctl:code>
				<xsl:variable name="ServiceIdentification" select="count($CapabilitiesResponse//ows:ServiceIdentification)" />
				<xsl:variable name="ServiceProvider" select="count($CapabilitiesResponse//ows:ServiceProvider)" />
				<xsl:variable name="OperationMetadata" select="count($CapabilitiesResponse//ows:OperationsMetadata)" />
				<xsl:variable name="filterCapabilities" select="count($CapabilitiesResponse//sos:filterCapabilities)" />
				<xsl:variable name="contents" select="count($CapabilitiesResponse//sos:contents)" />
				<xsl:choose>
					<xsl:when test="not($ServiceIdentification=1)">
						<ctl:message>FAILURE: Required section "ServiceIdentification" Missed in the Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($ServiceProvider=1)">
						<ctl:message>FAILURE: Required section "ServiceProvider" Missed in the Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($OperationMetadata=1)">
						<ctl:message>FAILURE: Required section "OperationMetadata" Missed in the Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($filterCapabilities=1)">
						<ctl:message>FAILURE: Required section "filterCapabilities" Missed in the Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($contents=1)">
						<ctl:message>FAILURE: Required section "contents" Missed in the Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Passed.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0304 Send GetCapabilities request with section='WrongSections',server must return an exception with exceptionCode='InvalidParameterValue' and location='section'. -->
		<ctl:test name="sos:GCWrongSectionParameter">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="capabilitiesRootElementName" />
			<ctl:param name="capabilitiesResponseSchemaLocation" />
			<ctl:param name="capabilitiesResponseSchemaType" />
			<ctl:assertion>
			The response to a GetCapabilities request that includes a sections parameter with WRONG VALUE provided 
			shall be an exception with exceptionCode=InvalidParameterValue and location=section.
			</ctl:assertion>
			<ctl:comment>
			Pass if the response is an exception response and schema valid and exceptionCode=InvalidParameterValue and location=section.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="request">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">GetCapabilities</ctl:param>				   
								<ctl:param name="sections">WrongSections</ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<ows:Sections>
											<ows:Section>WrongSections</ows:Section>
										</ows:Sections>
									</sos:GetCapabilities>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<ows:Sections>
											<ows:Section>WrongSections</ows:Section>
										</ows:Sections>
									</sos:GetCapabilities>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>	
				<xsl:choose>
					<xsl:when test="not($request/*)">
						<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$request/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($request)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($request)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetCapabilities request with section= 'WrongSections'.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$request" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('section')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with section= 'WrongSections'. </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "section".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>
		</ctl:test>
		
		<!-- 0305 Check test03 Capabilities <sos:filterCapabilities>/<fes:Filter_Capabilities>/<fes:Spatial_Capabilities>/<fes:SpatialOperators> must contain <fes:SpatialOperator name="BBOX"/> -->
		<ctl:test name="sos:GCBBOX">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>
			The spatial operator BBOX is listed in the
			FilterCapabilities of the Capabilities document
			</ctl:assertion>
			<ctl:comment>
			Pass if the BBOX operator is listed in the FilterCapabilities section.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="BBOX" select="count($CapabilitiesResponse//sos:filterCapabilities/fes:Filter_Capabilities/fes:Spatial_Capabilities/fes:SpatialOperators/fes:SpatialOperator[@name='BBOX'])" />
				<xsl:choose>
					<xsl:when test="not($BBOX=1)">
						<ctl:message>FAILURE: The BBOX operator is not listed in the FilterCapabilities section.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Passed.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0306 Check test03 Capabilities <sos:filterCapabilities>/<fes:Filter_Capabilities>/<fes:Temporal_Capabilities>/<fes:TemporalOperators> must contain <fes:TemporalOperator name="During"/> and <fes:TemporalOperator name="TEquals"/> -->
		<ctl:test name="sos:GCOperatorDuringAndTEquals">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>
			The During and TEquals TemporalOperators are listed in the
			FilterCapabilities of the Capabilities document.
			</ctl:assertion>
			<ctl:comment>
			Pass if the During and TEquals TemporalOperators are listed in the FilterCapabilities section.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="During" select="count($CapabilitiesResponse//sos:filterCapabilities/fes:Filter_Capabilities/fes:Temporal_Capabilities/fes:TemporalOperators/fes:TemporalOperator [@name='During'])" />
				<xsl:variable name="TEquals" select="count($CapabilitiesResponse//sos:filterCapabilities/fes:Filter_Capabilities/fes:Temporal_Capabilities/fes:TemporalOperators/fes:TemporalOperator [@name='TEquals'])" />
				<xsl:choose>
					<xsl:when test="not($During=1)">
						<ctl:message>FAILURE: The During TemporalOperator is not listed in the FilterCapabilities section.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($TEquals=1)">
						<ctl:message>FAILURE: The TEquals TemporalOperator is not listed in the FilterCapabilities section.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Passed.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0307 Check test03 Capabilities Each ObservationOffering  
			Element 					count
			swes:identifier				1
			observableProperty			1..* - -maybe in Contents
			procedure 					1
			procedureDescriptionFormat 	1..* - -maybe in Contents
			observationType 			1..* - -maybe in Contents
			observedArea 				0..1
			phenomenonTime 				0..1
			responseFormat 				1..* - -maybe in Contents
			resultTime 					0..1 -->
		<ctl:test name="sos:GCParametersInObservationOffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>
			Every elements in each observationOffering occur specified times.
			</ctl:assertion>
			<ctl:comment>
			Pass if all elements in each observationOffering or in Contents occur specified times.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="ContentsobservableProperty" select="count($CapabilitiesResponse//sos:Contents/swes:observableProperty)" />
				<xsl:variable name="ContentsprocedureDescriptionFormat" select="count($CapabilitiesResponse//sos:Contents/swes:procedureDescriptionFormat)" />
				<xsl:variable name="ContentsobservationType" select="count($CapabilitiesResponse//sos:Contents/sos:observationType)" />
				<xsl:variable name="ContentsresponseFormat" select="count($CapabilitiesResponse//sos:Contents/sos:responseFormat)" />
				<xsl:for-each select="$CapabilitiesResponse//sos:ObservationOffering">
					<ctl:message>1.identifier 1 </ctl:message>
					<xsl:variable name="identifier" select="./swes:identifier" />
					<ctl:message>identifier = <xsl:value-of select="$identifier"/></ctl:message>
					<xsl:variable name="identifierCount" select="count(./swes:identifier)" />
					<xsl:if test="not($identifierCount=1)">
						<ctl:message>FAILURE: Each ObservationOffering must contains one and only one identifier.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>2.observableProperty 1 or more than 1</ctl:message>
					<xsl:variable name="observablePropertyCount" select="count(./swes:observableProperty)" />
					<xsl:if test="($ContentsobservableProperty=0 and $observablePropertyCount=0)">
						<ctl:message>FAILURE: The Contents or Each ObservationOffering must contains one or more observableProperty.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>3.procedure 1</ctl:message>
					<xsl:variable name="procedureCount" select="count(./swes:procedure)" />
					<xsl:if test="not($procedureCount=1)">
						<ctl:message>FAILURE: Each ObservationOffering must contains one and only one procedure.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>4.procedureDescriptionFormat 1 or more than 1</ctl:message>
					<xsl:variable name="procedureDescriptionFormatCount" select="count(./swes:procedureDescriptionFormat)" />
					<xsl:if test="($ContentsprocedureDescriptionFormat=0 and $procedureDescriptionFormatCount=0)">
						<ctl:message>FAILURE: The Contents or Each ObservationOffering must contains one or more procedureDescriptionFormat.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>5.observationType 1 or more than 1</ctl:message>
					<xsl:variable name="observationTypeCount" select="count(./sos:observationType)" />
					<xsl:if test="($ContentsobservationType=0 and $observationTypeCount=0)">
						<ctl:message>FAILURE: The Contents or Each ObservationOffering must contains one or more observationType.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>6.observedArea 0 or 1</ctl:message>
					<xsl:variable name="observedAreaCount" select="count(./sos:observedArea)" />
					<xsl:if test="not($observedAreaCount=1 or $observedAreaCount=0)">
						<ctl:message>FAILURE: Each ObservationOffering must contains zero or one observedArea.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>7.phenomenonTime 0 or 1</ctl:message>
					<xsl:variable name="phenomenonTimeCount" select="count(./sos:phenomenonTime)" />
					<xsl:if test="not($phenomenonTimeCount=1 or $phenomenonTimeCount=0)">
						<ctl:message>FAILURE: Each ObservationOffering must contains zero or one phenomenonTime.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>8.responseFormat 1 or more than 1</ctl:message>
					<xsl:variable name="responseFormatCount" select="count(./sos:responseFormat)" />
					<xsl:if test="($ContentsresponseFormat=0 and $responseFormatCount=0)">
						<ctl:message>FAILURE: The Contents or Each ObservationOffering must contains one or more responseFormat.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>9.resultTime 0 or 1</ctl:message>
					<xsl:variable name="resultTimeCount" select="count(./sos:resultTime)" />
					<xsl:if test="not($resultTimeCount=1 or $resultTimeCount=0)">
						<ctl:message>FAILURE: Each ObservationOffering must contains zero or one resultTime.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>

		<!-- 0308 Check test03 Capabilities ,in each ObservationOffering the responseFormat must contain "http://www.opengis.net/om/2.0". -->
		<ctl:test name="sos:GCResponseFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>
			The responseFormat element which value is "http://www.opengis.net/om/2.0" is listed in the
			ObservationOffering or in the Contents of the Capabilities document.
			</ctl:assertion>
			<ctl:comment>
			Pass if the responseFormat element which value is "http://www.opengis.net/om/2.0" is listed in the ObservationOffering or Contents element.
			</ctl:comment>
			<ctl:code>
				<xsl:for-each select="$CapabilitiesResponse//sos:ObservationOffering">
					<xsl:variable name="identifier" select="./swes:identifier" />
					<xsl:variable name="responseFormat" select="count(.[sos:responseFormat='http://www.opengis.net/om/2.0']/sos:responseFormat)" />
					<xsl:if test="$responseFormat=0">
						<ctl:message>FAILURE: The ObservationOffering (identifier = <xsl:value-of select="$identifier"/>) must contain responseFormat which value is "http://www.opengis.net/om/2.0".</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>

		<!-- 0309 Check test03 Capabilities contains InsertionCapabilities and check that InsertionCapabilities are valid according to the model defined SOS 2.0 specification.. -->
		<ctl:test name="sos:GCInsertionCapabilities">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>
			Check that the InsertionCapabilities is contained in a Capabilities response, if it is requested.
			If existed ,check that the InsertionCapabilities is structured as defined in Subclause 10.1.1 of SOS 2.0 specification.
			</ctl:assertion>
			<ctl:comment>
			Pass if the InsertionCapabilities is contained in the Capabilities response and they are valid.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="SectionsInsertionCapabilitiesCount" select="count($CapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:Parameter[@name='Sections']/ows:AllowedValues[ows:Value='InsertionCapabilities']/ows:Value)" />
				<xsl:choose>
					<xsl:when test="$SectionsInsertionCapabilitiesCount > 0">
						<xsl:variable name="InsertionCapabilitiesCount" select="count($CapabilitiesResponse//sos:extension/sos:InsertionCapabilities)" />
						<xsl:choose>
							<xsl:when test="$InsertionCapabilitiesCount > 0">
								<xsl:variable name="procedureDescriptionFormatCount" select="count($CapabilitiesResponse//sos:extension/sos:InsertionCapabilities/sos:procedureDescriptionFormat)" />
								<xsl:variable name="featureOfInterestTypeCount" select="count($CapabilitiesResponse//sos:extension/sos:InsertionCapabilities/sos:featureOfInterestType)" />
								<xsl:variable name="observationTypeCount" select="count($CapabilitiesResponse//sos:extension/sos:InsertionCapabilities/sos:observationType)" />
								<xsl:if test="$procedureDescriptionFormatCount eq 0">
									<ctl:message>Elements "sos:procedureDescriptionFormat" must be contained in sos:InsertionCapabilities (one or many).</ctl:message>
									<ctl:fail/>
								</xsl:if>
								<xsl:if test="$featureOfInterestTypeCount eq 0">
									<ctl:message>Elements "sos:featureOfInterestType" must be contained in sos:InsertionCapabilities (one or many).</ctl:message>
									<ctl:fail/>
								</xsl:if>
								<xsl:if test="$observationTypeCount eq 0">
									<ctl:message>Elements "sos:observationType" must be contained in sos:InsertionCapabilities (one or many).</ctl:message>
									<ctl:fail/>
								</xsl:if>
								<xsl:for-each select="$CapabilitiesResponse//sos:extension/sos:InsertionCapabilities/*">
									<xsl:variable name="target" select="local-name-from-QName(node-name(.))" />
									<xsl:if test="not(($target eq string('procedureDescriptionFormat')) or ($target eq string('featureOfInterestType')) or ($target eq string('observationType')) or ($target eq string('supportedEncoding')))">
										<ctl:message>Elements "<xsl:value-of select="$target"/>" in InsertionCapabilities must be one of "procedureDescriptionFormat,featureOfInterestType,observationType,supportedEncoding".</ctl:message>
										<ctl:fail/>
									</xsl:if>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Elements "InsertionCapabilities" must be contained in sos:extension in the capabilities.</ctl:message>
								<ctl:fail/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Section "InsertionCapabilities" is no contained in OperationsMetadata/Sections. So skip this test.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	</ctl:package>
	
	<!-- 04.SOS Core: DescribeSensor -->
		<!-- 04 go each single test-->
	<ctl:package>
		<ctl:test name="sos:DescribeSensor-Test">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="test0401" />
			<ctl:param name="test0402" />
			<ctl:param name="test0403" />
			<ctl:param name="test0404" />
			<ctl:param name="test0405" />
			<ctl:param name="test0406" />
			<ctl:param name="test0407" />
			<ctl:param name="test0408" />
			<ctl:param name="test0409" />
			<ctl:param name="test0410" />
			<ctl:param name="test0411" />
			<ctl:assertion>Execute DescribeSensor Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<xsl:if test="$test0401 eq 'true'">
					<ctl:message select="'******************** 04.01.RequestNoService ********************'"/>
					<ctl:call-test name="sos:DSRequestNoService">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0402 eq 'true'">
					<ctl:message select="'******************** 04.02.RequestNullService ********************'"/>
					<ctl:call-test name="sos:DSRequestNullService">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0403 eq 'true'">
					<ctl:message select="'******************** 04.03.RequestInvalidService ********************'"/>
					<ctl:call-test name="sos:DSRequestInvalidService">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0404 eq 'true'">
					<ctl:message select="'******************** 04.04.RequestNoVersion ********************'"/>
					<ctl:call-test name="sos:DSRequestNoVersion">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0405 eq 'true'">
					<ctl:message select="'******************** 04.05.RequestNullVersion ********************'"/>
					<ctl:call-test name="sos:DSRequestNullVersion">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0406 eq 'true'">
					<ctl:message select="'******************** 04.06.RequestInvalidVersion ********************'"/>
					<ctl:call-test name="sos:DSRequestInvalidVersion">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0407 eq 'true'">
					<ctl:message select="'******************** 04.07.RequestNullProcedure ********************'"/>
					<ctl:call-test name="sos:DSRequestNullProcedure">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0408 eq 'true'">
					<ctl:message select="'******************** 04.08.RequestInvalidProcedure ********************'"/>
					<ctl:call-test name="sos:DSRequestInvalidProcedure">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0409 eq 'true'">
					<ctl:message select="'******************** 04.09.RequestNullProcedureDescriptionFormat ********************'"/>
					<ctl:call-test name="sos:DSRequestNullProcedureDescriptionFormat">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0410 eq 'true'">
					<ctl:message select="'******************** 04.10.RequestInvalidProcedureDescriptionFormat ********************'"/>
					<ctl:call-test name="sos:DSRequestInvalidProcedureDescriptionFormat">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0411 eq 'true'">
					<ctl:message select="'******************** 04.11.RequestValidRequest ********************'"/>
					<ctl:call-test name="sos:DSRequestValidRequest">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
			</ctl:code>
		</ctl:test>
	
		<!-- 0401 Send DescribeSensor request without parameter service by KVP,the response must be a valid exception with code "MissingParameterValue " and locator "service".. -->
		<!-- 0401 Send DescribeSensor request without parameter service by POST or SOAP ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0".. -->
		<ctl:test name="sos:DSRequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>
			Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- get a valid procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="version">2.0.0</ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('service')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0402 Send DescribeSensor request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:DSRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="string('')" /></ctl:param>
								<ctl:param name="version">2.0.0</ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0403 Send DescribeSensor request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:DSRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="string('999')" /></ctl:param>
								<ctl:param name="version">2.0.0</ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="999" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="999" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0404 Send DescribeSensor request without parameter version By KVP,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<!-- 0404 Send DescribeSensor request without parameter version By SOAP or POST,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0".. -->
		<ctl:test name="sos:DSRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>
			Send a request (KVP) without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request (POST or SOAP) without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="string('SOS')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('version')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0405 Send DescribeSensor request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:DSRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="string('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="string('')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0406 Send DescribeSensor request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:DSRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="string('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="string('999')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="999" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="999" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid version parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0407 Send DescribeSensor request with null parameter procedure ,the response must be a valid exception with code "MissingParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:DSRequestNullProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with null parameter "procedure",and the response must be a valid exception with code "MissingParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- set a invalid procedure -->
				<xsl:variable name="procedure" select="string('')" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="string('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="string('2.0.0')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null procedure parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0408 Send DescribeSensor request with invalid parameter procedure ,the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:DSRequestInvalidProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- set a invalid procedure -->
				<xsl:variable name="procedure" select="current-dateTime()" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="string('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="string('2.0.0')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid procedure parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0409 Send DescribeSensor request with null parameter ProcedureDescriptionFormat ,the response must be a valid exception with code "MissingParameterValue" and locator "ProcedureDescriptionFormat".. -->
		<ctl:test name="sos:DSRequestNullProcedureDescriptionFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with null parameter "ProcedureDescriptionFormat",and the response must be a valid exception with code "MissingParameterValue" and locator "ProcedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "ProcedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!--  get procedure value first -->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- set a invalid procedureDescriptionFormat -->
				<xsl:variable name="procedureDescriptionFormat" select="string('')" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="string('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="string('2.0.0')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedureDescriptionFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedureDescriptionFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null ProcedureDescriptionFormat parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedureDescriptionFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0410 Send DescribeSensor request with invalid parameter ProcedureDescriptionFormat ,the response must be a valid exception with code "InvalidParameterValue" and locator "ProcedureDescriptionFormat".. -->
		<ctl:test name="sos:DSRequestInvalidProcedureDescriptionFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with invalid parameter "ProcedureDescriptionFormat",and the response must be a valid exception with code "InvalidParameterValue" and locator "ProcedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "ProcedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!--  get procedure value first -->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- set a invalid procedureDescriptionFormat -->
				<xsl:variable name="procedureDescriptionFormat" select="current-dateTime()" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="string('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="string('2.0.0')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedureDescriptionFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedureDescriptionFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid procedureDescriptionFormat parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedureDescriptionFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0411 Send valid DescribeSensor request, the response must be a valid sensorML. -->
		<ctl:test name="sos:DSRequestValidRequest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a valid request ,and there must be have a valid DescribeSensor response returned. </ctl:assertion>
			<ctl:comment>Pass if the DescribeSensor responses for all procedures listed in GetCapabilities response are valid; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- get the main procedureDescriptionFormat -->
				<xsl:variable name="main_procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents/sos:SOSContents/swes:procedureDescriptionFormat" />
				<!-- check every offering -->
				<xsl:for-each select="$getCapabilitiesResponse//sos:contents/sos:SOSContents/swes:offering">
					<xsl:variable name="procedure" select="./sos:SensorOffering/swes:procedure" />
					<xsl:variable name="inner_procedureDescriptionFormat" select="./sos:SensorOffering/swes:observableProperty" />
					<xsl:variable name="procedureDescriptionFormat">
						<xsl:if test="$inner_procedureDescriptionFormat"><xsl:value-of select="$inner_procedureDescriptionFormat" /></xsl:if>
						<xsl:if test="not($inner_procedureDescriptionFormat)"><xsl:value-of select="$main_procedureDescriptionFormat" /></xsl:if>
					</xsl:variable>
					<!-- 對每個 procedure 發出request 檢查回應是否正確 (swes:DescribeSensorResponse 開頭,有相同的 procedureDescriptionFormat )-->
					<xsl:variable name="describeSensorResponse">
						<xsl:choose>
							<xsl:when test="($isGET)">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$serviceURL"/>
									</ctl:url>
									<ctl:method>get</ctl:method>
									<ctl:param name="request">DescribeSensor</ctl:param>
									<ctl:param name="service"><xsl:value-of select="string('SOS')" /></ctl:param>
									<ctl:param name="version"><xsl:value-of select="string('2.0.0')" /></ctl:param>
									<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
									<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
									<ctl:call-function name="sosFunctions:validateExceptionReport" />
								</ctl:request>
							</xsl:when>
							<xsl:when test="($isSOAP)">
								<ctl:soap-request version="1.2" charset="UTF-8">
									<ctl:url>
										<xsl:value-of select="$serviceURL"/>
									</ctl:url> 
									<ctl:body>
										<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
											<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
											<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										</swes:DescribeSensor>
									</ctl:body>
									<ctl:call-function name="sosFunctions:validateDescribeSensorResponseNoExceptionReportSOAP" />
								</ctl:soap-request>
							</xsl:when>
							<xsl:otherwise>
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$serviceURL" />
									</ctl:url>
									<ctl:method>post</ctl:method>
									<ctl:body>
										<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
											<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
											<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										</swes:DescribeSensor>
									</ctl:body>
									<ctl:call-function name="sosFunctions:validateDescribeSensorResponseNoExceptionReport" />
								</ctl:request>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="not($describeSensorResponse/*)">
							<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="ResponseRoot" select="local-name-from-QName(node-name($describeSensorResponse/*[1]))" />
							<xsl:variable name="TargetRoot" select="string('DescribeSensorResponse')" />
							<!-- check procedureDescriptionFormat -->
							<xsl:variable name="RespnseFormat" select="$describeSensorResponse//swes:procedureDescriptionFormat" />
							<xsl:choose>
								<xsl:when test="not($ResponseRoot=$TargetRoot)">
									<ctl:message>The root element from the response to a DescribeSensor request "<xsl:value-of select="$ResponseRoot" />" does not match the expected root element of "<xsl:value-of select="$TargetRoot" />"</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not($procedureDescriptionFormat=$RespnseFormat)">
									<ctl:message>The procedureDescriptionFormat from the response to a DescribeSensor request :"<xsl:value-of select="$RespnseFormat" />does not match the procedureDescriptionFormat :"<xsl:value-of select="$procedureDescriptionFormat" />" in the DescribeSensor request.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>procedure:"<xsl:value-of select="$procedure" />" check ok!</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
		
	</ctl:package>

	<!-- 05.SOS Core: GetObservation -->
		<!-- 05 Send a valid GetObservation (some parameters) ,Check the response (valid GetObservationResponse) and pass the GetObservationResponse to other tests-->
	<ctl:package>
		<ctl:test name="sos:GetObservation-Test">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test0501" />
			<ctl:param name="test0502" />
			<ctl:param name="test0503" />
			<ctl:param name="test0504" />
			<ctl:param name="test0505" />
			<ctl:param name="test0506" />
			<ctl:param name="test0507" />
			<ctl:param name="test0508" />
			<ctl:param name="test0509" />
			<ctl:param name="test0510" />
			<ctl:param name="test0511" />
			<ctl:param name="test0512" />
			<ctl:param name="test0513" />
			<ctl:param name="test0514" />
			<ctl:param name="test0515" />
			<ctl:param name="test0516" />
			<ctl:param name="test0517" />
			<ctl:param name="test0518" />
			<ctl:param name="test0519" />
			<ctl:param name="test0520" />
			<ctl:assertion>Execute GetObservation Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 從GetCapabilities取得有效的 offering,procedure,observedProperty -->
				<!-- get a valid offering-->
				<xsl:variable name="offering" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:identifier" />
				<!-- get a valid procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure[1]" />
				<!-- get a valid observableProperty-->
				<xsl:variable name="observableProperty" select="$getCapabilitiesResponse//sos:contents//swes:observableProperty[1]" />
				<!-- get a valid responseFormat-->
				<xsl:variable name="responseFormat" select="string('http%3A%2F%2Fwww.opengis.net%2Fom%2F2.0')" />
				
				<!-- get a valid getObservationResponse-->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$observationResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$test0501 eq 'true'">
							<ctl:message select="'******************** 05.01.RequestNoService ********************'"/>
							<ctl:call-test name="sos:GORequestNoService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0502 eq 'true'">
							<ctl:message select="'******************** 05.02.RequestNullService ********************'"/>
							<ctl:call-test name="sos:GORequestNullService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0503 eq 'true'">
							<ctl:message select="'******************** 05.03.RequestInvalidService ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0504 eq 'true'">
							<ctl:message select="'******************** 05.04.RequestNoVersion ********************'"/>
							<ctl:call-test name="sos:GORequestNoVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0505 eq 'true'">
							<ctl:message select="'******************** 05.05.RequestNullVersion ********************'"/>
							<ctl:call-test name="sos:GORequestNullVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0506 eq 'true'">
							<ctl:message select="'******************** 05.06.RequestInvalidVersion ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0507 eq 'true'">
							<ctl:message select="'******************** 05.07.RequestNullOffering ********************'"/>
							<ctl:call-test name="sos:GORequestNullOffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0508 eq 'true'">
							<ctl:message select="'******************** 05.08.RequestInvalidOffering ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidOffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0509 eq 'true'">
							<ctl:message select="'******************** 05.09.RequestNullObservedProperty ********************'"/>
							<ctl:call-test name="sos:GORequestNullObservedProperty">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0510 eq 'true'">
							<ctl:message select="'******************** 05.10.RequestInvalidObservedProperty ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidObservedProperty">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0511 eq 'true'">
							<ctl:message select="'******************** 05.11.RequestNullProcedure ********************'"/>
							<ctl:call-test name="sos:GORequestNullProcedure">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0512 eq 'true'">
							<ctl:message select="'******************** 05.12.RequestInvalidProcedure ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidProcedure">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0513 eq 'true'">
							<ctl:message select="'******************** 05.13.RequestNullFeatureOfInterest ********************'"/>
							<ctl:call-test name="sos:GORequestNullFeatureOfInterest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0514 eq 'true'">
							<ctl:message select="'******************** 05.14.RequestInvalidFeatureOfInterest ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidFeatureOfInterest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0515 eq 'true'">
							<ctl:message select="'******************** 05.15.RequestNullResponseFormat ********************'"/>
							<ctl:call-test name="sos:GORequestNullResponseFormat">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0516 eq 'true'">
							<ctl:message select="'******************** 05.16.RequestInvalidResponseFormat ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidResponseFormat">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0517 eq 'true'">
							<ctl:message select="'******************** 05.17.RequestNoResponseFormat ********************'"/>
							<ctl:call-test name="sos:GORequestNoResponseFormat">
								<ctl:with-param name="getObservationResponse" select="$getObservationResponse" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0518 eq 'true'">
							<ctl:message select="'******************** 05.18.RequestOtherResponseFormat ********************'"/>
							<ctl:call-test name="sos:GORequestOtherResponseFormat">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0519 eq 'true'">
							<ctl:message select="'******************** 05.19.RequestEmptyObservation ********************'"/>
							<ctl:call-test name="sos:GORequestEmptyObservation">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0520 eq 'true'">
							<ctl:message select="'******************** 05.20.RequestResponseExceedsSizeLimit ********************'"/>
							<ctl:call-test name="sos:GORequestResponseExceedsSizeLimit">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0501 Send GetObservation request without parameter service by KVP,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<!-- 0501 Send GetObservation request without parameter service by POST or SOAP,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GORequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>
			Send a request without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('service')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0502 Send GetObservation request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:GORequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service"></ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0503 Send GetObservation request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:GORequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">ASDF</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 0504 Send GetObservation request (KVP) without parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<!-- 0504 Send GetObservation request (POST or SOAP) without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GORequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>
			Send a request without parameter "version",and the response (KVP) must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request without parameter "version",and the response (Post or SOAP) must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if (KVP) the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if (POST or SOAP) the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('version')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0505 Send GetObservation request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:GORequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version"></ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0506 Send GetObservation request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:GORequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">999</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0507 Send GetObservation request with null Element offering ,the response must be a valid exception with code "MissingParameterValue" and locator "offering".. -->
		<ctl:test name="sos:GORequestNullOffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "offering",and the response must be a valid exception with code "MissingParameterValue" and locator "offering". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid offering parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('offering')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null offering parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "offering".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0508 Send GetObservation request with invalid Element offering ,the response must be a valid exception with code "InvalidParameterValue" and locator "offering".. -->
		<ctl:test name="sos:GORequestInvalidOffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "offering",and the response must be a valid exception with code "InvalidParameterValue" and locator "offering". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="current-dateTime()" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="current-dateTime()" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid offering parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('offering')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid offering parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "offering".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 0509 Send GetObservation request with null Element observedProperty ,the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GORequestNullObservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "observedProperty",and the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid observedProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null observedProperty parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observedProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0510 Send GetObservation request with invalid Element observedProperty ,the response must be a valid exception with code "InvalidParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GORequestInvalidObservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "observableProperty",and the response must be a valid exception with code "InvalidParameterValue" and locator "observableProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observableProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="current-dateTime()" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid observedProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid observedProperty parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observedProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0511 Send GetObservation request with null Element procedure ,the response must be a valid exception with code "MissingParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:GORequestNullProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "procedure",and the response must be a valid exception with code "MissingParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null procedure parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0512 Send GetObservation request with invalid Element procedure ,the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:GORequestInvalidProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="current-dateTime()" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="current-dateTime()" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid procedure parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0513 Send GetObservation request with null Element featureOfInterest ,the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest".. -->
		<ctl:test name="sos:GORequestNullFeatureOfInterest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "featureOfInterest",and the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="featureOfInterest"></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:featureOfInterest></sos:featureOfInterest>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:featureOfInterest></sos:featureOfInterest>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid featureOfInterest parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null featureOfInterest parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "featureOfInterest".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0514 Send GetObservation request with invalid Element featureOfInterest ,the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest".. -->
		<ctl:test name="sos:GORequestInvalidFeatureOfInterest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "featureOfInterest",and the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="featureOfInterest"><xsl:value-of select="current-dateTime()" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:featureOfInterest><xsl:value-of select="current-dateTime()" /></sos:featureOfInterest>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:featureOfInterest><xsl:value-of select="current-dateTime()" /></sos:featureOfInterest>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid featureOfInterest parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid featureOfInterest parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "featureOfInterest".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0515 Send GetObservation request with null Element responseFormat ,the response must be a valid exception with code "MissingParameterValue" and locator "responseFormat".. -->
		<ctl:test name="sos:GORequestNullResponseFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "responseFormat",and the response must be a valid exception with code "MissingParameterValue" and locator "responseFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "responseFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="responseFormat"></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid responseFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('responseFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null responseFormat parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "responseFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0516 Send GetObservation request with invalid Element responseFormat ,the response must be a valid exception with code "InvalidParameterValue" and locator "responseFormat".. -->
		<ctl:test name="sos:GORequestInvalidResponseFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "responseFormat",and the response must be a valid exception with code "InvalidParameterValue" and locator "responseFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "responseFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="responseFormat"><xsl:value-of select="current-dateTime()" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat><xsl:value-of select="current-dateTime()" /></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat><xsl:value-of select="current-dateTime()" /></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid responseFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('responseFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid responseFormat parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "responseFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0517 Send GetObservation request without Element responseFormat ,the response must be a valid GetObservationResponse which format is O&M 2.0 -->
		<ctl:test name="sos:GORequestNoResponseFormat">
			<ctl:param name="getObservationResponse" />
			<ctl:assertion>Check the response format of GetObservation which request without responseFormat parameter is 'OM 2.0'.</ctl:assertion>
			<ctl:comment>For The GetObservation request without parameter responseFormat ,the response must be a valid GetObservationResponse which format is "OM 2.0"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- to the properties inherited from SWES ExtensibleResponse, the SOS GetObservationResponse shall include the properties observationData. -->
				<xsl:for-each select="$getObservationResponse/*">
					<xsl:variable name="sonElement" select="local-name-from-QName(node-name(.))" />
					<xsl:choose>
						<xsl:when test="not($sonElement=string('observationData'))">
							<ctl:message>The son element "<xsl:value-of select="$sonElement" />" does not match the expected root element of "<xsl:value-of select="string('observationData')" />"</ctl:message>
							<ctl:fail />
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>PASS</ctl:message>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>

		<!-- 0518* Send GetObservation request for each format in content of Capabilities,check each response match specified format -->
		<ctl:test name="sos:GORequestOtherResponseFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with valid parameter responseFormat = "http%3A%2F%2Fwww.opengis.net%2Fom%2F2.0",and the response must be a valid GetObservationResponse with responseFormat is OM 2.0. </ctl:assertion>
			<ctl:comment>Send GetObservation request for each format in content of Capabilities,check each response match specified format; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="targetResponseFormat" select="string('http%3A%2F%2Fwww.opengis.net%2Fom%2F2.0')" />
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="responseFormat"><xsl:value-of select="$targetResponseFormat" /></ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat><xsl:value-of select="$targetResponseFormat" /></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$observationResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat><xsl:value-of select="$targetResponseFormat" /></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<!-- 1.root is sos:GetObservationResponse -->
				<xsl:variable name="Root" select="local-name-from-QName(node-name($getObservationResponse/*[1]))" />
				<xsl:choose>			
					<xsl:when test="not($Root=string('GetObservationResponse'))">
						<ctl:message>The root element from the response to a GetObservation request "<xsl:value-of select="$Root" />" does not match the expected root element of "<xsl:value-of select="string('GetObservationResponse')" />"</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<!-- 2.sonElement of root is sos:observationData -->
						<xsl:for-each select="$getObservationResponse/*[1]/*">
							<xsl:variable name="sonElement" select="local-name-from-QName(node-name(.))" />
							<xsl:choose>
								<xsl:when test="not($sonElement=string('observationData'))">
									<ctl:message>The son element "<xsl:value-of select="$sonElement" />" does not match the expected root element of "<xsl:value-of select="string('observationData')" />"</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>PASS</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0519 Send GetObservation request with stringent conditions,check the response is empty GetObservationResponse.-->
			<!-- Send valid GetObservation request with request parameters that
					do not match any observations to server and verify that the SOS
					responds with an empty GetObservation response. -->
		<ctl:test name="sos:GORequestEmptyObservation">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>
				Send valid GetObservation request with request parameters that
				do not match any observations to server and verify that the SOS
				responds with an empty GetObservation response.</ctl:assertion>
			<ctl:comment>Pass if the observation is empty; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="TemporalOperatorTEquals" select="count($getCapabilitiesResponse//sos:filterCapabilities//fes:TemporalOperator[@name='TEquals'])" />
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<xsl:if test="($TemporalOperatorTEquals>0)">
									<ctl:param name="temporalFilter">om:phenomenonTime,2020-01-01T01:00:00Z</ctl:param>
								</xsl:if>
								<xsl:if test="not($TemporalOperatorTEquals>0)">
									<ctl:param name="temporalFilter">om:phenomenonTime,2020-01-01T01:00:00Z/2020-01-01T01:00:01Z</ctl:param>
								</xsl:if>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<xsl:if test="($TemporalOperatorTEquals>0)">
											<sos:temporalFilter>
												<fes:TEquals>
													<fes:ValueReference>phenomenonTime</fes:ValueReference>
													<gml:TimeInstant gml:id="startPosition">
														<gml:timePosition>2020-01-01T01:00:00.000Z</gml:timePosition>
													</gml:TimeInstant>
												</fes:TEquals>
											</sos:temporalFilter>
										</xsl:if>
										<xsl:if test="not($TemporalOperatorTEquals>0)">
											<sos:temporalFilter>
												<fes:During>
													<fes:ValueReference>phenomenonTime</fes:ValueReference>
													<gml:TimePeriod gml:id="phenomenonTime">
														<gml:beginPosition>2020-01-01T01:00:00.000Z</gml:beginPosition>
														<gml:endPosition>2020-01-01T01:00:01.000Z</gml:endPosition>
													</gml:TimePeriod>
												</fes:During>
											</sos:temporalFilter>
										</xsl:if>
									</sos:GetObservation>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$observationResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<xsl:if test="($TemporalOperatorTEquals>0)">
											<sos:temporalFilter>
												<fes:TEquals>
													<fes:ValueReference>phenomenonTime</fes:ValueReference>
													<gml:TimeInstant gml:id="startPosition">
														<gml:timePosition>2020-01-01T01:00:00.000Z</gml:timePosition>
													</gml:TimeInstant>
												</fes:TEquals>
											</sos:temporalFilter>
										</xsl:if>
										<xsl:if test="not($TemporalOperatorTEquals>0)">
											<sos:temporalFilter>
												<fes:During>
													<fes:ValueReference>phenomenonTime</fes:ValueReference>
													<gml:TimePeriod gml:id="phenomenonTime">
														<gml:beginPosition>2020-01-01T01:00:00.000Z</gml:beginPosition>
														<gml:endPosition>2020-01-01T01:00:01.000Z</gml:endPosition>
													</gml:TimePeriod>
												</fes:During>
											</sos:temporalFilter>
										</xsl:if>
									</sos:GetObservation>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<!-- 1.root is sos:GetObservationResponse -->
				<xsl:variable name="Root" select="local-name-from-QName(node-name($getObservationResponse/*[1]))" />
				<xsl:choose>			
					<xsl:when test="not($Root=string('GetObservationResponse'))">
						<ctl:message>The root element from the response to a GetObservation request "<xsl:value-of select="$Root" />" does not match the expected root element of "<xsl:value-of select="string('GetObservationResponse')" />"</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<!-- 2.sonElement of root is empty -->
						<xsl:choose>
							<xsl:when test="not($getObservationResponse/*[1]/*)">
								<ctl:message>PASS</ctl:message>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>The son element of root must be empty</ctl:message>
								<ctl:fail />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0520 Send GetObservation request with no optional parameters, check if the response is valid response or exception response with code "ResponseExceedsSizeLimit" and omit locator. -->
		<ctl:test name="sos:GORequestResponseExceedsSizeLimit">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>If there are to many observations in the response,the server can return an exception response with ExceptionCode = "ResponseExceedsSizeLimit" and no locator. </ctl:assertion>
			<ctl:comment>Send GetObservation request for each format in content of Capabilities,check each response match specified format; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:call-function name="sosFunctions:validateGetObservationResponse" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateGetCapabilitiesResponseSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" ></sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateGetObservationResponse" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="Root" select="local-name-from-QName(node-name($getObservationResponse/*[1]))" />
						<xsl:if test="$Root=string('ExceptionReport')">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with no parameter specified.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('ResponseExceedsSizeLimit')" />
									<ctl:with-param name="locatorToCheck" select="string('*')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "ResponseExceedsSizeLimit" and omit locator.</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
						<xsl:if test="not($Root=string('ExceptionReport'))">
							<ctl:message>The response is not an Exception response,omit this test.</ctl:message>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
				
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<!-- 06.SOS enhancedOperations: GetFeatureOfInterest -->
	<ctl:package>
		<ctl:test name="sos:GetFeatureOfInterest-Test">
			<ctl:param name="GetObservationURL" />
			<ctl:param name="isGetObservationGET" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="serviceURL" />
			<ctl:param name="hasFOI" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="featureOfInterestResponseContentType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test0601" />
			<ctl:param name="test0602" />
			<ctl:param name="test0603" />
			<ctl:param name="test0604" />
			<ctl:param name="test0605" />
			<ctl:param name="test0606" />
			<ctl:param name="test0607" />
			<ctl:param name="test0608" />
			<ctl:param name="test0609" />
			<ctl:param name="test0610" />
			<ctl:param name="test0611" />
			<ctl:param name="test0612" />
			<ctl:param name="test0613" />
			<ctl:param name="test0614" />
			<ctl:param name="test0615" />
			<ctl:assertion>Execute GetFeatureOfInterest Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				

				<xsl:choose>
					<xsl:when test="not($hasFOI)">
						<ctl:message>The server does not support the operation "GetFeatureOfInterest", so skip this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<!-- get a valid offering-->
						<xsl:variable name="offering" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:identifier" />
						<!-- get a valid procedure-->
						<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure[1]" />
						<!-- get a valid observableProperty-->
						<xsl:variable name="observableProperty" select="$getCapabilitiesResponse//sos:contents//swes:observableProperty[1]" />
						<!-- get a valid featureOfInterest From GetObservation-->
						<xsl:variable name="getObservationResponse">
							<xsl:choose>
								<xsl:when test="($isGetObservationGET)">
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$GetObservationURL"/>
										</ctl:url>
										<ctl:method>get</ctl:method>
										<ctl:param name="service">SOS</ctl:param>	
										<ctl:param name="version">2.0.0</ctl:param>	
										<ctl:param name="request">GetObservation</ctl:param>	
										<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
										<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
										<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$observationResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:when>
								<xsl:when test="($isSOAP)">
									<ctl:soap-request version="1.2" charset="UTF-8">
										<ctl:url>
											<xsl:value-of select="$GetObservationURL"/>
										</ctl:url>
										<ctl:body>
											<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
												xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
												<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
											</sos:GetObservation>
										</ctl:body>
										<parsers:SOAPParser return="content">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema>
														<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
														<xsl:value-of select="$observationResponseSchemaLocation" />
													</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:SOAPParser>
									</ctl:soap-request>
								</xsl:when>
								<xsl:otherwise>
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$GetObservationURL" />
										</ctl:url>
										<ctl:method>post</ctl:method>
										<ctl:body>
											<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
												<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
											</sos:GetObservation>
										</ctl:body>
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$observationResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="featureOfInterest" select="$getObservationResponse//om:featureOfInterest[1]/@href" />
						<!-- Get a getFeatureOfInterestResponse -->
						<xsl:variable name="getFeatureOfInterestResponse">
							<xsl:choose>
								<xsl:when test="($isGET)">
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$serviceURL"/>
										</ctl:url>
										<ctl:method>get</ctl:method>
										<ctl:param name="service">SOS</ctl:param>	
										<ctl:param name="version">2.0.0</ctl:param>	
										<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:when>
								<xsl:when test="($isSOAP)">
									<ctl:soap-request version="1.2" charset="UTF-8">
										<ctl:url>
											<xsl:value-of select="$serviceURL"/>
										</ctl:url>
										<ctl:body>
											<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
												xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
											</sos:GetFeatureOfInterest>
										</ctl:body>
										<parsers:SOAPParser return="content">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema>
														<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
														<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
													</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:SOAPParser>
									</ctl:soap-request>
								</xsl:when>
								<xsl:otherwise>
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$serviceURL" />
										</ctl:url>
										<ctl:method>post</ctl:method>
										<ctl:body>
											<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
											</sos:GetFeatureOfInterest>
										</ctl:body>
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="not($getFeatureOfInterestResponse/*)">
								<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
								<ctl:fail/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:if test="$test0601 eq 'true'">
									<ctl:message select="'******************** 06.01.RequestNoService ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNoService">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0602 eq 'true'">
									<ctl:message select="'******************** 06.02.RequestNullService ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNullService">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0603 eq 'true'">
									<ctl:message select="'******************** 06.03.RequestInvalidService ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidService">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0604 eq 'true'">
									<ctl:message select="'******************** 06.04.RequestNoVersion ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNoVersion">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0605 eq 'true'">
									<ctl:message select="'******************** 06.05.RequestNullVersion ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNullVersion">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0606 eq 'true'">
									<ctl:message select="'******************** 06.06.RequestInvalidVersion ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidVersion">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0607 eq 'true'">
									<ctl:message select="'******************** 06.07.RequestNullProcedure ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNullProcedure">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0608 eq 'true'">
									<ctl:message select="'******************** 06.08.RequestInvalidProcedure ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidProcedure">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0609 eq 'true'">
									<ctl:message select="'******************** 06.09.RequestNullObservedProperty ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNullObservedProperty">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0610 eq 'true'">
									<ctl:message select="'******************** 06.10.RequestInvalidObservedProperty ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidObservedProperty">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0611 eq 'true'">
									<ctl:message select="'******************** 06.11.RequestNullfeatureOfInterest ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNullfeatureOfInterest">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0612 eq 'true'">
									<ctl:message select="'******************** 06.12.RequestInvalidfeatureOfInterest ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidfeatureOfInterest">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0613 eq 'true'">
									<ctl:message select="'******************** 06.13.RequestNULLSpatialFilter ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNULLSpatialFilter">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0614 eq 'true'">
									<ctl:message select="'******************** 06.14.RequestInvalidSpatialFilter ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidSpatialFilter">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0615 eq 'true'">
									<ctl:message select="'******************** 06.15.RequestEmptyResponse ********************'"/>
									<ctl:call-test name="sos:GFOIRequestEmptyResponse">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
				
				
				
			</ctl:code>
		</ctl:test>
		
		<!-- 0601 Send GetFeatureOfInterest request without parameter service by KVP,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<!-- 0601 Send GetFeatureOfInterest request without parameter service by POST or SOAP,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GFOIRequestNoService">
			<ctl:param name="GetObservationURL" />
			<ctl:param name="isGetObservationGET" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>
			Send a request without parameter "service" by KVP,and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request without parameter "service" by POST or SOAP,and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('service')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with no service parameter specified. </ctl:message>
									<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
									<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with no service parameter specified. </ctl:message>
									<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0".</ctl:message>
									<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0602 Send GetFeatureOfInterest request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:GFOIRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service"></ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0603 Send GetFeatureOfInterest request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:GFOIRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">ASDF</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 0604 Send GetFeatureOfInterest request without parameter version (KVP),the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<!-- 0604 Send GetFeatureOfInterest request without parameter version (POST or SOAP),the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GFOIRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>
			Send a request (KVP) without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request (POST or SOAP) without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('version')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
							
							<xsl:variable name="isCorrect">
								
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0605 Send GetFeatureOfInterest request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:GFOIRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version"></ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0606 Send GetFeatureOfInterest request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:GFOIRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">999</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0607 Send GetFeatureOfInterest request with null Element procedure ,the response must be a valid exception with code "MissingParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:GFOIRequestNullProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "procedure",and the response must be a valid exception with code "MissingParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="procedure"></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure></sos:procedure>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure></sos:procedure>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null procedure parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0608 Send GetFeatureOfInterest request with invalid Element procedure ,the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:GFOIRequestInvalidProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="current-dateTime()" /></sos:procedure>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="current-dateTime()" /></sos:procedure>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid procedure parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0609 Send GetFeatureOfInterest request with null Element observedProperty ,the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GFOIRequestNullObservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "observedProperty",and the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="observedProperty"></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observedProperty></sos:observedProperty>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observedProperty></sos:observedProperty>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid observedProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with null observedProperty parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observedProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0610 Send GetFeatureOfInterest request with invalid Element observedProperty ,the response must be a valid exception with code "InvalidParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GFOIRequestInvalidObservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "observableProperty",and the response must be a valid exception with code "InvalidParameterValue" and locator "observableProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observableProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="observedProperty"><xsl:value-of select="current-dateTime()" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid observableProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observableProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid observableProperty parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observableProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0611 Send GetFeatureOfInterest request with null Element featureOfInterest ,the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest".. -->
		<ctl:test name="sos:GFOIRequestNullfeatureOfInterest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "featureOfInterest",and the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="featureOfInterest"></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:featureOfInterest></sos:featureOfInterest>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:featureOfInterest></sos:featureOfInterest>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid featureOfInterest parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with null featureOfInterest parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "featureOfInterest".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0612 Send GetFeatureOfInterest request with invalid Element featureOfInterest ,the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest".. -->
		<ctl:test name="sos:GFOIRequestInvalidfeatureOfInterest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "featureOfInterest",and the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="featureOfInterest"><xsl:value-of select="current-dateTime()" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:featureOfInterest><xsl:value-of select="current-dateTime()" /></sos:featureOfInterest>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:featureOfInterest><xsl:value-of select="current-dateTime()" /></sos:featureOfInterest>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid featureOfInterest parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid featureOfInterest parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "featureOfInterest".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0613 Send GetFeatureOfInterest request with null Element spatialFilter\\ValueReference ,the response must be a valid exception with code "MissingParameterValue" and locator "ValueReference".. -->
		<ctl:test name="sos:GFOIRequestNULLSpatialFilter">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "spatialFilter\\ValueReference",and the response must be a valid exception with code "MissingParameterValue" and locator "ValueReference". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "ValueReference"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="spatialFilter">,0.0,10,0,0.0,10.0,urn:ogc:def:crs:EPSG::4326</ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:spatialFilter>
											<fes:Intersects>
												<fes:ValueReference></fes:ValueReference>
												<gml:Point gml:id="point1" srsName="http://www.opengis.net/def/crs/EPSG/0/4326">
												<gml:pos>0.0 10,0</gml:pos>
												</gml:Point>
											</fes:Intersects>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:spatialFilter>
											<fes:Intersects>
												<fes:ValueReference></fes:ValueReference>
												<gml:Point gml:id="point1" srsName="http://www.opengis.net/def/crs/EPSG/0/4326">
												<gml:pos>0.0 10,0</gml:pos>
												</gml:Point>
											</fes:Intersects>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid ValueReference parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('ValueReference')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with null ValueReference parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "ValueReference".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0614 Send GetFeatureOfInterest request with invalid Element spatialFilter\\ValueReference ,the response must be a valid exception with code "InvalidParameterValue" and locator "ValueReference".. -->
		<ctl:test name="sos:GFOIRequestInvalidSpatialFilter">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "ValueReference",and the response must be a valid exception with code "InvalidParameterValue" and locator "ValueReference". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "ValueReference"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
									<ctl:param name="spatialFilter"><xsl:value-of select="current-dateTime()" />,0.0,10,0,0.0,10.0,urn:ogc:def:crs:EPSG::4326</ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:spatialFilter>
											<fes:Intersects>
												<fes:ValueReference><xsl:value-of select="current-dateTime()" /></fes:ValueReference>
												<gml:Point gml:id="point1" srsName="http://www.opengis.net/def/crs/EPSG/0/4326">
												<gml:pos>0.0 10,0</gml:pos>
												</gml:Point>
											</fes:Intersects>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:spatialFilter>
											<fes:Intersects>
												<fes:ValueReference><xsl:value-of select="current-dateTime()" /></fes:ValueReference>
												<gml:Point gml:id="point1" srsName="http://www.opengis.net/def/crs/EPSG/0/4326">
												<gml:pos>0.0 10,0</gml:pos>
												</gml:Point>
											</fes:Intersects>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid ValueReference parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('ValueReference')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid ValueReference parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "ValueReference".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0615 Send valid GetFeatureOfInterest request with Specific parameter values, check the response is empty. -->
		<ctl:test name="sos:GFOIRequestEmptyResponse">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>
				Send valid GetFeatureOfInterest request with request parameters that
				do not match any response to server and verify that the SOS
				responds with an empty getFeatureOfInterestResponse response.</ctl:assertion>
			<ctl:comment>Pass if the response is empty; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="featureOfInterest"><xsl:value-of select="$featureOfInterest" /></ctl:param>
								<ctl:param name="spatialFilter">om:featureOfInterest/*/sams:shape,179,90,179,90,urn:ogc:def:crs:EPSG::4326</ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
										<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
										<ctl:param name="featureOfInterest"><xsl:value-of select="$featureOfInterest" /></ctl:param>
										<sos:spatialFilter>
											<fes:BBOX>
												<fes:ValueReference>om:featureOfInterest/*/sams:shape</fes:ValueReference>
												<gml:Envelope srsName="urn:ogc:def:crs:EPSG::1234">
													<gml:lowerCorner>179 90</gml:lowerCorner>
													<gml:upperCorner>179 90</gml:upperCorner>
												</gml:Envelope>
											</fes:BBOX>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
										<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
										<ctl:param name="featureOfInterest"><xsl:value-of select="$featureOfInterest" /></ctl:param>
										<sos:spatialFilter>
											<fes:BBOX>
												<fes:ValueReference>om:featureOfInterest/*/sams:shape</fes:ValueReference>
												<gml:Envelope srsName="urn:ogc:def:crs:EPSG::1234">
													<gml:lowerCorner>179 90</gml:lowerCorner>
													<gml:upperCorner>179 90</gml:upperCorner>
												</gml:Envelope>
											</fes:BBOX>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<!-- 1.root is sos:GetFeatureOfInterestResponse -->
				<xsl:variable name="Root" select="local-name-from-QName(node-name($getFeatureOfInterestResponse/*[1]))" />
				<xsl:choose>			
					<xsl:when test="not($Root=string('getFeatureOfInterestResponse'))">
						<ctl:message>The root element from the response to a GetFeatureOfInterest request "<xsl:value-of select="$Root" />" does not match the expected root element of "<xsl:value-of select="string('GetFeatureOfInterestResponse')" />"</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<!-- 2.sonElement of root is empty -->
						<xsl:choose>
							<xsl:when test="not($getFeatureOfInterestResponse/*[1]/*)">
								<ctl:message>PASS</ctl:message>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>The son element of root must be empty</ctl:message>
								<ctl:fail />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

	</ctl:package>

	<!-- 07.SOS enhancedOperations: GetObservationById -->
	<ctl:package>
		<ctl:test name="sos:GetObservationById-Test">
			<ctl:param name="GetObservationURL" />
			<ctl:param name="isGetObservationGET" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="serviceURL" />
			<ctl:param name="hasGOBI" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="GetObservationByIdResponseContentType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test0701" />
			<ctl:param name="test0702" />
			<ctl:param name="test0703" />
			<ctl:param name="test0704" />
			<ctl:param name="test0705" />
			<ctl:param name="test0706" />
			<ctl:param name="test0707" />
			<ctl:param name="test0708" />
			<ctl:param name="test0709" />
			<ctl:assertion>Execute GetObservationById Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<xsl:choose>
					<xsl:when test="not($hasGOBI)">
						<ctl:message>The server does not support the operation "GetObservationById", so skip this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<!-- 從GetCapabilities取得有效的 offering,procedure,observedProperty -->
						<!-- get a valid offering-->
						<xsl:variable name="offering" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:identifier" />
						<!-- get a valid procedure-->
						<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure[1]" />
						<!-- get a valid observableProperty-->
						<xsl:variable name="observableProperty" select="$getCapabilitiesResponse//sos:contents//swes:observableProperty[1]" />
						<!-- get a valid responseFormat-->
						<xsl:variable name="responseFormat" select="string('http%3A%2F%2Fwww.opengis.net%2Fom%2F2.0')" />
						
						<!-- get a valid getObservationResponse-->
						<xsl:variable name="getObservationResponse">
							<xsl:choose>
								<xsl:when test="($isGetObservationGET)">
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$serviceURL"/>
										</ctl:url>
										<ctl:method>get</ctl:method>
										<ctl:param name="service">SOS</ctl:param>	
										<ctl:param name="version">2.0.0</ctl:param>	
										<ctl:param name="request">GetObservation</ctl:param>	
										<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
										<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
										<ctl:param name="observableProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$observationResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:when>
								<xsl:when test="($isSOAP)">
									<ctl:soap-request version="1.2" charset="UTF-8">
										<ctl:url>
											<xsl:value-of select="$serviceURL"/>
										</ctl:url>
										<ctl:body>
											<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
												xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
												<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
											</sos:GetObservation>
										</ctl:body>
										<parsers:SOAPParser return="content">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema>
														<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
														<xsl:value-of select="$observationResponseSchemaLocation" />
													</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:SOAPParser>
									</ctl:soap-request>
								</xsl:when>
								<xsl:otherwise>
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$serviceURL" />
										</ctl:url>
										<ctl:method>post</ctl:method>
										<ctl:body>
											<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
												<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
											</sos:GetObservation>
										</ctl:body>
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$observationResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="not($getObservationResponse/*)">
								<ctl:message>FAILURE: Missing or invalid getObservationResponse entity.</ctl:message>
								<ctl:fail/>
							</xsl:when>
							<xsl:otherwise>
								<!-- get a valid observation //just use offering id....wait the response by SOS2 mailing list.-->
								<xsl:variable name="observation" select="$getObservationResponse//om:OM_Observation//@gml:id" />
								<ctl:message>The observation was:  <xsl:value-of select="$observation" /></ctl:message>
								<xsl:if test="$test0701 eq 'true'">
									<ctl:message select="'******************** 07.01.RequestNoService ********************'"/>
									<ctl:call-test name="sos:GOBIRequestNoService">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
										<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
										<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
										<ctl:with-param name="observation" select="$observation" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0702 eq 'true'">
									<ctl:message select="'******************** 07.02.RequestNullService ********************'"/>
									<ctl:call-test name="sos:GOBIRequestNullService">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
										<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
										<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
										<ctl:with-param name="observation" select="$observation" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0703 eq 'true'">
									<ctl:message select="'******************** 07.03.RequestInvalidService ********************'"/>
									<ctl:call-test name="sos:GOBIRequestInvalidService">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
										<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
										<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
										<ctl:with-param name="observation" select="$observation" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0704 eq 'true'">
									<ctl:message select="'******************** 07.04.RequestNoVersion ********************'"/>
									<ctl:call-test name="sos:GOBIRequestNoVersion">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
										<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
										<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
										<ctl:with-param name="observation" select="$observation" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0705 eq 'true'">
									<ctl:message select="'******************** 07.05.RequestNullVersion ********************'"/>
									<ctl:call-test name="sos:GOBIRequestNullVersion">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
										<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
										<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
										<ctl:with-param name="observation" select="$observation" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0706 eq 'true'">
									<ctl:message select="'******************** 07.06.RequestInvalidVersion ********************'"/>
									<ctl:call-test name="sos:GOBIRequestInvalidVersion">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
										<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
										<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
										<ctl:with-param name="observation" select="$observation" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0707 eq 'true'">
									<ctl:message select="'******************** 07.07.RequestNullobservation ********************'"/>
									<ctl:call-test name="sos:GOBIRequestNullobservation">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
										<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
										<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
										<ctl:with-param name="observation" select="$observation" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0708 eq 'true'">
									<ctl:message select="'******************** 07.08.RequestInvalidobservation ********************'"/>
									<ctl:call-test name="sos:GOBIRequestInvalidobservation">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
										<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
										<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
										<ctl:with-param name="observation" select="$observation" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0709 eq 'true'">
									<ctl:message select="'******************** 07.09.RequestValidRequest ********************'"/>
									<ctl:call-test name="sos:GOBIRequestValidRequest">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
										<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
										<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
										<ctl:with-param name="observation" select="$observation" />
									</ctl:call-test>
								</xsl:if>
							
							
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		
		<!-- 0701 Send GetObservationById request without parameter service (KVP) ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<!-- 0701 Send GetObservationById request without parameter service (POST or SOAP),the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GOBIRequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>
			Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>									
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('service')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0702 Send GetObservationById request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:GOBIRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service"></ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0703 Send GetObservationById request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:GOBIRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">ASDF</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 0704 Send GetObservationById request without parameter version (KVP),the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<!-- 0704 Send GetObservationById request without parameter version (POST or SOAP),the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GOBIRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>
			Send a request without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('version')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0705 Send GetObservationById request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:GOBIRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version"></ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0706 Send GetObservationById request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:GOBIRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">999</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0707 Send GetObservationById request with null Element observation ,the response must be a valid exception with code "MissingParameterValue" and locator "observation".. -->
		<ctl:test name="sos:GOBIRequestNullobservation">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "observation",and the response must be a valid exception with code "MissingParameterValue" and locator "observation". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observation"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with invalid observation parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observation')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null observation parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observation".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0708 Send GetObservationById request with invalid Element observation ,the response must be an empty GetObservationByIdResponse. -->
		<ctl:test name="sos:GOBIRequestInvalidobservation">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "observation",and the response must be an empty GetObservationByIdResponse. </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid empty GetObservationByIdResponse; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="current-dateTime()" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="current-dateTime()" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<!-- check the root is "sos:GetObservationByIdResponse" and empty context.-->
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($GetObservationByIdResponse/*[1]))" />
							<xsl:choose>
								<xsl:when test="not($responseRoot=$GetObservationByIdRootElementName)">
									<ctl:message>FAILURE:  The root element from the response to a GetObservationById request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$GetObservationByIdRootElementName" />"</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="$GetObservationByIdResponse/*[1]/*)">
									<ctl:message>FAILURE:  An empty GetObservationByIdResponse should be returned if no observation was found matching one or more of the identifiers provided in the request.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>Passed.</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0709 Send valid GetObservationById request, the response must be a valid GetObservationByIdResponse. -->
		<ctl:test name="sos:GOBIRequestValidRequest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a valid request ,and there must be have a valid GetObservationByIdResponse returned. </ctl:assertion>
			<ctl:comment>Pass if the observation listed in GetObservationByIdResponse are same to GetObservationById request; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$GetObservationByIdResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$GetObservationByIdResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$GetObservationByIdResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$GetObservationByIdResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$GetObservationByIdResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$GetObservationByIdResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<!-- check the gml:identifier value is same to observation value in the request. -->
						<xsl:if test="$GetObservationByIdResponse/*">
							<!-- check the root is "sos:GetObservationByIdResponse" and empty context.-->
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($GetObservationByIdResponse/*[1]))" />
							<xsl:variable name="gmlidentifier " select="$GetObservationByIdResponse/sos:GetObservationByIdResponse//gml:identifier" />
							<xsl:choose>
								<xsl:when test="not($responseRoot=$GetObservationByIdRootElementName)">
									<ctl:message>FAILURE:  The root element from the response to a GetObservationById request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$GetObservationByIdRootElementName" />"</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not($gmlidentifier=$observation)">
									<ctl:message>FAILURE: The gml:identifier values in response is not same to observation value in the request.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>Passed.</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

	</ctl:package>

	<!-- 08.SOS Transactional: InsertSensor -->
	<ctl:package>
		<ctl:test name="sos:InsertSensor-Test">
			<ctl:param name="serviceURL" />
			<ctl:param name="hasIS" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="InsertSensorResponseContentType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test0801" />
			<ctl:param name="test0802" />
			<ctl:param name="test0803" />
			<ctl:param name="test0804" />
			<ctl:param name="test0805" />
			<ctl:param name="test0806" />
			<ctl:param name="test0807" />
			<ctl:param name="test0808" />
			<ctl:param name="test0809" />
			<ctl:param name="test0810" />
			<ctl:param name="test0811" />
			<ctl:param name="test0812" />
			<ctl:param name="test0813" />
			<ctl:assertion>Execute InsertSensor Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<xsl:choose>
					<xsl:when test="not($hasIS)">
						<ctl:message>The server does not support the operation "InsertSensor", so skip this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<!-- 從GetCapabilities取得有效的 offering,procedure,observedProperty -->
						<!-- get a valid procedureDescriptionFormat-->
						<xsl:variable name="procedureDescriptionFormat" select="$CapabilitiesResponse//sos:extension/sos:InsertionCapabilities/sos:procedureDescriptionFormat" />
						<!-- get a valid observableProperty-->
						<xsl:variable name="observableProperty" select="$getCapabilitiesResponse//sos:contents//swes:observableProperty[1]" />
						<!-- get a valid observationType-->
						<xsl:variable name="observationType" select="$CapabilitiesResponse//sos:extension/sos:InsertionCapabilities/sos:observationType[1]" />
						<!-- get a valid featureOfInterestType-->
						<xsl:variable name="featureOfInterestType" select="$CapabilitiesResponse//sos:extension/sos:InsertionCapabilities/sos:featureOfInterestType[1]" />
						
						<xsl:if test="$test0801 eq 'true'">
							<ctl:message select="'******************** 08.01.RequestNoService ********************'"/>
							<ctl:call-test name="sos:ISRequestNoService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0802 eq 'true'">
							<ctl:message select="'******************** 08.02.RequestNullService ********************'"/>
							<ctl:call-test name="sos:ISRequestNullService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0803 eq 'true'">
							<ctl:message select="'******************** 08.03.RequestInvalidService ********************'"/>
							<ctl:call-test name="sos:ISRequestInvalidService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0804 eq 'true'">
							<ctl:message select="'******************** 08.04.RequestNoVersion ********************'"/>
							<ctl:call-test name="sos:ISRequestNoVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0805 eq 'true'">
							<ctl:message select="'******************** 08.05.RequestNullVersion ********************'"/>
							<ctl:call-test name="sos:ISRequestNullVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0806 eq 'true'">
							<ctl:message select="'******************** 08.06.RequestInvalidVersion ********************'"/>
							<ctl:call-test name="sos:ISRequestInvalidVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0807 eq 'true'">
							<ctl:message select="'******************** 08.07.RequestNullprocedureDescriptionFormat ********************'"/>
							<ctl:call-test name="sos:ISRequestNullprocedureDescriptionFormat">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0808 eq 'true'">
							<ctl:message select="'******************** 08.08.RequestInvalidprocedureDescriptionFormat ********************'"/>
							<ctl:call-test name="sos:ISRequestInvalidprocedureDescriptionFormat">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0809 eq 'true'">
							<ctl:message select="'******************** 08.09.RequestNullfeatureOfInterestType ********************'"/>
							<ctl:call-test name="sos:ISRequestNullfeatureOfInterestType">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0810 eq 'true'">
							<ctl:message select="'******************** 08.10.RequestInvalidfeatureOfInterestType ********************'"/>
							<ctl:call-test name="sos:ISRequestInvalidfeatureOfInterestType">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0811 eq 'true'">
							<ctl:message select="'******************** 08.11.RequestNullobservationType ********************'"/>
							<ctl:call-test name="sos:ISRequestNullobservationType">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0812 eq 'true'">
							<ctl:message select="'******************** 08.12.RequestInvalidobservationType ********************'"/>
							<ctl:call-test name="sos:ISRequestInvalidobservationType">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0813 eq 'true'">
							<ctl:message select="'******************** 08.13.RequestValidRequest ********************'"/>
							<ctl:call-test name="sos:ISRequestValidRequest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertSensorRootElementName" select="$InsertSensorRootElementName" />
								<ctl:with-param name="InsertSensorResponseSchemaLocation" select="$InsertSensorResponseSchemaLocation" />
								<ctl:with-param name="InsertSensorResponseSchemaType" select="$InsertSensorResponseSchemaType" />
								<ctl:with-param name="procedureDescriptionFormat" select="$procedureDescriptionFormat" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="featureOfInterestType" select="$featureOfInterestType" />
							</ctl:call-test>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0801 Send InsertSensor request without parameter service (KVP) ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<!-- 0801 Send InsertSensor request without parameter service (POST or SOAP) ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertSensor@http://www.opengis.net/swes/2.0".. -->
		<ctl:test name="sos:ISRequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>
			Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertSensor@http://www.opengis.net/swes/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element InsertSensor@http://www.opengis.net/swes/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('service')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element InsertSensor@http://www.opengis.net/swes/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertSensor request with no service parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertSensor request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element InsertSensor@http://www.opengis.net/swes/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
							
							<xsl:variable name="isCorrect">
								
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0802 Send InsertSensor request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:ISRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertSensor request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0803 Send InsertSensor request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:ISRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertSensor request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 0804 Send InsertSensor request without parameter version (KVP) ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<!-- 0804 Send InsertSensor request without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element InsertSensor@http://www.opengis.net/swes/2.0".. -->
		<ctl:test name="sos:ISRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>
			Send a request (KVP) without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request (POST or SOAP) without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertSensor@http://www.opengis.net/swes/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element InsertSensor@http://www.opengis.net/swes/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('version')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element InsertSensor@http://www.opengis.net/swes/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertSensor request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertSensor request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element InsertSensor@http://www.opengis.net/swes/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0805 Send InsertSensor request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:ISRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertSensor request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0806 Send InsertSensor request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:ISRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertSensor request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0807 Send InsertSensor request with null Element procedureDescriptionFormat ,the response must be a valid exception with code "MissingParameterValue" and locator "procedureDescriptionFormat".. -->
		<ctl:test name="sos:ISRequestNullprocedureDescriptionFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>Send a request with null parameter "procedureDescriptionFormat",and the response must be a valid exception with code "MissingParameterValue" and locator "procedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with invalid procedureDescriptionFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedureDescriptionFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null procedureDescriptionFormat parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedureDescriptionFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0808 Send InsertSensor request with invalid Element procedureDescriptionFormat ,the response must be a valid exception with code "InvalidParameterValue" and locator "procedureDescriptionFormat".. -->
		<ctl:test name="sos:ISRequestInvalidprocedureDescriptionFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>Send a request with invalid parameter "procedureDescriptionFormat",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="current-dateTime()" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="current-dateTime()" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with invalid procedureDescriptionFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedureDescriptionFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertSensor request with invalid procedureDescriptionFormat parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedureDescriptionFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0809 Send InsertSensor request with null Element featureOfInterestType ,the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterestType".. -->
		<ctl:test name="sos:ISRequestNullfeatureOfInterestType">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>Send a request with null parameter "procedureDescriptionFormat",and the response must be a valid exception with code "MissingParameterValue" and locator "procedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with invalid featureOfInterestType parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterestType')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null featureOfInterestType parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "featureOfInterestType".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0810 Send InsertSensor request with invalid Element featureOfInterestType ,the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterestType".. -->
		<ctl:test name="sos:ISRequestInvalidfeatureOfInterestType">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>Send a request with invalid parameter "procedureDescriptionFormat",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="current-dateTime()" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="current-dateTime()" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with invalid featureOfInterestType parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterestType')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertSensor request with invalid featureOfInterestType parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "featureOfInterestType".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0811 Send InsertSensor request with null Element observationType ,the response must be a valid exception with code "MissingParameterValue" and locator "observationType".. -->
		<ctl:test name="sos:ISRequestNullobservationType">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>Send a request with null parameter "procedureDescriptionFormat",and the response must be a valid exception with code "MissingParameterValue" and locator "procedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType></sos:observationType>
												<sos:featureOfInterestType></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType></sos:observationType>
												<sos:featureOfInterestType></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with invalid observationType parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observationType')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null observationType parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observationType".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0812 Send InsertSensor request with invalid Element observationType ,the response must be a valid exception with code "InvalidParameterValue" and locator "observationType".. -->
		<ctl:test name="sos:ISRequestInvalidobservationType">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>Send a request with invalid parameter "observationType",and the response must be a valid exception with code "InvalidParameterValue" and locator "observationType". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observationType"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="current-dateTime()" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="current-dateTime()" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertSensor request with invalid observationType parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observationType')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertSensor request with invalid observationType parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observationType".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0813 Send valid InsertSensor request, the response must be a valid InsertSensorResponse. -->
		<ctl:test name="sos:ISRequestValidRequest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertSensorRootElementName" />
			<ctl:param name="InsertSensorResponseSchemaLocation" />
			<ctl:param name="InsertSensorResponseSchemaType" />
			<ctl:param name="procedureDescriptionFormat" />
			<ctl:param name="observableProperty" />
			<ctl:param name="observationType" />
			<ctl:param name="featureOfInterestType" />
			<ctl:assertion>Send a valid request ,and there must be have a valid InsertSensorResponse returned. </ctl:assertion>
			<ctl:comment>Pass if the root of the response is "InsertSensorResponse" and there is one assignedProcedure element and one assignedOffering element in the InsertSensorResponse; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$InsertSensorResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$InsertSensorResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:InsertSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										<swes:procedureDescription>
											<sml:SensorML/>
										</swes:procedureDescription>
										<swes:observableProperty><xsl:value-of select="$observableProperty" /></swes:observableProperty>
										<swes:metadata>
											<sos:SosInsertionMetadata>
												<sos:observationType><xsl:value-of select="$observationType" /></sos:observationType>
												<sos:featureOfInterestType><xsl:value-of select="$featureOfInterestType" /></sos:featureOfInterestType>
											</sos:SosInsertionMetadata>
										</swes:metadata>
									</swes:InsertSensor>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$InsertSensorResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$InsertSensorResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<!-- check the gml:identifier value is same to observation value in the request. -->
						<xsl:if test="$InsertSensorResponse/*">
							<!-- check the root is "sos:InsertSensorResponse" and empty context.-->
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($InsertSensorResponse/*[1]))" />
							<xsl:variable name="assignedProcedureCount " select="Count($InsertSensorResponse//swes:InsertSensorResponse//swes:assignedProcedure)" />
							<xsl:variable name="assignedOfferingCount " select="Count($InsertSensorResponse//swes:assignedOffering//swes:assignedOffering)" />
							<xsl:choose>
								<xsl:when test="not($responseRoot=$InsertSensorRootElementName)">
									<ctl:message>FAILURE:  The root element from the response to a InsertSensor request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$InsertSensorRootElementName" />"</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not($assignedProcedureCount=1)">
									<ctl:message>FAILURE: The count of swes:assignedProcedure element in response must be one and only one.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not($assignedOfferingCount=1)">
									<ctl:message>FAILURE: The count of swes:assignedOffering element in response must be one and only one.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>Passed.</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

	</ctl:package>

	<!-- 09.SOS Transactional: DeleteSensor -->
	<ctl:package>
		<ctl:test name="sos:DeleteSensor-Test">
			<ctl:param name="GetCapabilitiesURL" />
			<ctl:param name="isGetCapabilitiesGET" />
			<ctl:param name="capabilitiesResponseSchemaType" />
			<ctl:param name="capabilitiesResponseSchemaLocation" />
			<ctl:param name="serviceURL" />
			<ctl:param name="hasDeS" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="DeleteSensorRootElementName" />
			<ctl:param name="DeleteSensorResponseSchemaLocation" />
			<ctl:param name="DeleteSensorResponseSchemaType" />
			<ctl:param name="DeleteSensorResponseContentType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test0901" />
			<ctl:param name="test0902" />
			<ctl:param name="test0903" />
			<ctl:param name="test0904" />
			<ctl:param name="test0905" />
			<ctl:param name="test0906" />
			<ctl:param name="test0907" />
			<ctl:param name="test0908" />
			<ctl:param name="test0909" />
			<ctl:assertion>Execute DeleteSensor Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<xsl:choose>
					<xsl:when test="not($hasDeS)">
						<ctl:message>The server does not support the operation "DeleteSensor", so skip this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<!--讓使用者選一個procedure -->
						<xsl:variable name="form-values">
							<ctl:form height="750" width="1024">
								<body>
									<p>Please select which proceduer will be deleted.</p>
									<blockquote>
										<table border="1" padding="4" bgcolor="#00ffff" align="center">
											<tr>
												<td>
													<select name="sensorIDDropDown">
														<xsl:for-each select="$getCapabilitiesResponse//swes:procedure">
															<xsl:variable name="sensorID" select="." />
															<option><xsl:attribute name="value"><xsl:value-of select="$sensorID" /></xsl:attribute><xsl:value-of select="$sensorID" /></option> 
														</xsl:for-each>
													</select>
												</td>
											</tr>				
										</table>						
									</blockquote>
									<div align="center">
										<input type="submit" value="Start"/>						
									</div>
								</body>
							</ctl:form>
						</xsl:variable>
						<xsl:variable name="procedure" select="$form-values/values/value[@key='sensorIDDropDown']"/>
						
						<xsl:if test="$test0901 eq 'true'">
							<ctl:message select="'******************** 09.01.RequestNoService ********************'"/>
							<ctl:call-test name="sos:DeSRequestNoService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
								<ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
								<ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0902 eq 'true'">
							<ctl:message select="'******************** 09.02.RequestNullService ********************'"/>
							<ctl:call-test name="sos:DeSRequestNullService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
								<ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
								<ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0903 eq 'true'">
							<ctl:message select="'******************** 09.03.RequestInvalidService ********************'"/>
							<ctl:call-test name="sos:DeSRequestInvalidService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
								<ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
								<ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0904 eq 'true'">
							<ctl:message select="'******************** 09.04.RequestNoVersion ********************'"/>
							<ctl:call-test name="sos:DeSRequestNoVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
								<ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
								<ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0905 eq 'true'">
							<ctl:message select="'******************** 09.05.RequestNullVersion ********************'"/>
							<ctl:call-test name="sos:DeSRequestNullVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
								<ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
								<ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0906 eq 'true'">
							<ctl:message select="'******************** 09.06.RequestInvalidVersion ********************'"/>
							<ctl:call-test name="sos:DeSRequestInvalidVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
								<ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
								<ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0907 eq 'true'">
							<ctl:message select="'******************** 09.07.RequestNullProcedure ********************'"/>
							<ctl:call-test name="sos:DeSRequestNullProcedure">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
								<ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
								<ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0908 eq 'true'">
							<ctl:message select="'******************** 09.08.RequestInvalidProcedure ********************'"/>
							<ctl:call-test name="sos:DeSRequestInvalidProcedure">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
								<ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
								<ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0909 eq 'true'">
							<ctl:message select="'******************** 09.09.RequestValidRequest ********************'"/>
							<ctl:call-test name="sos:DeSRequestValidRequest">
								<ctl:with-param name="GetCapabilitiesURL" select="$GetCapabilitiesURL" />
								<ctl:with-param name="isGetCapabilitiesGET" select="$isGetCapabilitiesGET" />
								<ctl:with-param name="capabilitiesResponseSchemaType" select="$capabilitiesResponseSchemaType" />
								<ctl:with-param name="capabilitiesResponseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="DeleteSensorRootElementName" select="$DeleteSensorRootElementName" />
								<ctl:with-param name="DeleteSensorResponseSchemaLocation" select="$DeleteSensorResponseSchemaLocation" />
								<ctl:with-param name="DeleteSensorResponseSchemaType" select="$DeleteSensorResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
							</ctl:call-test>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0901 Send DeleteSensor request without parameter service (KVP) ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<!-- 0901 Send DeleteSensor request without parameter service (POST or SOAP),the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element DeleteSensor@http://www.opengis.net/swes/2.0".. -->
		<ctl:test name="sos:DeSRequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="DeleteSensorRootElementName" />
			<ctl:param name="DeleteSensorResponseSchemaLocation" />
			<ctl:param name="DeleteSensorResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:assertion>
			Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element DeleteSensor@http://www.opengis.net/swes/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element DeleteSensor@http://www.opengis.net/swes/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="DeleteSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:DeleteSensor version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DeleteSensor version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($DeleteSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$DeleteSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DeleteSensor request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('service')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element DeleteSensor@http://www.opengis.net/swes/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with no service parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element DeleteSensor@http://www.opengis.net/swes/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0902 Send DeleteSensor request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:DeSRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="DeleteSensorRootElementName" />
			<ctl:param name="DeleteSensorResponseSchemaLocation" />
			<ctl:param name="DeleteSensorResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="DeleteSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:DeleteSensor service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DeleteSensor service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($DeleteSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$DeleteSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DeleteSensor request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0903 Send DeleteSensor request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:DeSRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="DeleteSensorRootElementName" />
			<ctl:param name="DeleteSensorResponseSchemaLocation" />
			<ctl:param name="DeleteSensorResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="DeleteSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:DeleteSensor service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DeleteSensor service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($DeleteSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$DeleteSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DeleteSensor request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 0904 Send DeleteSensor request without parameter version (KVP),the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<!-- 0904 Send DeleteSensor request without parameter version (POST or SOAP),the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element DeleteSensor@http://www.opengis.net/swes/2.0".. -->
		<ctl:test name="sos:DeSRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="DeleteSensorRootElementName" />
			<ctl:param name="DeleteSensorResponseSchemaLocation" />
			<ctl:param name="DeleteSensorResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:assertion>
			Send a request (KVP) without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request (POST or SOAP) without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element DeleteSensor@http://www.opengis.net/swes/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element DeleteSensor@http://www.opengis.net/swes/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="DeleteSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:DeleteSensor service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DeleteSensor service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($DeleteSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$DeleteSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DeleteSensor request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('version')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element DeleteSensor@http://www.opengis.net/swes/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element DeleteSensor@http://www.opengis.net/swes/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0905 Send DeleteSensor request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:DeSRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="DeleteSensorRootElementName" />
			<ctl:param name="DeleteSensorResponseSchemaLocation" />
			<ctl:param name="DeleteSensorResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="DeleteSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:DeleteSensor service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DeleteSensor service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($DeleteSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$DeleteSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DeleteSensor request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0906 Send DeleteSensor request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:DeSRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="DeleteSensorRootElementName" />
			<ctl:param name="DeleteSensorResponseSchemaLocation" />
			<ctl:param name="DeleteSensorResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="DeleteSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:DeleteSensor service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DeleteSensor service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($DeleteSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$DeleteSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DeleteSensor request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0907 Send DeleteSensor request with null Element procedure ,the response must be a valid exception with code "MissingParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:DeSRequestNullProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="DeleteSensorRootElementName" />
			<ctl:param name="DeleteSensorResponseSchemaLocation" />
			<ctl:param name="DeleteSensorResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:assertion>Send a request with null parameter "procedure",and the response must be a valid exception with code "MissingParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="DeleteSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:DeleteSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DeleteSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($DeleteSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$DeleteSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DeleteSensor request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null procedure parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0908 Send DeleteSensor request with invalid Element procedure ,the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:DeSRequestInvalidProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="DeleteSensorRootElementName" />
			<ctl:param name="DeleteSensorResponseSchemaLocation" />
			<ctl:param name="DeleteSensorResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="DeleteSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:DeleteSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="current-dateTime()" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DeleteSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="current-dateTime()" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($DeleteSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$DeleteSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($DeleteSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DeleteSensor request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$DeleteSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DeleteSensor request with invalid procedure parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0909 Send valid DeleteSensor request, the response must be a valid DeleteSensorResponse. -->
		<ctl:test name="sos:DeSRequestValidRequest">
			<ctl:param name="GetCapabilitiesURL" />
			<ctl:param name="isGetCapabilitiesGET" />
			<ctl:param name="capabilitiesResponseSchemaType" />
			<ctl:param name="capabilitiesResponseSchemaLocation" />
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="DeleteSensorRootElementName" />
			<ctl:param name="DeleteSensorResponseSchemaLocation" />
			<ctl:param name="DeleteSensorResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:assertion>Send a valid request ,and there must be have a valid DeleteSensorResponse returned. </ctl:assertion>
			<ctl:comment>Pass if the observation listed in DeleteSensorResponse are same to DeleteSensor request; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="DeleteSensorResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<swes:DeleteSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$DeleteSensorResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$DeleteSensorResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DeleteSensor service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:swes="http://www.opengis.net/swes/2.0"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									</swes:DeleteSensor>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$DeleteSensorResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$DeleteSensorResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($DeleteSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DeleteSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$DeleteSensorResponse/*">
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($DeleteSensorResponse/*[1]))" />
							<xsl:if test="not($responseRoot=$DeleteSensorRootElementName)">
								<ctl:message>FAILURE:  The root element from the response to a DeleteSensor request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$DeleteSensorRootElementName" />"</ctl:message>
								<ctl:fail />
							</xsl:if>
							<!-- 1.response has one and only one deletedProcedure -->
							<xsl:variable name="deletedProcedureCount" select="count($DeleteSensorResponse//swes:deletedProcedure))" />
							<xsl:if test="not($deletedProcedureCount=1)">
								<ctl:message>FAILURE:  The count of swes:deletedProcedure element "<xsl:value-of select="$deletedProcedureCount" />" must be 1.</ctl:message>
								<ctl:fail />
							</xsl:if>
							<!-- 2.Capabilities cannot have the procedure which deleted by request.-->
							<xsl:variable name="getCapabilitiesResponse2">
								<xsl:choose>
									<xsl:when test="($isGetCapabilitiesGET)">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$GetCapabilitiesURL"/>
											</ctl:url>
											<ctl:method>get</ctl:method>
											<ctl:param name="request">GetCapabilities</ctl:param>				   
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
													<parsers:schema>
														<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
														<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
													</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</ctl:request>
									</xsl:when>
									<xsl:when test="($isSOAP)">
										<ctl:soap-request version="1.2" charset="UTF-8">
											<ctl:url>
												<xsl:value-of select="$serviceURL"/>
											</ctl:url>
											<ctl:body>
												<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
													xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
													http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
													xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
												</sos:GetCapabilities>
											</ctl:body>
											<parsers:SOAPParser return="content">
												<parsers:XMLValidatingParser>
													<parsers:schemas>
														<parsers:schema>
															<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
															<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
														</parsers:schema>
													</parsers:schemas>
												</parsers:XMLValidatingParser>
											</parsers:SOAPParser>
										</ctl:soap-request>
									</xsl:when>
									<xsl:otherwise>
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$serviceURL" />
											</ctl:url>
											<ctl:method>post</ctl:method>
											<ctl:body>
												<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
													xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
													http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
													xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
												</sos:GetCapabilities>
											</ctl:body>
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
													<parsers:schema>
														<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
														<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
													</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</ctl:request>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>	
							<xsl:choose>
								<xsl:when test="not($getCapabilitiesResponse2/*)">
									<ctl:message>FAILURE: Missing or invalid GetCapabilities response entity.</ctl:message>
									<ctl:fail/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:for-each select="$getCapabilitiesResponse2//swes:procedure">
										<xsl:variable name="identifier" select="." />
										<xsl:if test="$identifier eq $procedure">
											<ctl:message>FAILURE: The deleted procedure "<xsl:value-of select="$identifier" />" should not be listed in the Capabilities.</ctl:message>
											<ctl:fail/>
										</xsl:if>
									</xsl:for-each>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

	</ctl:package>

	<!-- 10.SOS Transactional: InsertObservation -->
	<ctl:package>
		<ctl:test name="sos:InsertObservation-Test">	
			<ctl:param name="GetCapabilitiesURL" />
			<ctl:param name="isGetCapabilitiesGET" />
			<ctl:param name="capabilitiesResponseSchemaType" />
			<ctl:param name="capabilitiesResponseSchemaLocation" />
			<ctl:param name="GetObservationURL" />
			<ctl:param name="isGetObservationGET" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="serviceURL" />
			<ctl:param name="hasIO" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="InsertObservationResponseContentType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test1001" />
			<ctl:param name="test1002" />
			<ctl:param name="test1003" />
			<ctl:param name="test1004" />
			<ctl:param name="test1005" />
			<ctl:param name="test1006" />
			<ctl:param name="test1007" />
			<ctl:param name="test1008" />
			<ctl:param name="test1009" />
			<ctl:param name="test1010" />
			<ctl:param name="test1011" />
			<ctl:param name="test1012" />
			<ctl:param name="test1013" />
			<ctl:param name="test1014" />
			<ctl:param name="test1015" />
			<ctl:param name="test1016" />
			<ctl:param name="test1017" />
			<ctl:param name="test1018" />
			<ctl:param name="test1019" />
			<ctl:assertion>Execute InsertObservation Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<xsl:choose>
					<xsl:when test="not($hasIO)">
						<ctl:message>The server does not support the operation "InsertObservation", so skip this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<!-- get a valid offering-->
						<xsl:variable name="offering" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:identifier" />
						<!-- Get a valid observationType -->
						<xsl:variable name="observationType" select="$CapabilitiesResponse//sos:contents//sos:observationType" />
						<!-- get a valid procedure-->
						<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure[1]" />
						<!-- get a valid observableProperty-->
						<xsl:variable name="observableProperty" select="$getCapabilitiesResponse//sos:contents//swes:observableProperty[1]" />
						<!-- get a valid featureOfInterest From GetObservation-->
						<xsl:variable name="getObservationResponse">
							<xsl:choose>
								<xsl:when test="($isGetObservationGET)">
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$GetObservationURL"/>
										</ctl:url>
										<ctl:method>get</ctl:method>
										<ctl:param name="service">SOS</ctl:param>	
										<ctl:param name="version">2.0.0</ctl:param>	
										<ctl:param name="request">GetObservation</ctl:param>	
										<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
										<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
										<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$observationResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:when>
								<xsl:when test="($isSOAP)">
									<ctl:soap-request version="1.2" charset="UTF-8">
										<ctl:url>
											<xsl:value-of select="$GetObservationURL"/>
										</ctl:url>
										<ctl:body>
											<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
												xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
												<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
											</sos:GetObservation>
										</ctl:body>
										<parsers:SOAPParser return="content">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema>
														<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
														<xsl:value-of select="$observationResponseSchemaLocation" />
													</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:SOAPParser>
									</ctl:soap-request>
								</xsl:when>
								<xsl:otherwise>
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$GetObservationURL" />
										</ctl:url>
										<ctl:method>post</ctl:method>
										<ctl:body>
											<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
												<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
											</sos:GetObservation>
										</ctl:body>
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$observationResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="featureOfInterest" select="$getObservationResponse//om:featureOfInterest[1]/@href" />
						<!-- get a valid observation -->
						<xsl:variable name="observation" select="$getObservationResponse/sos:GetObservationResponse/sos:observationData/*[1]" />
						
						<xsl:if test="$test1001 eq 'true'">
							<ctl:message select="'******************** 10.01.RequestNoService ********************'"/>
							<ctl:call-test name="sos:IORequestNoService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1002 eq 'true'">
							<ctl:message select="'******************** 10.02.RequestNullService ********************'"/>
							<ctl:call-test name="sos:IORequestNullService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1003 eq 'true'">
							<ctl:message select="'******************** 10.03.RequestInvalidService ********************'"/>
							<ctl:call-test name="sos:IORequestInvalidService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1004 eq 'true'">
							<ctl:message select="'******************** 10.04.RequestNoVersion ********************'"/>
							<ctl:call-test name="sos:IORequestNoVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1005 eq 'true'">
							<ctl:message select="'******************** 10.05.RequestNullVersion ********************'"/>
							<ctl:call-test name="sos:IORequestNullVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1006 eq 'true'">
							<ctl:message select="'******************** 10.06.RequestInvalidVersion ********************'"/>
							<ctl:call-test name="sos:IORequestInvalidVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1007 eq 'true'">
							<ctl:message select="'******************** 10.07.RequestNulloffering ********************'"/>
							<ctl:call-test name="sos:IORequestNulloffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1008 eq 'true'">
							<ctl:message select="'******************** 10.08.RequestInvalidoffering ********************'"/>
							<ctl:call-test name="sos:IORequestInvalidoffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1009 eq 'true'">
							<ctl:message select="'******************** 10.09.RequestNullobservationType ********************'"/>
							<ctl:call-test name="sos:IORequestNullobservationType">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1010 eq 'true'">
							<ctl:message select="'******************** 10.10.RequestInvalidobservationType ********************'"/>
							<ctl:call-test name="sos:IORequestInvalidobservationType">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1011 eq 'true'">
							<ctl:message select="'******************** 10.11.RequestNullprocedure ********************'"/>
							<ctl:call-test name="sos:IORequestNullprocedure">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1012 eq 'true'">
							<ctl:message select="'******************** 10.12.RequestInvalidprocedure ********************'"/>
							<ctl:call-test name="sos:IORequestInvalidprocedure">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1013 eq 'true'">
							<ctl:message select="'******************** 10.13.RequestNullobservedProperty ********************'"/>
							<ctl:call-test name="sos:IORequestNullobservedProperty">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1014 eq 'true'">
							<ctl:message select="'******************** 10.14.RequestInvalidobservedProperty ********************'"/>
							<ctl:call-test name="sos:IORequestInvalidobservedProperty">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1015 eq 'true'">
							<ctl:message select="'******************** 10.15.RequestNullfeatureOfInterest ********************'"/>
							<ctl:call-test name="sos:IORequestNullfeatureOfInterest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1016 eq 'true'">
							<ctl:message select="'******************** 10.16.RequestInvalidfeatureOfInterest ********************'"/>
							<ctl:call-test name="sos:IORequestInvalidfeatureOfInterest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1017 eq 'true'">
							<ctl:message select="'******************** 10.17.RequestNullresultType ********************'"/>
							<ctl:call-test name="sos:IORequestNullresultType">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1018 eq 'true'">
							<ctl:message select="'******************** 10.18.RequestInvalidresultType ********************'"/>
							<ctl:call-test name="sos:IORequestInvalidresultType">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1019 eq 'true'">
							<ctl:message select="'******************** 10.19.RequestValidRequest ********************'"/>
							<ctl:call-test name="sos:IORequestValidRequest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertObservationRootElementName" select="$InsertObservationRootElementName" />
								<ctl:with-param name="InsertObservationResponseSchemaLocation" select="$InsertObservationResponseSchemaLocation" />
								<ctl:with-param name="InsertObservationResponseSchemaType" select="$InsertObservationResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 1001 Send InsertObservation request without parameter service (KVP) ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<!-- 1001 Send InsertObservation request without parameter service (POST or SOAP),the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertObservation@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:IORequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>
			Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertObservation@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element InsertObservation@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('service')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element InsertObservation@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element InsertObservation@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1002 Send InsertObservation request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:IORequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1003 Send InsertObservation request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:IORequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 1004 Send InsertObservation request without parameter version (KVP),the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<!-- 1004 Send InsertObservation request without parameter version (POST or SOAP),the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element InsertObservation@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:IORequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>
			Send a request (KVP) without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request (POST or SOAP) without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element InsertObservation@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element InsertObservation@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('version')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element InsertObservation@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element InsertObservation@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1005 Send InsertObservation request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:IORequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1006 Send InsertObservation request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:IORequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1007 Send InsertObservation request with null Element offering ,the response must be a valid exception with code "MissingParameterValue" and locator "offering".. -->
		<ctl:test name="sos:IORequestNulloffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "offering",and the response must be a valid exception with code "MissingParameterValue" and locator "offering". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid offering parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('offering')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null offering parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "offering".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1008 Send InsertObservation request with invalid Element offering ,the response must be a valid exception with code "InvalidParameterValue" and locator "offering".. -->
		<ctl:test name="sos:IORequestInvalidoffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "offering",and the response must be a valid exception with code "InvalidParameterValue" and locator "offering". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="current-dateTime()" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="current-dateTime()" /></sos:offering>
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid offering parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('offering')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with invalid offering parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "offering".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 不知道怎麼產生observation的內容OM_Observation,所以先用範例的格式 帶入可變的變數-->
		<!-- 1009 Send InsertObservation request with null Element observationType ,the response must be a valid exception with code "MissingParameterValue" and locator "observationType".. -->
		<ctl:test name="sos:IORequestNullobservationType">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "observationType",and the response must be a valid exception with code "MissingParameterValue" and locator "observationType". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observationType"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid observationType parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observationType')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null observationType parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observationType".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1010 Send InsertObservation request with invalid Element observationType ,the response must be a valid exception with code "InvalidParameterValue" and locator "observationType".. -->
		<ctl:test name="sos:IORequestInvalidobservationType">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "observationType",and the response must be a valid exception with code "InvalidParameterValue" and locator "observationType". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observationType"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="current-dateTime()" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="current-dateTime()" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid observationType parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observationType')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with invalid observationType parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observationType".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1011 Send InsertObservation request with null Element procedure ,the response must be a valid exception with code "MissingParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:IORequestNullprocedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "procedure",and the response must be a valid exception with code "MissingParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null procedure parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1012 Send InsertObservation request with invalid Element procedure ,the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:IORequestInvalidprocedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with invalid procedure parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1013 Send InsertObservation request with null Element observedProperty ,the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:IORequestNullobservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "observedProperty",and the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid observedProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null observedProperty parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observedProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1014 Send InsertObservation request with invalid Element observedProperty ,the response must be a valid exception with code "InvalidParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:IORequestInvalidobservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "observedProperty",and the response must be a valid exception with code "InvalidParameterValue" and locator "observedProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="current-dateTime()" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="current-dateTime()" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid observedProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with invalid observedProperty parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observedProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1015 Send InsertObservation request with null Element featureOfInterest ,the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest".. -->
		<ctl:test name="sos:IORequestNullfeatureOfInterest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "featureOfInterest",and the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid featureOfInterest parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null featureOfInterest parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "featureOfInterest".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1016 Send InsertObservation request with invalid Element featureOfInterest ,the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest".. -->
		<ctl:test name="sos:IORequestInvalidfeatureOfInterest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "featureOfInterest",and the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="current-dateTime()" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="current-dateTime()" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid featureOfInterest parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with invalid featureOfInterest parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "featureOfInterest".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1017 Send InsertObservation request with null Element resultType ,the response must be a valid exception with code "MissingParameterValue" and locator "resultType".. -->
		<ctl:test name="sos:IORequestNullresultType">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "resultType",and the response must be a valid exception with code "MissingParameterValue" and locator "resultType". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "resultType"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid resultType parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('resultType')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null resultType parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "resultType".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1018 Send InsertObservation request with invalid Element resultType ,the response must be a valid exception with code "InvalidParameterValue" and locator "resultType".. -->
		<ctl:test name="sos:IORequestInvalidresultType">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "resultType",and the response must be a valid exception with code "InvalidParameterValue" and locator "resultType". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "resultType"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="current-dateTime()" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="current-dateTime()" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertObservation request with invalid resultType parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('resultType')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertObservation request with invalid resultType parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "resultType".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1019 Send valid InsertObservation request, the response must be a valid InsertObservationResponse. -->
		<ctl:test name="sos:IORequestValidRequest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertObservationRootElementName" />
			<ctl:param name="InsertObservationResponseSchemaLocation" />
			<ctl:param name="InsertObservationResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a valid request ,and there must be have a valid InsertObservationResponse returned. </ctl:assertion>
			<ctl:comment>Pass if the response is a valid InsertObservationResponse and has an observation element in the response; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertObservationResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>	
												<om:resultTime>												
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$InsertObservationResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$InsertObservationResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observation>
											<om:OM_Observation gml:id="obsTest1">
												<xsl:attribute name="gml:id"><xsl:value-of select="'obsTest1'" /></xsl:attribute>
												<om:type>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observationType" /></xsl:attribute>
												</om:type>
												<om:phenomenonTime>
													<gml:TimeInstant gml:id="phenomenonTime">
														<xsl:attribute name="gml:id"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
														<gml:timePosition><xsl:value-of select="current-dateTime()" /></gml:timePosition>
													</gml:TimeInstant>
												</om:phenomenonTime>
												<om:resultTime>
													<xsl:attribute name="xlink:href"><xsl:value-of select="'#phenomenonTime'" /></xsl:attribute>
												</om:resultTime>
												<om:procedure>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
												</om:procedure>
												<om:parameter>
													<om:NamedValue>
														<om:name>
															<xsl:attribute name="xlink:href"><xsl:value-of select="'http://www.opengis.net/req/omxml/2.0/data/samplingGeometry'" /></xsl:attribute>
														</om:name>
														<om:value>
															<gml:Point>
																<xsl:attribute name="gml:id"><xsl:value-of select="'SamplingPoint2'" /></xsl:attribute>
																<gml:pos>
																	<xsl:attribute name="srsName"><xsl:value-of select="'http://www.opengis.net/def/crs/EPSG/0/4326'" /></xsl:attribute>
																	<xsl:value-of select="'54.9 10.52'" />
																</gml:pos>
															</gml:Point>
														</om:value>
													</om:NamedValue>
												</om:parameter>
												<om:observedProperty>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
												</om:observedProperty>
												<om:featureOfInterest>
													<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
												</om:featureOfInterest>
												<om:result>
													<xsl:attribute name="xsi:type"><xsl:value-of select="'gml:MeasureType'" /></xsl:attribute>
													<xsl:value-of select="'0.28'" />
												</om:result>
											</om:OM_Observation>
										</sos:observation>
									</sos:InsertObservation>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$InsertObservationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$InsertObservationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertObservationResponse/*">
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($InsertObservationResponse/*[1]))" />
							<xsl:if test="not($responseRoot=$DeleteSensorRootElementName)">
								<ctl:message>FAILURE:  The root element from the response to a InsertObservation request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$InsertObservationRootElementName" />"</ctl:message>
								<ctl:fail />
							</xsl:if>
							<!-- 1.response has one and only one observation -->
							<xsl:variable name="observationCount" select="count($InsertObservationResponse//sos:observation))" />
							<xsl:if test="not($deletedProcedureCount=1)">
								<ctl:message>FAILURE:  The count of sos:observation "<xsl:value-of select="$observationCount" />" must be 1.</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

	</ctl:package>

	<!-- 11.SOS resultHandling: InsertResultTemplate -->
	<ctl:package>
		<ctl:test name="sos:InsertResultTemplate-Test">	
			<ctl:param name="GetCapabilitiesURL" />
			<ctl:param name="isGetCapabilitiesGET" />
			<ctl:param name="capabilitiesResponseSchemaType" />
			<ctl:param name="capabilitiesResponseSchemaLocation" />
			<ctl:param name="GetObservationURL" />
			<ctl:param name="isGetObservationGET" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="serviceURL" />
			<ctl:param name="hasIRT" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="InsertResultTemplateRootElementName" />
			<ctl:param name="InsertResultTemplateResponseSchemaLocation" />
			<ctl:param name="InsertResultTemplateResponseSchemaType" />
			<ctl:param name="InsertResultTemplateResponseContentType" />
			<ctl:param name="test1101" />
			<ctl:param name="test1102" />
			<ctl:param name="test1103" />
			<ctl:param name="test1104" />
			<ctl:param name="test1105" />
			<ctl:param name="test1106" />
			<ctl:param name="test1107" />
			<ctl:param name="test1108" />
			<ctl:param name="test1109" />
			<ctl:param name="test12" />
			<ctl:param name="InsertResult-URL" />
			<ctl:param name="hasInsertResult" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="InsertResultResponseContentType" />
			<ctl:param name="test1201" />
			<ctl:param name="test1202" />
			<ctl:param name="test1203" />
			<ctl:param name="test1204" />
			<ctl:param name="test1205" />
			<ctl:param name="test1206" />
			<ctl:param name="test1207" />
			<ctl:param name="test1208" />
			<ctl:param name="test1209" />
			<ctl:param name="test1208" />
			<ctl:param name="test1209" />
			<ctl:param name="test1210" />
			<ctl:param name="test1211" />
			<ctl:assertion>Execute InsertResultTemplate Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<xsl:choose>
					<xsl:when test="not($hasIRT)">
						<ctl:message>The server does not support the operation "InsertResultTemplate", so skip this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<!-- get a valid offering-->
						<xsl:variable name="offering" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:identifier" />
						<!-- Get a valid observationType -->
						<xsl:variable name="observationType" select="$CapabilitiesResponse//sos:contents//sos:observationType" />
						<!-- get a valid procedure-->
						<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure[1]" />
						<!-- get a valid observableProperty-->
						<xsl:variable name="observableProperty" select="$getCapabilitiesResponse//sos:contents//swes:observableProperty[1]" />
						<!-- get a valid featureOfInterest From GetObservation-->
						<xsl:variable name="getObservationResponse">
							<xsl:choose>
								<xsl:when test="($isGetObservationGET)">
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$GetObservationURL"/>
										</ctl:url>
										<ctl:method>get</ctl:method>
										<ctl:param name="service">SOS</ctl:param>	
										<ctl:param name="version">2.0.0</ctl:param>	
										<ctl:param name="request">GetObservation</ctl:param>	
										<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
										<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
										<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$observationResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:when>
								<xsl:when test="($isSOAP)">
									<ctl:soap-request version="1.2" charset="UTF-8">
										<ctl:url>
											<xsl:value-of select="$GetObservationURL"/>
										</ctl:url>
										<ctl:body>
											<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
												xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
												<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
											</sos:GetObservation>
										</ctl:body>
										<parsers:SOAPParser return="content">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema>
														<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
														<xsl:value-of select="$observationResponseSchemaLocation" />
													</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:SOAPParser>
									</ctl:soap-request>
								</xsl:when>
								<xsl:otherwise>
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$GetObservationURL" />
										</ctl:url>
										<ctl:method>post</ctl:method>
										<ctl:body>
											<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
												<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
											</sos:GetObservation>
										</ctl:body>
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$observationResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="featureOfInterest" select="$getObservationResponse//om:featureOfInterest[1]/@href" />

						<xsl:if test="$test1101 eq 'true'">
							<ctl:message select="'******************** 11.01.RequestNoService ********************'"/>
							<ctl:call-test name="sos:IRTRequestNoService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultTemplateRootElementName" select="$InsertResultTemplateRootElementName" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaLocation" select="$InsertResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaType" select="$InsertResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1102 eq 'true'">
							<ctl:message select="'******************** 11.02.RequestNullService ********************'"/>
							<ctl:call-test name="sos:IRTRequestNullService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultTemplateRootElementName" select="$InsertResultTemplateRootElementName" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaLocation" select="$InsertResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaType" select="$InsertResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1103 eq 'true'">
							<ctl:message select="'******************** 11.03.RequestInvalidService ********************'"/>
							<ctl:call-test name="sos:IRTRequestInvalidService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultTemplateRootElementName" select="$InsertResultTemplateRootElementName" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaLocation" select="$InsertResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaType" select="$InsertResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1104 eq 'true'">
							<ctl:message select="'******************** 11.04.RequestNoVersion ********************'"/>
							<ctl:call-test name="sos:IRTRequestNoVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultTemplateRootElementName" select="$InsertResultTemplateRootElementName" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaLocation" select="$InsertResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaType" select="$InsertResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1105 eq 'true'">
							<ctl:message select="'******************** 11.05.RequestNullVersion ********************'"/>
							<ctl:call-test name="sos:IRTRequestNullVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultTemplateRootElementName" select="$InsertResultTemplateRootElementName" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaLocation" select="$InsertResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaType" select="$InsertResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1106 eq 'true'">
							<ctl:message select="'******************** 11.06.RequestInvalidVersion ********************'"/>
							<ctl:call-test name="sos:IRTRequestInvalidVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultTemplateRootElementName" select="$InsertResultTemplateRootElementName" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaLocation" select="$InsertResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaType" select="$InsertResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1107 eq 'true'">
							<ctl:message select="'******************** 11.07.RequestInvalidobservationType ********************'"/>
							<ctl:call-test name="sos:IRTRequestInvalidobservationType">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultTemplateRootElementName" select="$InsertResultTemplateRootElementName" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaLocation" select="$InsertResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaType" select="$InsertResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1108 eq 'true'">
							<ctl:message select="'******************** 11.08.RequestValidRequest ********************'"/>
							<ctl:call-test name="sos:IRTRequestValidRequest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultTemplateRootElementName" select="$InsertResultTemplateRootElementName" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaLocation" select="$InsertResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaType" select="$InsertResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
								<ctl:with-param name="test12" select="$test12"/>
								<ctl:with-param name="InsertResult-URL" select="$InsertResult-URL"/>
								<ctl:with-param name="hasInsertResult" select="$hasInsertResult"/>
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation"/>
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="InsertResultResponseContentType" select="$InsertResultResponseContentType" />
								<ctl:with-param name="test1201" select="$test1201"/>
								<ctl:with-param name="test1202" select="$test1202"/>
								<ctl:with-param name="test1203" select="$test1203"/>
								<ctl:with-param name="test1204" select="$test1204"/>
								<ctl:with-param name="test1205" select="$test1205"/>
								<ctl:with-param name="test1206" select="$test1206"/>
								<ctl:with-param name="test1207" select="$test1207"/>
								<ctl:with-param name="test1208" select="$test1208"/>
								<ctl:with-param name="test1209" select="$test1209"/>
								<ctl:with-param name="test1208" select="$test1208"/>
								<ctl:with-param name="test1209" select="$test1209"/>
								<ctl:with-param name="test1210" select="$test1210"/>
								<ctl:with-param name="test1211" select="$test1211"/>
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1109 eq 'true'">
							<ctl:message select="'******************** 11.09.RequestInvalidproposedTemplate ********************'"/>
							<ctl:call-test name="sos:IRTRequestInvalidproposedTemplate">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultTemplateRootElementName" select="$InsertResultTemplateRootElementName" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaLocation" select="$InsertResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="InsertResultTemplateResponseSchemaType" select="$InsertResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observationType" select="$observationType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
								<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
							</ctl:call-test>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 1101 Send InsertResultTemplate request (KVP) without parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<!-- 1101 Send InsertResultTemplate request (POST or SOAP) without parameter service ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:IRTRequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultTemplateRootElementName" />
			<ctl:param name="InsertResultTemplateResponseSchemaLocation" />
			<ctl:param name="InsertResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:assertion>
			Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResultTemplate version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResultTemplate version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResultTemplate request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertResultTemplateResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('service')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertResultTemplateResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResultTemplate request with no service parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResultTemplate request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1102 Send InsertResultTemplate request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:IRTRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultTemplateRootElementName" />
			<ctl:param name="InsertResultTemplateResponseSchemaLocation" />
			<ctl:param name="InsertResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResultTemplate service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResultTemplate service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResultTemplate request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResultTemplate request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1103 Send InsertResultTemplate request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:IRTRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultTemplateRootElementName" />
			<ctl:param name="InsertResultTemplateResponseSchemaLocation" />
			<ctl:param name="InsertResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResultTemplate service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResultTemplate service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResultTemplate request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResultTemplate request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 1104 Send InsertResultTemplate request (KVP) without parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<!-- 1104 Send InsertResultTemplate request (POST or SOAP) without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element InsertResultTemplate@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:IRTRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultTemplateRootElementName" />
			<ctl:param name="InsertResultTemplateResponseSchemaLocation" />
			<ctl:param name="InsertResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:assertion>
			Send a request (KVP) without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request (POST or SOAP) without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element InsertResultTemplate@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResultTemplate request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertResultTemplateResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('version')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertResultTemplateResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element InsertResultTemplate@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResultTemplate request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResultTemplate request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element InsertResultTemplate@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1105 Send InsertResultTemplate request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:IRTRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultTemplateRootElementName" />
			<ctl:param name="InsertResultTemplateResponseSchemaLocation" />
			<ctl:param name="InsertResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResultTemplate request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResultTemplate request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1106 Send InsertResultTemplate request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:IRTRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultTemplateRootElementName" />
			<ctl:param name="InsertResultTemplateResponseSchemaLocation" />
			<ctl:param name="InsertResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResultTemplate request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResultTemplate request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1107 Send InsertResultTemplate request with invalid Element observationType ,the response must be a valid exception with code "InvalidParameterValue" and locator "observationType".. -->
		<ctl:test name="sos:IRTRequestInvalidobservationType">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultTemplateRootElementName" />
			<ctl:param name="InsertResultTemplateResponseSchemaLocation" />
			<ctl:param name="InsertResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:assertion>Send a request with invalid parameter "observationType",and the response must be a valid exception with code "InvalidParameterValue" and locator "observationType". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observationType"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- use OM_GeometryObservation instead of OM_Observation -->
				<xsl:variable name="InsertResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_GeometryObservation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_GeometryObservation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_GeometryObservation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_GeometryObservation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResultTemplate request with invalid observationType parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observationType')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResultTemplate request with invalid observationType parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observationType".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1108 Send valid InsertResultTemplate request, the response must be a valid InsertResultTemplateResponse. -->
		<ctl:test name="sos:IRTRequestValidRequest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultTemplateRootElementName" />
			<ctl:param name="InsertResultTemplateResponseSchemaLocation" />
			<ctl:param name="InsertResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="test12" />
			<ctl:param name="InsertResult-URL" />
			<ctl:param name="hasInsertResult" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="InsertResultResponseContentType" />
			<ctl:param name="test1201" />
			<ctl:param name="test1202" />
			<ctl:param name="test1203" />
			<ctl:param name="test1204" />
			<ctl:param name="test1205" />
			<ctl:param name="test1206" />
			<ctl:param name="test1207" />
			<ctl:param name="test1208" />
			<ctl:param name="test1209" />
			<ctl:param name="test1208" />
			<ctl:param name="test1209" />
			<ctl:param name="test1210" />
			<ctl:param name="test1211" />
			<ctl:assertion>Send a valid request ,and there must be have a valid InsertResultTemplateResponse returned. </ctl:assertion>
			<ctl:comment>Pass if the response is a valid InsertResultTemplateResponse and has an observation element in the response; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$InsertResultTemplateResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$InsertResultTemplateResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$InsertResultTemplateResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$InsertResultTemplateResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultTemplateResponse/*">
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($InsertResultTemplateResponse/*[1]))" />
							<xsl:if test="not($responseRoot=$DeleteSensorRootElementName)">
								<ctl:message>FAILURE:  The root element from the response to a InsertResultTemplate request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$InsertResultTemplateRootElementName" />"</ctl:message>
								<ctl:fail />
							</xsl:if>
							<!-- 1.response has one and only one observation -->
							<xsl:variable name="acceptedTemplateCount" select="count($InsertResultTemplateResponse//sos:acceptedTemplate)" />
							<xsl:if test="not($acceptedTemplateCount=1)">
								<ctl:message>FAILURE:  The count of sos:acceptedTemplate "<xsl:value-of select="$acceptedTemplateCount" />" must be 1.</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
						<xsl:if test="$test12">
							<!-- if need to execute test12,get template from InsertResultTemplateResponse -->
							
							<ctl:message>****************************</ctl:message>
							<ctl:message>Running 12.SOS resultHandling: InsertResult Tests...</ctl:message>
							<ctl:message>****************************</ctl:message>
							<xsl:variable name="template" select="$InsertResultTemplateResponse//sos:acceptedTemplate" />
							<ctl:message>The value of template is : "<xsl:value-of select="$template" />".</ctl:message>
							<ctl:call-test name="sos:InsertResult-Test">
								<ctl:with-param name="serviceURL" select="$InsertResult-URL"/>
								<ctl:with-param name="hasIR" select="$hasInsertResult"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="serviceType" select="string('SOS')"/>
								<ctl:with-param name="serviceVersion" select="'2.0.0'" />
								<ctl:with-param name="InsertResultRootElementName" select="string('InsertResultResponse')" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosInsertResult.xsd')"/>
								<ctl:with-param name="InsertResultResponseSchemaType" select="string('resource')" />
								<ctl:with-param name="InsertResultResponseContentType" select="$InsertResultResponseContentType" />
								<ctl:with-param name="test1201" select="$test1201"/>
								<ctl:with-param name="test1202" select="$test1202"/>
								<ctl:with-param name="test1203" select="$test1203"/>
								<ctl:with-param name="test1204" select="$test1204"/>
								<ctl:with-param name="test1205" select="$test1205"/>
								<ctl:with-param name="test1206" select="$test1206"/>
								<ctl:with-param name="test1207" select="$test1207"/>
								<ctl:with-param name="test1208" select="$test1208"/>
								<ctl:with-param name="test1209" select="$test1209"/>
								<ctl:with-param name="test1208" select="$test1208"/>
								<ctl:with-param name="test1209" select="$test1209"/>
								<ctl:with-param name="test1210" select="$test1210"/>
								<ctl:with-param name="test1211" select="$test1211"/>
								<ctl:with-param name="template" select="$template"/>
							</ctl:call-test>
						</xsl:if>
						
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1109 Send InsertResultTemplate request with same procedure, observedProperty and ObservationOffering but different resultStructure, ,the response must be a valid exception with code "InvalidParameterValue" and locator "proposedTemplate".. -->
		<ctl:test name="sos:IRTRequestInvalidproposedTemplate">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultTemplateRootElementName" />
			<ctl:param name="InsertResultTemplateResponseSchemaLocation" />
			<ctl:param name="InsertResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observationType" />
			<ctl:param name="procedure" />
			<ctl:param name="observableProperty" />
			<ctl:param name="featureOfInterest" />
			<ctl:assertion>Send a request with same "procedure", "observedProperty" and "ObservationOffering" but different "resultStructure",and the response must be a valid exception with code "InvalidParameterValue" and locator "proposedTemplate". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "proposedTemplate"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:swe="http://www.opengis.net/swe/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd">
										<sos:proposedTemplate>
											<sos:ResultTemplate>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observationTemplate>
													<om:OM_Observation>
														<xsl:attribute name="gml:id"><xsl:value-of select="'sensor2obsTemplate'" /></xsl:attribute>
														<om:phenomenonTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:phenomenonTime>
														<om:resultTime>
															<xsl:attribute name="nilReason"><xsl:value-of select="'template'" /></xsl:attribute>
														</om:resultTime>
														<om:procedure>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$procedure" /></xsl:attribute>
														</om:procedure>
														<om:observedProperty>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$observableProperty" /></xsl:attribute>
														</om:observedProperty>
														<om:featureOfInterest>
															<xsl:attribute name="xlink:href"><xsl:value-of select="$featureOfInterest" /></xsl:attribute>
														</om:featureOfInterest>
														<om:result/>
													</om:OM_Observation>
												</sos:observationTemplate>
												<sos:resultStructure>
													<swe:DataRecord>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'waterlevel'" /></xsl:attribute>
															<swe:Quantity>
																<xsl:attribute name="definition"><xsl:value-of select="'http://sweet.jpl.nasa.gov/2.0/hydroSurface.owl#WaterHeight'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'cm'" /></xsl:attribute>
																</swe:uom>
															</swe:Quantity>
														</swe:field>
														<swe:field>
															<xsl:attribute name="name"><xsl:value-of select="'phenomenonTime'" /></xsl:attribute>
															<swe:Time>
																<xsl:attribute name="definition"><xsl:value-of select="'http://www.opengis.net/def/property/OGC/0/PhenomenonTime'" /></xsl:attribute>
																<swe:uom>
																	<xsl:attribute name="code"><xsl:value-of select="'ms'" /></xsl:attribute>
																</swe:uom>
															</swe:Time>
														</swe:field>
													</swe:DataRecord>
												</sos:resultStructure>
												<sos:resultEncoding>
													<swe:TextEncoding>
														<xsl:attribute name="tokenSeparator"><xsl:value-of select="','" /></xsl:attribute>
														<xsl:attribute name="blockSeparator"><xsl:value-of select="'@@'" /></xsl:attribute>
													</swe:TextEncoding>
												</sos:resultEncoding>
											</sos:ResultTemplate>
										</sos:proposedTemplate>
									</sos:InsertResultTemplate>
								</ctl:body>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResultTemplate request with invalid proposedTemplate parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('proposedTemplate')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResultTemplate request with invalid resultType parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "proposedTemplate".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

	</ctl:package>

	<!-- 12.SOS resultHandling: InsertResult -->
	<ctl:package>
		<ctl:test name="sos:InsertResult-Test">	
			<ctl:param name="serviceURL" />
			<ctl:param name="hasIR" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="InsertResultResponseContentType" />
			<ctl:param name="test1201" />
			<ctl:param name="test1202" />
			<ctl:param name="test1203" />
			<ctl:param name="test1204" />
			<ctl:param name="test1205" />
			<ctl:param name="test1206" />
			<ctl:param name="test1207" />
			<ctl:param name="test1208" />
			<ctl:param name="test1209" />
			<ctl:param name="test1210" />
			<ctl:param name="test1211" />
			<ctl:param name="template" />
			<ctl:assertion>Execute InsertResult Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<xsl:choose>
					<xsl:when test="not($hasIR)">
						<ctl:message>The server does not support the operation "InsertResult", so skip this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<!-- set a resultValues variable -->
						<xsl:variable name="resultValues" select="'2008-03-01T17:44:15.000+00:00,32.0'" />
						
						<xsl:if test="$test1201 eq 'true'">
							<ctl:message select="'******************** 12.01.RequestNoService ********************'"/>
							<ctl:call-test name="sos:IRRequestNoService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation" />
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="template" select="$template" />
								<ctl:with-param name="resultValues" select="$resultValues" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1202 eq 'true'">
							<ctl:message select="'******************** 12.02.RequestNullService ********************'"/>
							<ctl:call-test name="sos:IRRequestNullService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation" />
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="template" select="$template" />
								<ctl:with-param name="resultValues" select="$resultValues" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1203 eq 'true'">
							<ctl:message select="'******************** 12.03.RequestInvalidService ********************'"/>
							<ctl:call-test name="sos:IRRequestInvalidService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation" />
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="template" select="$template" />
								<ctl:with-param name="resultValues" select="$resultValues" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1204 eq 'true'">
							<ctl:message select="'******************** 12.04.RequestNoVersion ********************'"/>
							<ctl:call-test name="sos:IRRequestNoVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation" />
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="template" select="$template" />
								<ctl:with-param name="resultValues" select="$resultValues" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1205 eq 'true'">
							<ctl:message select="'******************** 12.05.RequestNullVersion ********************'"/>
							<ctl:call-test name="sos:IRRequestNullVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation" />
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="template" select="$template" />
								<ctl:with-param name="resultValues" select="$resultValues" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1206 eq 'true'">
							<ctl:message select="'******************** 12.06.RequestInvalidVersion ********************'"/>
							<ctl:call-test name="sos:IRRequestInvalidVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation" />
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="template" select="$template" />
								<ctl:with-param name="resultValues" select="$resultValues" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1207 eq 'true'">
							<ctl:message select="'******************** 12.07.RequestNulltemplate ********************'"/>
							<ctl:call-test name="sos:IRRequestNulltemplate">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation" />
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="template" select="$template" />
								<ctl:with-param name="resultValues" select="$resultValues" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1208 eq 'true'">
							<ctl:message select="'******************** 12.08.RequestInvalidtemplate ********************'"/>
							<ctl:call-test name="sos:IRRequestInvalidtemplate">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation" />
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="template" select="$template" />
								<ctl:with-param name="resultValues" select="$resultValues" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1209 eq 'true'">
							<ctl:message select="'******************** 12.09.RequestNullresultValues ********************'"/>
							<ctl:call-test name="sos:IRRequestNullresultValues">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation" />
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="template" select="$template" />
								<ctl:with-param name="resultValues" select="$resultValues" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1210 eq 'true'">
							<ctl:message select="'******************** 12.10.RequestInvalidresultValues ********************'"/>
							<ctl:call-test name="sos:IRRequestInvalidresultValues">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation" />
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="template" select="$template" />
								<ctl:with-param name="resultValues" select="$resultValues" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1211 eq 'true'">
							<ctl:message select="'******************** 12.11.RequestValidRequest ********************'"/>
							<ctl:call-test name="sos:IRRequestValidRequest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="InsertResultRootElementName" select="$InsertResultRootElementName" />
								<ctl:with-param name="InsertResultResponseSchemaLocation" select="$InsertResultResponseSchemaLocation" />
								<ctl:with-param name="InsertResultResponseSchemaType" select="$InsertResultResponseSchemaType" />
								<ctl:with-param name="template" select="$template" />
								<ctl:with-param name="resultValues" select="$resultValues" />
							</ctl:call-test>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 1201 Send InsertResult request (KVP) without parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<!-- 1201 Send InsertResult request (POST or SOAP) without parameter service ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResult@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:IRRequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="template" />
			<ctl:param name="resultValues" />
			<ctl:assertion>
			Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertResultResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResult version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResult version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResult request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('service')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element InsertResult@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with no service parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element InsertResult@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1202 Send InsertResult request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:IRRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="template" />
			<ctl:param name="resultValues" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertResultResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResult service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResult service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResult request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1203 Send InsertResult request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:IRRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="template" />
			<ctl:param name="resultValues" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertResultResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResult service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResult service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResult request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 1204 Send InsertResult request (KVP) without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "version".. -->
		<!-- 1204 Send InsertResult request (POST or SOAP) without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element InsertResult@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:IRRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="template" />
			<ctl:param name="resultValues" />
			<ctl:assertion>
			Send a request (KVP) without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request (POST or SOAP) without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element InsertResultTemplate@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertResultResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResult service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResult service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResult request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('version')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element InsertResult@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element InsertResult@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1205 Send InsertResult request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:IRRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="template" />
			<ctl:param name="resultValues" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertResultResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResult service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResult service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResult request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1206 Send InsertResult request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:IRRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="template" />
			<ctl:param name="resultValues" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertResultResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResult service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResult service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResult request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1207 Send InsertResult request with null Element template ,the response must be a valid exception with code "MissingParameterValue" and locator "template".. -->
		<ctl:test name="sos:IRRequestNulltemplate">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="template" />
			<ctl:param name="resultValues" />
			<ctl:assertion>Send a request with null parameter "template",and the response must be a valid exception with code "MissingParameterValue" and locator "template". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "template"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertResultResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResult request with invalid template parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('template')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with null template parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "template".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1208 Send InsertResult request with invalid Element template ,the response must be a valid exception with code "InvalidParameterValue" and locator "template".. -->
		<ctl:test name="sos:IRRequestInvalidtemplate">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="template" />
			<ctl:param name="resultValues" />
			<ctl:assertion>Send a request with invalid parameter "template",and the response must be a valid exception with code "InvalidParameterValue" and locator "template". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "template"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertResultResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="current-dateTime()" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="current-dateTime()" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResult request with invalid template parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('template')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with invalid template parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "template".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1209 Send InsertResult request with null Element resultValues ,the response must be a valid exception with code "MissingParameterValue" and locator "resultValues".. -->
		<ctl:test name="sos:IRRequestNullresultValues">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="template" />
			<ctl:param name="resultValues" />
			<ctl:assertion>Send a request with null parameter "resultValues",and the response must be a valid exception with code "MissingParameterValue" and locator "resultValues". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "resultValues"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="InsertResultResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResult request with invalid resultValues parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('resultValues')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with null resultValues parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "resultValues".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1210 Send InsertResult request with invalid Element resultValues ,the response must be a valid exception with code "InvalidParameterValue" and locator "resultValues".. -->
		<ctl:test name="sos:IRRequestInvalidresultValues">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="template" />
			<ctl:param name="resultValues" />
			<ctl:assertion>Send a request with invalid parameter "resultValues",and the response must be a valid exception with code "InvalidParameterValue" and locator "resultValues". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "resultValues"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertResultResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="'1234567890'" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="'1234567890'" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($InsertResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a InsertResult request with invalid resultValues parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$InsertResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('resultValues')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a InsertResult request with invalid resultValues parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "resultValues".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1211 Send valid InsertResult request, the response must be a valid InsertResultResponse. -->
		<ctl:test name="sos:IRRequestValidRequest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="InsertResultRootElementName" />
			<ctl:param name="InsertResultResponseSchemaLocation" />
			<ctl:param name="InsertResultResponseSchemaType" />
			<ctl:param name="template" />
			<ctl:param name="resultValues" />
			<ctl:assertion>Send a valid request ,and there must be have a valid InsertResultResponse returned. </ctl:assertion>
			<ctl:comment>Pass if the response is a valid InsertResultResponse and has an observation element in the response; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="InsertResultResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:InsertResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$InsertResultResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$InsertResultResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:InsertResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0"
										xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:template><xsl:value-of select="$template" /></sos:template>
										<sos:resultValues><xsl:value-of select="$resultValues" /></sos:resultValues>
									</sos:InsertResult>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$InsertResultResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$InsertResultResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($InsertResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the InsertResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$InsertResultResponse/*">
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($InsertResultResponse/*[1]))" />
							<xsl:if test="not($responseRoot=$DeleteSensorRootElementName)">
								<ctl:message>FAILURE:  The root element from the response to a InsertResult request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$InsertResultRootElementName" />"</ctl:message>
								<ctl:fail />
							</xsl:if>
							<!-- 1.response has one and only one observation -->
							<xsl:variable name="innerTag" select="count($InsertResultResponse/sos:InsertResultResponse/*[1])" />
							<xsl:if test="not($innerTag=0)">
								<ctl:message>FAILURE:  The response should be empty.</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
						
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<!-- 13.SOS resultRetrieval: GetResultTemplate -->
	<ctl:package>
		<ctl:test name="sos:GetResultTemplate-Test">
			<ctl:param name="serviceURL" />
			<ctl:param name="hasGRT" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="GetResultTemplateResponseContentType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test1301" />
			<ctl:param name="test1302" />
			<ctl:param name="test1303" />
			<ctl:param name="test1304" />
			<ctl:param name="test1305" />
			<ctl:param name="test1306" />
			<ctl:param name="test1307" />
			<ctl:param name="test1308" />
			<ctl:param name="test1309" />
			<ctl:param name="test1310" />
			<ctl:param name="test1311" />
			<ctl:assertion>Execute GetResultTemplate Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<xsl:choose>
					<xsl:when test="not($hasGRT)">
						<ctl:message>The server does not support the operation "GetResultTemplate", so skip this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						
						<!--讓使用者選一個 offering 和 observedProperty -->
						<xsl:variable name="form-values">
							<ctl:form height="750" width="1024">
								<body>
									<p>Please select an offering.</p>
									<blockquote>
										<table border="1" padding="4" bgcolor="#00ffff" align="center">
											<tr>
												<td>
													<select name="offeringDropDown">
														<xsl:for-each select="$getCapabilitiesResponse//sos:contents//swes:offering//swes:identifier">
															<xsl:variable name="offering" select="." />
															<option><xsl:attribute name="value"><xsl:value-of select="$offering" /></xsl:attribute><xsl:value-of select="$offering" /></option> 
														</xsl:for-each>
													</select>
												</td>
											</tr>				
										</table>						
									</blockquote>
									<p>Please select an observedProperty.</p>
									<blockquote>
										<table border="1" padding="4" bgcolor="#00ffff" align="center">
											<tr>
												<td>
													<select name="observedPropertyDropDown">
														<xsl:for-each select="$getCapabilitiesResponse//sos:contents//swes:observableProperty">
															<xsl:variable name="observedProperty" select="." />
															<option><xsl:attribute name="value"><xsl:value-of select="$observedProperty" /></xsl:attribute><xsl:value-of select="$observedProperty" /></option> 
														</xsl:for-each>
													</select>
												</td>
											</tr>				
										</table>						
									</blockquote>
									<div align="center">
										<input type="submit" value="Start"/>						
									</div>
								</body>
							</ctl:form>
						</xsl:variable>
						<!-- get a valid offering-->
						<xsl:variable name="offering" select="$form-values/values/value[@key='offeringDropDown']"/>
						<ctl:message>The offering was:  <xsl:value-of select="$offering" /></ctl:message>
						<!-- get a valid observableProperty-->
						<xsl:variable name="observedProperty" select="$form-values/values/value[@key='observedPropertyDropDown']"/>
						<ctl:message>The observedProperty was:  <xsl:value-of select="$observedProperty" /></ctl:message>
						
						<xsl:if test="$test1301 eq 'true'">
							<ctl:message select="'******************** 13.01.RequestNoService ********************'"/>
							<ctl:call-test name="sos:GRTRequestNoService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultTemplateRootElementName" select="$GetResultTemplateRootElementName" />
								<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="$GetResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="GetResultTemplateResponseSchemaType" select="$GetResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1302 eq 'true'">
							<ctl:message select="'******************** 13.02.RequestNullService ********************'"/>
							<ctl:call-test name="sos:GRTRequestNullService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultTemplateRootElementName" select="$GetResultTemplateRootElementName" />
								<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="$GetResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="GetResultTemplateResponseSchemaType" select="$GetResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1303 eq 'true'">
							<ctl:message select="'******************** 13.03.RequestInvalidService ********************'"/>
							<ctl:call-test name="sos:GRTRequestInvalidService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultTemplateRootElementName" select="$GetResultTemplateRootElementName" />
								<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="$GetResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="GetResultTemplateResponseSchemaType" select="$GetResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1304 eq 'true'">
							<ctl:message select="'******************** 13.04.RequestNoVersion ********************'"/>
							<ctl:call-test name="sos:GRTRequestNoVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultTemplateRootElementName" select="$GetResultTemplateRootElementName" />
								<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="$GetResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="GetResultTemplateResponseSchemaType" select="$GetResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1305 eq 'true'">
							<ctl:message select="'******************** 13.05.RequestNullVersion ********************'"/>
							<ctl:call-test name="sos:GRTRequestNullVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultTemplateRootElementName" select="$GetResultTemplateRootElementName" />
								<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="$GetResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="GetResultTemplateResponseSchemaType" select="$GetResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1306 eq 'true'">
							<ctl:message select="'******************** 13.06.RequestInvalidVersion ********************'"/>
							<ctl:call-test name="sos:GRTRequestInvalidVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultTemplateRootElementName" select="$GetResultTemplateRootElementName" />
								<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="$GetResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="GetResultTemplateResponseSchemaType" select="$GetResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1307 eq 'true'">
							<ctl:message select="'******************** 13.07.RequestNulloffering ********************'"/>
							<ctl:call-test name="sos:GRTRequestNulloffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultTemplateRootElementName" select="$GetResultTemplateRootElementName" />
								<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="$GetResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="GetResultTemplateResponseSchemaType" select="$GetResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1308 eq 'true'">
							<ctl:message select="'******************** 13.08.RequestInvalidoffering ********************'"/>
							<ctl:call-test name="sos:GRTRequestInvalidoffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultTemplateRootElementName" select="$GetResultTemplateRootElementName" />
								<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="$GetResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="GetResultTemplateResponseSchemaType" select="$GetResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1309 eq 'true'">
							<ctl:message select="'******************** 13.09.RequestNullobservedProperty ********************'"/>
							<ctl:call-test name="sos:GRTRequestNullobservedProperty">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultTemplateRootElementName" select="$GetResultTemplateRootElementName" />
								<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="$GetResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="GetResultTemplateResponseSchemaType" select="$GetResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1310 eq 'true'">
							<ctl:message select="'******************** 13.10.RequestInvalidobservedProperty ********************'"/>
							<ctl:call-test name="sos:GRTRequestInvalidobservedProperty">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultTemplateRootElementName" select="$GetResultTemplateRootElementName" />
								<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="$GetResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="GetResultTemplateResponseSchemaType" select="$GetResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1311 eq 'true'">
							<ctl:message select="'******************** 13.11.RequestValidRequest ********************'"/>
							<ctl:call-test name="sos:GRTRequestValidRequest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultTemplateRootElementName" select="$GetResultTemplateRootElementName" />
								<ctl:with-param name="GetResultTemplateResponseSchemaLocation" select="$GetResultTemplateResponseSchemaLocation" />
								<ctl:with-param name="GetResultTemplateResponseSchemaType" select="$GetResultTemplateResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
					
					</xsl:otherwise>
				</xsl:choose>
				
				
				
			</ctl:code>
		</ctl:test>
		
		<!-- 1301 Send GetResultTemplate request (KVP) without parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "Expected attribute: service in element GetResultTemplate@http://www.opengis.net/sos/2.0".. -->
		<!-- 1301 Send GetResultTemplate request (POST or SOAP) without parameter service ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetResultTemplate@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GRTRequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>
			Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResultTemplate</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResultTemplate version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResultTemplate version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResultTemplate request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('service')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetResultTemplate@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with no service parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element GetResultTemplate@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1302 Send GetResultTemplate request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:GRTRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service"></ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResultTemplate</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResultTemplate service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResultTemplate service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResultTemplate request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1303 Send GetResultTemplate request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:GRTRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">ASDF</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResultTemplate</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResultTemplate service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResultTemplate service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResultTemplate request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 1304 Send GetResultTemplate request (KVP) without parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<!-- 1304 Send GetResultTemplate request (POST or SOAP) without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetResultTemplate@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GRTRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>
			Send a request (KVP) without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request (POST or SOAP) without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element InsertResultTemplate@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="request">GetResultTemplate</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResultTemplate request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('version')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetResultTemplate@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element GetResultTemplate@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1305 Send GetResultTemplate request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:GRTRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version"></ctl:param>	
								<ctl:param name="request">GetResultTemplate</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResultTemplate request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1306 Send GetResultTemplate request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:GRTRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">999</ctl:param>	
								<ctl:param name="request">GetResultTemplate</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResultTemplate request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1307 Send GetResultTemplate request with null Element offering ,the response must be a valid exception with code "MissingParameterValue" and locator "offering".. -->
		<ctl:test name="sos:GRTRequestNulloffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with null parameter "offering",and the response must be a valid exception with code "MissingParameterValue" and locator "offering". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResultTemplate</ctl:param>	
								<ctl:param name="offering"></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResultTemplate request with invalid offering parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('offering')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with null offering parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "offering".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1308 Send GetResultTemplate request with invalid Element offering ,the response must be a valid exception with code "InvalidParameterValue" and locator "offering".. -->
		<ctl:test name="sos:GRTRequestInvalidoffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with invalid parameter "offering",and the response must be a valid exception with code "InvalidParameterValue" and locator "offering". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResultTemplate</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="current-dateTime()" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="current-dateTime()" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResultTemplate request with invalid offering parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('offering')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with invalid offering parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "offering".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1309 Send GetResultTemplate request with null Element observedProperty ,the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GRTRequestNullobservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with null parameter "observedProperty",and the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResultTemplate</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResultTemplate request with invalid observedProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with null observedProperty parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observedProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 1310 Send GetResultTemplate request with invalid Element observedProperty ,the response must be a valid exception with code "InvalidParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GRTRequestInvalidobservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with invalid parameter "observedProperty",and the response must be a valid exception with code "InvalidParameterValue" and locator "observableProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResultTemplate</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultTemplateResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultTemplateResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResultTemplate request with invalid observedProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultTemplateResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResultTemplate request with invalid observedProperty parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observedProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1311 Send valid GetResultTemplate request, the response must be a valid GetResultTemplateResponse. -->
		<ctl:test name="sos:GRTRequestValidRequest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultTemplateRootElementName" />
			<ctl:param name="GetResultTemplateResponseSchemaLocation" />
			<ctl:param name="GetResultTemplateResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a valid request ,and there must be have a valid GetResultTemplateResponse returned. </ctl:assertion>
			<ctl:comment>Pass if the observation listed in GetResultTemplateResponse are same to GetResultTemplate request; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetResultTemplateResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResultTemplate</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$GetResultTemplateResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$GetResultTemplateResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$GetResultTemplateResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$GetResultTemplateResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResultTemplate service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResultTemplate>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$GetResultTemplateResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$GetResultTemplateResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultTemplateResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResultTemplate response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<!-- check the gml:identifier value is same to observation value in the request. -->
						<xsl:if test="$GetResultTemplateResponse/*">
							<!-- check the root is "sos:GetResultTemplateResponse" and empty context.-->
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($GetResultTemplateResponse/*[1]))" />
							<xsl:if test="not($responseRoot=$GetResultTemplateRootElementName)">
								<ctl:message>FAILURE:  The root element from the response to a GetResultTemplate request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$GetResultTemplateRootElementName" />"</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

	</ctl:package>

	<!-- 14.SOS resultRetrieval: GetResult -->
	<ctl:package>
		<ctl:test name="sos:GetResult-Test">
			<ctl:param name="serviceURL" />
			<ctl:param name="hasGR" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="GetResultResponseContentType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test1401" />
			<ctl:param name="test1402" />
			<ctl:param name="test1403" />
			<ctl:param name="test1404" />
			<ctl:param name="test1405" />
			<ctl:param name="test1406" />
			<ctl:param name="test1407" />
			<ctl:param name="test1408" />
			<ctl:param name="test1409" />
			<ctl:param name="test1410" />
			<ctl:param name="test1411" />
			<ctl:param name="test1412" />
			<ctl:assertion>Execute GetResult Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<xsl:choose>
					<xsl:when test="not($hasGR)">
						<ctl:message>The server does not support the operation "GetResult", so skip this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<!--讓使用者選一個 offering 和 observedProperty -->
						<xsl:variable name="form-values">
							<ctl:form height="750" width="1024">
								<body>
									<p>Please select an offering.</p>
									<blockquote>
										<table border="1" padding="4" bgcolor="#00ffff" align="center">
											<tr>
												<td>
													<select name="offeringDropDown">
														<xsl:for-each select="$getCapabilitiesResponse//sos:contents//swes:offering//swes:identifier">
															<xsl:variable name="offering" select="." />
															<option><xsl:attribute name="value"><xsl:value-of select="$offering" /></xsl:attribute><xsl:value-of select="$offering" /></option> 
														</xsl:for-each>
													</select>
												</td>
											</tr>				
										</table>						
									</blockquote>
									<p>Please select an observedProperty.</p>
									<blockquote>
										<table border="1" padding="4" bgcolor="#00ffff" align="center">
											<tr>
												<td>
													<select name="observedPropertyDropDown">
														<xsl:for-each select="$getCapabilitiesResponse//sos:contents//swes:observableProperty">
															<xsl:variable name="observedProperty" select="." />
															<option><xsl:attribute name="value"><xsl:value-of select="$observedProperty" /></xsl:attribute><xsl:value-of select="$observedProperty" /></option> 
														</xsl:for-each>
													</select>
												</td>
											</tr>				
										</table>						
									</blockquote>
									<div align="center">
										<input type="submit" value="Start"/>						
									</div>
								</body>
							</ctl:form>
						</xsl:variable>
						<!-- get a valid offering-->
						<xsl:variable name="offering" select="$form-values/values/value[@key='offeringDropDown']"/>
						<ctl:message>The offering was:  <xsl:value-of select="$offering" /></ctl:message>
						<!-- get a valid observableProperty-->
						<xsl:variable name="observedProperty" select="$form-values/values/value[@key='observedPropertyDropDown']"/>
						<ctl:message>The observedProperty was:  <xsl:value-of select="$observedProperty" /></ctl:message>
						
						<xsl:if test="$test1401 eq 'true'">
							<ctl:message select="'******************** 14.01.RequestNoService ********************'"/>
							<ctl:call-test name="sos:GRRequestNoService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1402 eq 'true'">
							<ctl:message select="'******************** 14.02.RequestNullService ********************'"/>
							<ctl:call-test name="sos:GRRequestNullService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1403 eq 'true'">
							<ctl:message select="'******************** 14.03.RequestInvalidService ********************'"/>
							<ctl:call-test name="sos:GRRequestInvalidService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1404 eq 'true'">
							<ctl:message select="'******************** 14.04.RequestNoVersion ********************'"/>
							<ctl:call-test name="sos:GRRequestNoVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1405 eq 'true'">
							<ctl:message select="'******************** 14.05.RequestNullVersion ********************'"/>
							<ctl:call-test name="sos:GRRequestNullVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1406 eq 'true'">
							<ctl:message select="'******************** 14.06.RequestInvalidVersion ********************'"/>
							<ctl:call-test name="sos:GRRequestInvalidVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1407 eq 'true'">
							<ctl:message select="'******************** 14.07.RequestNulloffering ********************'"/>
							<ctl:call-test name="sos:GRRequestNulloffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1408 eq 'true'">
							<ctl:message select="'******************** 14.08.RequestInvalidoffering ********************'"/>
							<ctl:call-test name="sos:GRRequestInvalidoffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1409 eq 'true'">
							<ctl:message select="'******************** 14.09.RequestNullobservedProperty ********************'"/>
							<ctl:call-test name="sos:GRRequestNullobservedProperty">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1410 eq 'true'">
							<ctl:message select="'******************** 14.10.RequestInvalidobservedProperty ********************'"/>
							<ctl:call-test name="sos:GRRequestInvalidobservedProperty">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1411 eq 'true'">
							<ctl:message select="'******************** 14.11.RequestValidRequest ********************'"/>
							<ctl:call-test name="sos:GRRequestValidRequest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test1412 eq 'true'">
							<ctl:message select="'******************** 14.12.RequestEmptyResponse ********************'"/>
							<ctl:call-test name="sos:GRRequestEmptyResponse">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetResultRootElementName" select="$GetResultRootElementName" />
								<ctl:with-param name="GetResultResponseSchemaLocation" select="$GetResultResponseSchemaLocation" />
								<ctl:with-param name="GetResultResponseSchemaType" select="$GetResultResponseSchemaType" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observedProperty" select="$observedProperty" />
							</ctl:call-test>
						</xsl:if>
					
					</xsl:otherwise>
				</xsl:choose>
				
				
				
			</ctl:code>
		</ctl:test>
		
		<!-- 1401 Send GetResult request (KVP) without parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<!-- 1401 Send GetResult request (POST or SOAP) without parameter service ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetResult@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GRRequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>
			Send a request (KVP) without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". 
			Send a request (POST or SOAP) without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResult request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('service')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetResult@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with no service parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with no service parameter specified. </ctl:message>
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element GetResult@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1402 Send GetResult request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:GRRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service"></ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResult request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1403 Send GetResult request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:GRRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">ASDF</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResult request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 1404 Send GetResult request (KVP) without parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<!-- 1404 Send GetResult request (POST or SOAP) without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetResult@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GRRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>
			Send a request (KVP) without parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". 
			Send a request (POST or SOAP) without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element InsertResultTemplate@http://www.opengis.net/sos/2.0". 
			</ctl:assertion>
			<ctl:comment>
			Pass if the server (KVP) returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.
			Pass if the server (POST or SOAP) returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element InsertResultTemplate@http://www.opengis.net/sos/2.0"; fail otherwise.
			</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResult request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
											<ctl:with-param name="locatorToCheck" select="string('version')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:when>
									<xsl:otherwise>
										<ctl:call-function name="sosFunctions:checkExceptionReport">
											<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
											<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
											<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetResult@http://www.opengis.net/sos/2.0')" />
											<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
										</ctl:call-function>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<xsl:choose>
									<xsl:when test="($isGET)">
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
										<ctl:fail />
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with no version parameter specified.</ctl:message>  
										<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element GetResult@http://www.opengis.net/sos/2.0".</ctl:message>
										<ctl:fail />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1405 Send GetResult request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:GRRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version"></ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResult request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1406 Send GetResult request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:GRRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">999</ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResult request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1407 Send GetResult request with null Element offering ,the response must be a valid exception with code "MissingParameterValue" and locator "offering".. -->
		<ctl:test name="sos:GRRequestNulloffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with null parameter "offering",and the response must be a valid exception with code "MissingParameterValue" and locator "offering". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResult request with invalid offering parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('offering')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with null offering parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "offering".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1408 Send GetResult request with invalid Element offering ,the response must be a valid exception with code "InvalidParameterValue" and locator "offering".. -->
		<ctl:test name="sos:GRRequestInvalidoffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with invalid parameter "offering",and the response must be a valid exception with code "InvalidParameterValue" and locator "offering". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="current-dateTime()" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="current-dateTime()" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResult request with invalid offering parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('offering')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with invalid offering parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "offering".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1409 Send GetResult request with null Element observedProperty ,the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GRRequestNullobservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with null parameter "observedProperty",and the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResult request with invalid observedProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with null observedProperty parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observedProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 1410 Send GetResult request with invalid Element observedProperty ,the response must be a valid exception with code "InvalidParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GRRequestInvalidobservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a request with invalid parameter "observedProperty",and the response must be a valid exception with code "InvalidParameterValue" and locator "observableProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetResultResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetResult request with invalid observedProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetResultResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetResult request with invalid observedProperty parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observedProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1411 Send valid GetResult request, the response must be a valid GetResultResponse. -->
		<ctl:test name="sos:GRRequestValidRequest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a valid request ,and there must be have a valid GetResultResponse returned. </ctl:assertion>
			<ctl:comment>Pass if the observation listed in GetResultResponse are same to GetResult request; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$GetResultResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$GetResultResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$GetResultResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$GetResultResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
									</sos:GetResult>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$GetResultResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$GetResultResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<!-- check the gml:identifier value is same to observation value in the request. -->
						<xsl:if test="$GetResultResponse/*">
							<!-- check the root is "sos:GetResultResponse" and empty context.-->
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($GetResultResponse/*[1]))" />
							<xsl:if test="not($responseRoot=$GetResultRootElementName)">
								<ctl:message>FAILURE:  The root element from the response to a GetResult request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$GetResultRootElementName" />"</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 1412 Send valid GetResult request with temporal filter from the year 40000, the response must be a valid GetResultResponse but empty. -->
		<ctl:test name="sos:GRRequestEmptyResponse">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetResultRootElementName" />
			<ctl:param name="GetResultResponseSchemaLocation" />
			<ctl:param name="GetResultResponseSchemaType" />
			<ctl:param name="offering" />
			<ctl:param name="observedProperty" />
			<ctl:assertion>Send a valid request ,and there must be have a valid GetResultResponse returned. </ctl:assertion>
			<ctl:comment>Pass if the response is empty; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<ctl:message>Send a request to service with temporalFilter during 40000-01-10T10:00:00Z/40000-01-10T11:00:00Z</ctl:message>
				<xsl:variable name="GetResultResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetResult</ctl:param>	
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observedProperty" /></ctl:param>
								<ctl:param name="temporalFilter"><xsl:value-of select="'om:phenomenonTime,40000-01-10T10:00:00Z/40000-01-10T11:00:00Z'" /></ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$GetResultResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$GetResultResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" xmlns:fes="http://www.opengis.net/fes/2.0" xmlns:gml="http://www.opengis.net/gml/3.2"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
										<sos:temporalFilter>
											<fes:During>
												<fes:ValueReference>om:phenomenonTime</fes:ValueReference>
												<gml:TimePeriod>
													<gml:beginPosition>40000-01-10T10:00:00Z</gml:beginPosition>
													<gml:endPosition>40000-01-10T11:00:00Z</gml:endPosition>
												</gml:TimePeriod>
											</fes:During>
										</sos:temporalFilter>
									</sos:GetResult>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$GetResultResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$GetResultResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetResult service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" xmlns:fes="http://www.opengis.net/fes/2.0" xmlns:gml="http://www.opengis.net/gml/3.2"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observedProperty" /></sos:observedProperty>
										<sos:temporalFilter>
											<fes:During>
												<fes:ValueReference>om:phenomenonTime</fes:ValueReference>
												<gml:TimePeriod>
													<gml:beginPosition>40000-01-10T10:00:00Z</gml:beginPosition>
													<gml:endPosition>40000-01-10T11:00:00Z</gml:endPosition>
												</gml:TimePeriod>
											</fes:During>
										</sos:temporalFilter>
									</sos:GetResult>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$GetResultResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$GetResultResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetResultResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetResult response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetResultResponse/*">
							<!-- check the root is "sos:GetResultResponse" and empty context.-->
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($GetResultResponse/*[1]))" />
							<xsl:if test="not($responseRoot=$GetResultRootElementName)">
								<ctl:message>FAILURE:  The root element from the response to a GetResult request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$GetResultRootElementName" />"</ctl:message>
								<ctl:fail />
							</xsl:if>
							<!-- check the response is empty -->
							<xsl:variable name="ifResponseIsEmpty" select="count($GetResultResponse/*[1]/*[1]) = 0" />
							<xsl:if test="not($ifResponseIsEmpty)">
								<ctl:message>FAILURE:  The root element from the response to a GetResult request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$GetResultRootElementName" />"</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

	</ctl:package>

	<!-- functions -->
	<ctl:package>
	<ctl:function name="sosFunctions:exceptionReportSchemaPath">
        <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
		<ctl:param name="owsVersion">The numeric version of the schema</ctl:param>
		<ctl:code>			
			<xsl:value-of select="sosFunctions:schemaPath($schemaRoot, $owsVersion, 'ows', 'owsExceptionReport.xsd')"/>
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:schemaPath">
        <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
		<ctl:param name="version">The numeric version of the schema</ctl:param>
		<ctl:param name="encoding">The name of the service or encoding to be used</ctl:param>
		<ctl:param name="filename">Filename of schema file</ctl:param>	
		<ctl:code>			
			<xsl:value-of select="concat($schemaRoot, $encoding, '/', $version, '/', $filename)"/>
		</ctl:code>
	</ctl:function> 

	<ctl:function name="sosFunctions:xmlValidatingParser">
        <ctl:param name="schemaFile">schemaFile</ctl:param>
		<ctl:description>Standard CTL XMLValidatingParser</ctl:description>
        <ctl:code>						
			<xsl:choose>
				<xsl:when test="starts-with($schemaFile,'http')">
					<parsers:XMLValidatingParser ignoreErrors="false">
						<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
						<xsl:if test="$schemaFile='xsd/ogc/om/1.0.0/om.xsd'">
							<parsers:schema type="resource">xsd/ogc/sampling/1.0.0/sampling.xsd</parsers:schema>
						</xsl:if>
						<parsers:schemas>
							<parsers:schema type="resource">
								<xsl:value-of select="$schemaFile"/>								
							</parsers:schema>							
							<parsers:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</parsers:schema>	
						</parsers:schemas>
					</parsers:XMLValidatingParser>	
				</xsl:when>
				<xsl:otherwise>
					<parsers:XMLValidatingParser ignoreErrors="false">
						<parsers:schemas>
							<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>						
							<parsers:schema type="resource">
								<xsl:value-of select="$schemaFile"/>
							</parsers:schema>						
						</parsers:schemas>
					</parsers:XMLValidatingParser>
				</xsl:otherwise>
			</xsl:choose>				
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="sosFunctions:exceptionCode">
		<ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
		<ctl:description>Return the @exceptionCode attribute of an ows:ExceptionReport </ctl:description>
		<ctl:code>
			<xsl:variable name="exceptionElement" select="sosFunctions:exceptionElement($exceptionResponse)"/>
			<xsl:value-of select="$exceptionElement/@exceptionCode" />
		</ctl:code>
	</ctl:function>

    <ctl:function name="sosFunctions:xmlValidatingParser">
        <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
		<ctl:param name="version">The numeric version of the schema</ctl:param>
		<ctl:param name="encoding">The name of the service or encoding to be used</ctl:param>
		<ctl:param name="filename">Filenam of schema file</ctl:param>
		<ctl:description>Standard CTL XMLValidatingParser</ctl:description>
        <ctl:code>				
			<xsl:variable name="schemaFile" select="sosFunctions:schemaPath($schemaRoot, $version, $encoding, $filename)"/>
			<xsl:copy-of select="sosFunctions:xmlValidatingParser($schemaFile)"/>
        </ctl:code>
    </ctl:function>

	<ctl:function name="sosFunctions:exceptionElement">
		<ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
		<ctl:description>Return the Exception element of an ows:ExceptionReport </ctl:description>
		<ctl:code>
			<xsl:copy-of select="$exceptionResponse//ows:ExceptionReport/ows:Exception" />
		</ctl:code>
	</ctl:function>
	
    <ctl:function name="sosFunctions:validateGetCapabilitiesResponseSOAP">
        <ctl:return>The GetCapabilitiesResponse document if it's valid</ctl:return>
        <ctl:description>Validates a GetCapabilitiesResponse document according to its schema</ctl:description>
        <ctl:code>
			<parsers:SOAPParser return="content">
				<parsers:XMLValidatingParser>
					<parsers:schemas>
						<parsers:schema type="resource">
							<xsl:value-of select="sosFunctions:getSchemaLocation(string('sosGetCapabilities.xsd'))" />
						</parsers:schema>
						<parsers:schema type="resource">
							<xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
						</parsers:schema>
					</parsers:schemas>
				</parsers:XMLValidatingParser>
			</parsers:SOAPParser>
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="sosFunctions:getSchemaLocation">
        <ctl:param name="schemaName">The name of the schema file for which the full path will be returned</ctl:param>
        <ctl:return>The full schema path</ctl:return>
        <ctl:description>Based on the provided schema name, this function returns the full URL to the schema document</ctl:description>
        <ctl:code>
            <xsl:variable name="schemaLocation" select="string('xsd/ogc/')" />
            <xsl:variable name="sosSchemaLocation" select="concat($schemaLocation,'sos/2.0.0/')" />
			<xsl:variable name="swesSchemaLocation" select="concat($schemaLocation,'swes/2.0/')" />
            <xsl:variable name="owsSchemaLocation" select="concat($schemaLocation,'ows/1.1.0/')" />
            <xsl:variable name="sensorMLSchemaLocation" select="concat($schemaLocation,'sensorML/1.0.1/')" />
            <xsl:variable name="tmlSchemaLocation" select="concat($schemaLocation,'tml/1.0.0/')" />
            <xsl:choose>
                <xsl:when test="starts-with($schemaName,'sos')">
                    <xsl:value-of select="concat($sosSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:when test="starts-with($schemaName,'swes')">
                    <xsl:value-of select="concat($swesSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:when test="starts-with($schemaName,'ows')">
                    <xsl:value-of select="concat($owsSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:when test="starts-with($schemaName,'sensorML')">
                    <xsl:value-of select="concat($sensorMLSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:when test="starts-with($schemaName,'tml')">
                    <xsl:value-of select="concat($tmlSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$schemaLocation" />
                </xsl:otherwise>
            </xsl:choose>
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="sosFunctions:validateExceptionReport"><!-- CHECK OK -->
        <ctl:return>The exception report if it's valid</ctl:return>
        <ctl:description>Validates a returned exception report according to its schema and determines if it is an appropriate exception report for an SOS</ctl:description>
        <ctl:code>
			<parsers:XMLValidatingParser>
				<parsers:schemas>
					<parsers:schema type="resource">
						<xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
					</parsers:schema>
				</parsers:schemas>
			</parsers:XMLValidatingParser>
        </ctl:code>
    </ctl:function>
	
    <ctl:function name="sosFunctions:validateExceptionReportSOAP">
        <ctl:return>The exception report if it's valid</ctl:return>
        <ctl:description>Validates a returned exception report according to its schema and determines if it is an appropriate exception report for an SOS</ctl:description>
        <ctl:code>
			<parsers:SOAPParser return="content">
				<parsers:XMLValidatingParser>
					<parsers:schemas>
						<parsers:schema type="resource">
							<xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
						</parsers:schema>
					</parsers:schemas>
				</parsers:XMLValidatingParser>
			</parsers:SOAPParser>
        </ctl:code>
    </ctl:function>
	
	<!--Validates an ExceptionReport and checks for specific exceptionCode and locator values-->
    <ctl:function name="sosFunctions:checkExceptionReport"><!-- CHECK OK -->
        <ctl:param name="exceptionReport">The exception report to check</ctl:param>
        <ctl:param name="exceptionCodeToCheck">The exceptionCode to check</ctl:param>
        <ctl:param name="locatorToCheck">The locator to check (a * can be provided to indicate that any locator value is allowed)</ctl:param>
		<ctl:param name="PostEncodingIsSOAP">Encoding Type</ctl:param>
        <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
        <ctl:description></ctl:description>
        <ctl:code>
			<xsl:if test="$PostEncodingIsSOAP=string('true')">
				<xsl:variable name="exceptionElement" select="$exceptionReport//soap12:Detail/ows:Exception" />
				<xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
				<xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
				<xsl:choose>
					<xsl:when test="$locatorToCheck='*'">
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (string-length(normalize-space($locatorValue))>=0)" />
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (lower-case($locatorToCheck)=lower-case($locatorValue))" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
			<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
				<xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception" />
				<xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
				<xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
				<xsl:choose>
					<xsl:when test="$locatorToCheck='*'">
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (string-length(normalize-space($locatorValue))>=0)" />
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (lower-case($locatorToCheck)=lower-case($locatorValue))" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="sosFunctions:getExceptionInfo">
        <ctl:param name="exceptionReport">The exception report</ctl:param>
        <ctl:return>The Exception Code and Locator of an exception report</ctl:return>
        <ctl:code>
            <xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception" />
            <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
            <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
            <xsl:value-of select="concat('Exception Report (exceptionCode, locator):  ',$exceptionCodeValue,',',$locatorValue)" />
        </ctl:code>
    </ctl:function>

	<ctl:function name="sosFunctions:getExceptionInfoSOAP"><!-- CHECK OK -->
        <ctl:param name="exceptionReport">The exception report to check</ctl:param>
        <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
        <ctl:description></ctl:description>
        <ctl:code>
            <xsl:variable name="exceptionElement" select="$exceptionReport//soap12:Detail/ows:Exception" />
            <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
            <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
            <xsl:variable name="exceptionText" select="$exceptionElement//ows:ExceptionText" />
            <xsl:value-of select="concat('ExceptionReport (exceptionCode, locator):  ',$exceptionCodeValue,', ',$locatorValue,' - ',$exceptionText)" />
        </ctl:code>
	</ctl:function>
	
	<!--Validates a GetObservation response-->
    <ctl:function name="sosFunctions:validateGetObservationResponse">
        <ctl:return>The GetObservationResponse document if it's valid</ctl:return>
        <ctl:description>Validates a GetObservationResponse document according to its schema</ctl:description>
        <ctl:code>
			<parsers:XMLValidatingParser>
				<parsers:schemas>
					<parsers:schema type="resource">
						<xsl:value-of select="sosFunctions:getSchemaLocation(string('sosGetObservation.xsd'))" />
					</parsers:schema>
					<parsers:schema type="resource">
						<xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
					</parsers:schema>
				</parsers:schemas>
			</parsers:XMLValidatingParser>
        </ctl:code>
    </ctl:function>
	</ctl:package>

</ctl:package>