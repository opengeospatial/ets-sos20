<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:sosFunctions="http://www.opengis.net/sos/2.0"	
	xmlns:owsTests="http://www.opengis.net/ows/1.1"
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:fes="http://www.opengis.net/fes/2.0"
	xmlns:gml="http://www.opengis.net/gml/3.2" 
	xmlns:om="http://www.opengis.net/om/2.0"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:soap11="http://schemas.xmlsoap.org/soap/" 
	xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 	
	xmlns:sos="http://www.opengis.net/sos/2.0"	
	xmlns:swe="http://www.opengis.net/swe/2.0"	
	xmlns:swes="http://www.opengis.net/swes/2.0"	
	xmlns:wsa="http://www.w3.org/2005/08/addressing"	
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:parsers="http://www.occamlab.com/te/parsers"
>
	<ctl:suite name="sos:suite">
		<ctl:title>SOS 2.0 Compliance Test Suite</ctl:title>
		<ctl:description>Verifies that an SOS 2.0 implementation complies with a given conformance class.</ctl:description>
		<ctl:link></ctl:link>		
		<ctl:starting-test>sos:Main</ctl:starting-test>
	</ctl:suite>

	<ctl:test name="sos:Main">
		<ctl:assertion>The IUT satisfies all applicable assertions.</ctl:assertion>
		<ctl:code>
			<!-- User Input Form -->
			<xsl:variable name="form-values">
				<ctl:form height="750" width="1024">
					<body>
						<h2 align="center">Compliance test suite for Sensor Observation Service (SOS) 2.0</h2>
						<h3 align="center">Service metadata and test options</h3>
						<p>Please provide a URL from which a capabilities document can be retrieved. </p>
						<p>Modify the URL template below to specify the location of an OGC SOS implementation under test.</p>	
						<blockquote>
							<table border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr>
									<td align="left">Service URL:</td>                        
									<td align="center">
										<input name="service-url" size="128" 
										type="text" 
										value=""/>
									</td>
								</tr>				
							</table>
						</blockquote>
						<p>Please select how tho send this request.</p>
						<blockquote>
							<table border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr>
									<td><input type="radio" name="request-via" checked="true" value="GET">HTTP Get</input></td>
									<td><input type="radio" name="request-via" value="POST">HTTP Post</input></td>
									<td><input type="radio" name="request-via" value="SOAP">SOAP Binding</input></td>
								</tr>				
							</table>						
						</blockquote>
						<p>Please select whether to run all tests or just selected tests.</p>
						<blockquote>
							<table border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr>
									<td><input type="radio" name="which-tests" checked="true" value="all">Run all tests</input></td>
									<td><input type="radio" name="which-tests" value="selected">Run selected tests</input></td>
								</tr>				
							</table>						
						</blockquote>
						<p>If you want to run selected tests, please select the checkboxes for the tests you want to run.</p>
						<blockquote>
							<table border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr><th colspan="3" align="left"><input type="checkbox" name="01">01.OWS Main</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0101">01.01.OWS.ContentType.1</input></td>
									<td><input type="checkbox" name="0102">01.02.OWS.GetCapabilities-Exceptions.2</input></td>
									<td><input type="checkbox" name="0103">01.03.OWS.GetCapabilities-UpdateSequence.1</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0104">01.04.OWS.GetCapabilities-Exceptions.5</input></td>
									<td><input type="checkbox" name="0105">01.05.OWS.CaseInsensitiveKvpNames.1</input></td>
									<td><input type="checkbox" name="0106">01.06.OWS.GetCapabilities-AcceptVersions.1</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0107">01.07.OWS.GetCapabilities-AcceptVersions.2</input></td>
									<td><input type="checkbox" name="0108">01.08.OWS.GetCapabilities-AcceptVersions.3</input></td>
									<td><input type="checkbox" name="0109">01.09.OWS.GetCapabilities-Sections.1</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0110">01.10.OWS.GetCapabilities-Sections.2</input></td>
									<td><input type="checkbox" name="0111">01.11.OWS.GetCapabilities-AcceptFormats.1</input></td>
									<td>--</td>
								</tr>

								<tr><th colspan="3" align="left"><input type="checkbox" name="02">02.SOS General Main</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0201">02.01.SOS.General-InvalidRequest.1</input></td>
									<td>--</td>
									<td>--</td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="03">03.SOS Core: Get Capabilities</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0301">03.01.CorrectServiceParameter</input></td>
									<td><input type="checkbox" name="0302">03.02.OperationMetadataMandatory</input></td>
									<td><input type="checkbox" name="0303">03.03.RequiredSectionsInCapabilities</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0304">03.04.WrongSectionParameter</input></td>
									<td><input type="checkbox" name="0305">03.05.BBOX</input></td>
									<td><input type="checkbox" name="0306">03.06.OperatorDuringAndTEquals</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0307">03.07.ParametersInObservationOffering</input></td>
									<td><input type="checkbox" name="0308">03.08.ResponseFormat</input></td>
									<td><input type="checkbox" name="0309">03.09.InsertionCapabilities</input></td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="04">04.SOS Core: DescribeSensor</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0401">04.01.RequestNoService</input></td>
									<td><input type="checkbox" name="0402">04.02.RequestNullService</input></td>
									<td><input type="checkbox" name="0403">04.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0404">04.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="0405">04.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="0406">04.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0407">04.07.RequestNullProcedure</input></td>
									<td><input type="checkbox" name="0408">04.08.RequestInvalidProcedure</input></td>
									<td><input type="checkbox" name="0409">04.09.RequestNullProcedureDescriptionFormat</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0410">04.10.RequestInvalidProcedureDescriptionFormat</input></td>
									<td><input type="checkbox" name="0411">04.11.RequestValidRequest</input></td>
									<td>--</td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="05">05.SOS Core: GetObservation</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0501">05.01.RequestNoService</input></td>
									<td><input type="checkbox" name="0502">05.02.RequestNullService</input></td>
									<td><input type="checkbox" name="0503">05.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0504">05.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="0505">05.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="0506">05.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0507">05.07.RequestNullOffering</input></td>
									<td><input type="checkbox" name="0508">05.08.RequestInvalidOffering</input></td>
									<td><input type="checkbox" name="0509">05.09.RequestNullObservedProperty</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0510">05.10.RequestInvalidObservedProperty</input></td>
									<td><input type="checkbox" name="0511">05.11.RequestNullProcedure</input></td>
									<td><input type="checkbox" name="0512">05.12.RequestInvalidProcedure</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0513">05.13.RequestNullFeatureOfInterest</input></td>
									<td><input type="checkbox" name="0514">05.14.RequestInvalidFeatureOfInterest</input></td>
									<td><input type="checkbox" name="0515">05.15.RequestNullResponseFormat</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0516">05.16.RequestInvalidResponseFormat</input></td>
									<td><input type="checkbox" name="0517">05.17.RequestNoResponseFormat</input></td>
									<td><input type="checkbox" name="0518">05.18.RequestOtherResponseFormat</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0519">05.19.RequestEmptyObservation</input></td>
									<td><input type="checkbox" name="0520">05.20.RequestResponseExceedsSizeLimit</input></td>
									<td>--</td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="06">06.SOS enhancedOperations: GetFeatureOfInterest</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0601">06.01.RequestNoService</input></td>
									<td><input type="checkbox" name="0602">06.02.RequestNullService</input></td>
									<td><input type="checkbox" name="0603">06.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0604">06.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="0605">06.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="0606">06.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0607">06.07.RequestNullProcedure</input></td>
									<td><input type="checkbox" name="0608">06.08.RequestInvalidProcedure</input></td>
									<td><input type="checkbox" name="0609">06.09.RequestNullObservedProperty</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0610">06.10.RequestInvalidObservedProperty</input></td>
									<td><input type="checkbox" name="0611">06.11.RequestNullFeatureOfInterest</input></td>
									<td><input type="checkbox" name="0612">06.12.RequestInvalidFeatureOfInterest</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0613">06.13.RequestNULLSpatialFilter</input></td>
									<td><input type="checkbox" name="0614">06.14.RequestInvalidSpatialFilter</input></td>
									<td><input type="checkbox" name="0615">06.15.RequestEmptyResponse</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0616">06.16.RequestValidParameter</input></td>
									<td><input type="checkbox" name="0617">06.17.RequestValidFilter</input></td>
									<td><input type="checkbox" name="0618">06.18.RequestNormalRequest</input></td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="07">07.SOS enhancedOperations: GetObservationById</input></th></tr>
								<tr>
									<td><input type="checkbox" name="0701">07.01.RequestNoService</input></td>
									<td><input type="checkbox" name="0702">07.02.RequestNullService</input></td>
									<td><input type="checkbox" name="0703">07.03.RequestInvalidService</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0704">07.04.RequestNoVersion</input></td>
									<td><input type="checkbox" name="0705">07.05.RequestNullVersion</input></td>
									<td><input type="checkbox" name="0706">07.06.RequestInvalidVersion</input></td>
								</tr>
								<tr>
									<td><input type="checkbox" name="0707">07.07.RequestNullobservation</input></td>
									<td><input type="checkbox" name="0708">07.08.RequestInvalidobservation</input></td>
									<td><input type="checkbox" name="0709">07.09.RequestValidRequest</input></td>
								</tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="08">08.SOS Transactional: InsertionCapabilities</input></th></tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="09">09.SOS Transactional: InsertSensor</input></th></tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="10">10.SOS Transactional: DeleteSensor</input></th></tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="11">11.SOS Transactional: InsertObservation</input></th></tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="12">12.SOS resultHandling: InsertResultTemplate</input></th></tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="13">13.SOS resultHandling: InsertResult</input></th></tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="14">14.SOS resultRetrieval: GetResultTemplate</input></th></tr>
								<tr><th colspan="3" align="left"><input type="checkbox" name="15">15.SOS resultRetrieval: GetResult</input></th></tr>
							</table>						
						</blockquote>

						<p>Please press the "Start" button to start testing.</p>
						<div align="center">
							<input type="submit" value="Start"/>						
						</div>
					</body>
				</ctl:form>
			</xsl:variable>

			<!-- Get user input, message user options -->	
			<xsl:variable name="capabilities-url" select="$form-values/values/value[@key='service-url']"/>
			<ctl:message select="concat('capabilities-url: ',$capabilities-url)"/>
			<xsl:variable name="request-via" select="$form-values/values/value[@key='request-via']"/>
			<ctl:message select="concat('request-via: ',$request-via)"/>
			<xsl:variable name="which-tests" select="$form-values/values/value[@key='which-tests']"/>
			<ctl:message select="concat('which tests: ',$which-tests)"/>
			<xsl:variable name="isSOAP" select="($request-via eq 'SOAP')"/>
			<ctl:message select="concat('Is SOAP Binding: ',$isSOAP)"/>
			<!-- Get capabilities, find url and method(GET or POST) for all operations -->
			<xsl:variable name="user-capabilities">
				<xsl:if test="($request-via eq 'GET')">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$capabilities-url"/>
						</ctl:url>
						<ctl:method>get</ctl:method>
						<ctl:param name="request">GetCapabilities</ctl:param>
					</ctl:request>
				</xsl:if>
				<xsl:if test="($request-via eq 'POST')">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$capabilities-url" />
						</ctl:url>
						<ctl:method>post</ctl:method>
						<ctl:body>
							<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
								http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"/>
						</ctl:body>
					</ctl:request>
				</xsl:if>
				<xsl:if test="($request-via eq 'SOAP')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$capabilities-url"/>
						</ctl:url>
						<ctl:body>
							<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
								http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetCapabilities>
						</ctl:body>
						<ctl:call-function name="sosFunctions:validateGetCapabilitiesResponseSOAP" />
					</ctl:soap-request>
				</xsl:if>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="not($user-capabilities/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<!-- Set Operations's URL -->
					<xsl:variable name="IsGetCapabilities-GET" select="count($user-capabilities//ows:Operation[@name='GetCapabilities']//ows:Get) > 0" />
					<xsl:variable name="GetCapabilities-URL">
						<xsl:if test="$IsGetCapabilities-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetCapabilities']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsGetCapabilities-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetCapabilities']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<xsl:variable name="IsDescribeSensor-GET" select="count($user-capabilities//ows:Operation[@name='DescribeSensor']//ows:Get) > 0" />
					<xsl:variable name="DescribeSensor-URL">
						<xsl:if test="$IsDescribeSensor-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='DescribeSensor']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsDescribeSensor-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='DescribeSensor']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<xsl:variable name="IsGetObservation-GET" select="count($user-capabilities//ows:Operation[@name='GetObservation']//ows:Get) > 0" />
					<xsl:variable name="GetObservation-URL">
						<xsl:if test="$IsGetObservation-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetObservation']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsGetObservation-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetObservation']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<xsl:variable name="hasGetFeatureOfInterest" select="count($user-capabilities//ows:Operation[@name='GetFeatureOfInterest']) > 0" />
					<xsl:variable name="IsGetFeatureOfInterest-GET" select="count($user-capabilities//ows:Operation[@name='GetFeatureOfInterest']//ows:Get) > 0" />
					<xsl:variable name="GetFeatureOfInterest-URL">
						<xsl:if test="$IsGetFeatureOfInterest-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetFeatureOfInterest']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsGetFeatureOfInterest-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetFeatureOfInterest']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<xsl:variable name="hasGetObservationById" select="count($user-capabilities//ows:Operation[@name='GetObservationById']) > 0" />
					<xsl:variable name="IsGetObservationById-GET" select="count($user-capabilities//ows:Operation[@name='GetObservationById']//ows:Get) > 0" />
					<xsl:variable name="GetObservationById-URL">
						<xsl:if test="$IsGetObservationById-GET">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetObservationById']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($IsGetObservationById-GET)">
							<xsl:value-of select="$user-capabilities//ows:Operation[@name='GetObservationById']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<!-- Set selected tests.-->
					<xsl:variable name="t01" select="$form-values/values/value[@key='01']"/>
					<xsl:variable name="t0101" select="$form-values/values/value[@key='0101']"/>
					<xsl:variable name="test0101" select="($which-tests eq 'all' or $t01 eq 'on' or $t0101 eq 'on' )"/>
					<xsl:variable name="t0102" select="$form-values/values/value[@key='0102']"/>
					<xsl:variable name="test0102" select="($which-tests eq 'all' or $t01 eq 'on' or $t0102 eq 'on' )"/>
					<xsl:variable name="t0103" select="$form-values/values/value[@key='0103']"/>
					<xsl:variable name="test0103" select="($which-tests eq 'all' or $t01 eq 'on' or $t0103 eq 'on' )"/>
					<xsl:variable name="t0104" select="$form-values/values/value[@key='0104']"/>
					<xsl:variable name="test0104" select="($which-tests eq 'all' or $t01 eq 'on' or $t0104 eq 'on' )"/>
					<xsl:variable name="t0105" select="$form-values/values/value[@key='0105']"/>
					<xsl:variable name="test0105" select="($which-tests eq 'all' or $t01 eq 'on' or $t0105 eq 'on' )"/>
					<xsl:variable name="t0106" select="$form-values/values/value[@key='0106']"/>
					<xsl:variable name="test0106" select="($which-tests eq 'all' or $t01 eq 'on' or $t0106 eq 'on' )"/>
					<xsl:variable name="t0107" select="$form-values/values/value[@key='0107']"/>
					<xsl:variable name="test0107" select="($which-tests eq 'all' or $t01 eq 'on' or $t0107 eq 'on' )"/>
					<xsl:variable name="t0108" select="$form-values/values/value[@key='0108']"/>
					<xsl:variable name="test0108" select="($which-tests eq 'all' or $t01 eq 'on' or $t0108 eq 'on' )"/>
					<xsl:variable name="t0109" select="$form-values/values/value[@key='0109']"/>
					<xsl:variable name="test0109" select="($which-tests eq 'all' or $t01 eq 'on' or $t0109 eq 'on' )"/>
					<xsl:variable name="t0110" select="$form-values/values/value[@key='0110']"/>
					<xsl:variable name="test0110" select="($which-tests eq 'all' or $t01 eq 'on' or $t0110 eq 'on' )"/>
					<xsl:variable name="t0111" select="$form-values/values/value[@key='0111']"/>
					<xsl:variable name="test0111" select="($which-tests eq 'all' or $t01 eq 'on' or $t0111 eq 'on' )"/>
					<xsl:variable name="test01" select="$test0101 or $test0102 or $test0103 or $test0104 or $test0105 or $test0106 or $test0107 or $test0108 or $test0109 or $test0110 or $test0111"/><!-- all test in 01-->
					
					<xsl:variable name="t02" select="$form-values/values/value[@key='02']"/>
					<xsl:variable name="t0201" select="$form-values/values/value[@key='0201']"/>
					<xsl:variable name="test0201" select="($which-tests eq 'all' or $t02 eq 'on' or $t0201 eq 'on')"/>
					<xsl:variable name="test02" select="$test0201"/><!-- all test in 02-->

					<xsl:variable name="t03" select="$form-values/values/value[@key='03']"/>
					<xsl:variable name="t0301" select="$form-values/values/value[@key='0301']"/>
					<xsl:variable name="test0301" select="($which-tests eq 'all' or $t03 eq 'on' or $t0301 eq 'on')"/>
					<xsl:variable name="t0302" select="$form-values/values/value[@key='0302']"/>
					<xsl:variable name="test0302" select="($which-tests eq 'all' or $t03 eq 'on' or $t0302 eq 'on')"/>
					<xsl:variable name="t0303" select="$form-values/values/value[@key='0303']"/>
					<xsl:variable name="test0303" select="($which-tests eq 'all' or $t03 eq 'on' or $t0303 eq 'on')"/>
					<xsl:variable name="t0304" select="$form-values/values/value[@key='0304']"/>
					<xsl:variable name="test0304" select="($which-tests eq 'all' or $t03 eq 'on' or $t0304 eq 'on')"/>
					<xsl:variable name="t0305" select="$form-values/values/value[@key='0305']"/>
					<xsl:variable name="test0305" select="($which-tests eq 'all' or $t03 eq 'on' or $t0305 eq 'on')"/>
					<xsl:variable name="t0306" select="$form-values/values/value[@key='0306']"/>
					<xsl:variable name="test0306" select="($which-tests eq 'all' or $t03 eq 'on' or $t0306 eq 'on')"/>
					<xsl:variable name="t0307" select="$form-values/values/value[@key='0307']"/>
					<xsl:variable name="test0307" select="($which-tests eq 'all' or $t03 eq 'on' or $t0307 eq 'on')"/>
					<xsl:variable name="t0308" select="$form-values/values/value[@key='0308']"/>
					<xsl:variable name="test0308" select="($which-tests eq 'all' or $t03 eq 'on' or $t0308 eq 'on')"/>
					<xsl:variable name="t0309" select="$form-values/values/value[@key='0309']"/>
					<xsl:variable name="test0309" select="($which-tests eq 'all' or $t03 eq 'on' or $t0309 eq 'on')"/>
					<xsl:variable name="test03" select="$test0301 or $test0302 or $test0303 or $test0304 or $test0305 or $test0306 or $test0307 or $test0308 or $test0309"/><!-- all test in 03-->

					<xsl:variable name="t04" select="$form-values/values/value[@key='04']"/>
					<xsl:variable name="t0401" select="$form-values/values/value[@key='0401']"/>
					<xsl:variable name="test0401" select="($which-tests eq 'all' or $t04 eq 'on' or $t0401 eq 'on')"/>
					<xsl:variable name="t0402" select="$form-values/values/value[@key='0402']"/>
					<xsl:variable name="test0402" select="($which-tests eq 'all' or $t04 eq 'on' or $t0402 eq 'on')"/>
					<xsl:variable name="t0403" select="$form-values/values/value[@key='0403']"/>
					<xsl:variable name="test0403" select="($which-tests eq 'all' or $t03 eq 'on' or $t0403 eq 'on')"/>
					<xsl:variable name="t0404" select="$form-values/values/value[@key='0404']"/>
					<xsl:variable name="test0404" select="($which-tests eq 'all' or $t04 eq 'on' or $t0404 eq 'on')"/>
					<xsl:variable name="t0405" select="$form-values/values/value[@key='0405']"/>
					<xsl:variable name="test0405" select="($which-tests eq 'all' or $t04 eq 'on' or $t0405 eq 'on')"/>
					<xsl:variable name="t0406" select="$form-values/values/value[@key='0406']"/>
					<xsl:variable name="test0406" select="($which-tests eq 'all' or $t04 eq 'on' or $t0406 eq 'on')"/>
					<xsl:variable name="t0407" select="$form-values/values/value[@key='0407']"/>
					<xsl:variable name="test0407" select="($which-tests eq 'all' or $t04 eq 'on' or $t0407 eq 'on')"/>
					<xsl:variable name="t0408" select="$form-values/values/value[@key='0408']"/>
					<xsl:variable name="test0408" select="($which-tests eq 'all' or $t04 eq 'on' or $t0408 eq 'on')"/>
					<xsl:variable name="t0409" select="$form-values/values/value[@key='0409']"/>
					<xsl:variable name="test0409" select="($which-tests eq 'all' or $t04 eq 'on' or $t0409 eq 'on')"/>
					<xsl:variable name="t0410" select="$form-values/values/value[@key='0410']"/>
					<xsl:variable name="test0410" select="($which-tests eq 'all' or $t04 eq 'on' or $t0410 eq 'on')"/>
					<xsl:variable name="t0411" select="$form-values/values/value[@key='0411']"/>
					<xsl:variable name="test0411" select="($which-tests eq 'all' or $t04 eq 'on' or $t0411 eq 'on')"/>
					<xsl:variable name="test04" select="$test0401 or $test0402 or $test0403 or $test0404 or $test0405 or $test0406 or $test0407 or $test0408 or $test0409 or $test0410 or $test0411"/><!-- all test in 04-->
					
					<xsl:variable name="t05" select="$form-values/values/value[@key='05']"/>
					<xsl:variable name="t0501" select="$form-values/values/value[@key='0501']"/>
					<xsl:variable name="test0501" select="($which-tests eq 'all' or $t05 eq 'on' or $t0501 eq 'on')"/>
					<xsl:variable name="t0502" select="$form-values/values/value[@key='0502']"/>
					<xsl:variable name="test0502" select="($which-tests eq 'all' or $t05 eq 'on' or $t0502 eq 'on')"/>
					<xsl:variable name="t0503" select="$form-values/values/value[@key='0503']"/>
					<xsl:variable name="test0503" select="($which-tests eq 'all' or $t05 eq 'on' or $t0503 eq 'on')"/>
					<xsl:variable name="t0504" select="$form-values/values/value[@key='0504']"/>
					<xsl:variable name="test0504" select="($which-tests eq 'all' or $t05 eq 'on' or $t0504 eq 'on')"/>
					<xsl:variable name="t0505" select="$form-values/values/value[@key='0505']"/>
					<xsl:variable name="test0505" select="($which-tests eq 'all' or $t05 eq 'on' or $t0505 eq 'on')"/>
					<xsl:variable name="t0506" select="$form-values/values/value[@key='0506']"/>
					<xsl:variable name="test0506" select="($which-tests eq 'all' or $t05 eq 'on' or $t0506 eq 'on')"/>
					<xsl:variable name="t0507" select="$form-values/values/value[@key='0507']"/>
					<xsl:variable name="test0507" select="($which-tests eq 'all' or $t05 eq 'on' or $t0507 eq 'on')"/>
					<xsl:variable name="t0508" select="$form-values/values/value[@key='0508']"/>
					<xsl:variable name="test0508" select="($which-tests eq 'all' or $t05 eq 'on' or $t0508 eq 'on')"/>
					<xsl:variable name="t0509" select="$form-values/values/value[@key='0509']"/>
					<xsl:variable name="test0509" select="($which-tests eq 'all' or $t05 eq 'on' or $t0509 eq 'on')"/>
					<xsl:variable name="t0510" select="$form-values/values/value[@key='0510']"/>
					<xsl:variable name="test0510" select="($which-tests eq 'all' or $t05 eq 'on' or $t0510 eq 'on')"/>
					<xsl:variable name="t0511" select="$form-values/values/value[@key='0511']"/>
					<xsl:variable name="test0511" select="($which-tests eq 'all' or $t05 eq 'on' or $t0511 eq 'on')"/>
					<xsl:variable name="t0512" select="$form-values/values/value[@key='0512']"/>
					<xsl:variable name="test0512" select="($which-tests eq 'all' or $t05 eq 'on' or $t0512 eq 'on')"/>
					<xsl:variable name="t0513" select="$form-values/values/value[@key='0513']"/>
					<xsl:variable name="test0513" select="($which-tests eq 'all' or $t05 eq 'on' or $t0513 eq 'on')"/>
					<xsl:variable name="t0514" select="$form-values/values/value[@key='0514']"/>
					<xsl:variable name="test0514" select="($which-tests eq 'all' or $t05 eq 'on' or $t0514 eq 'on')"/>
					<xsl:variable name="t0515" select="$form-values/values/value[@key='0515']"/>
					<xsl:variable name="test0515" select="($which-tests eq 'all' or $t05 eq 'on' or $t0515 eq 'on')"/>
					<xsl:variable name="t0516" select="$form-values/values/value[@key='0516']"/>
					<xsl:variable name="test0516" select="($which-tests eq 'all' or $t05 eq 'on' or $t0516 eq 'on')"/>
					<xsl:variable name="t0517" select="$form-values/values/value[@key='0517']"/>
					<xsl:variable name="test0517" select="($which-tests eq 'all' or $t05 eq 'on' or $t0517 eq 'on')"/>
					<xsl:variable name="t0518" select="$form-values/values/value[@key='0518']"/>
					<xsl:variable name="test0518" select="($which-tests eq 'all' or $t05 eq 'on' or $t0518 eq 'on')"/>
					<xsl:variable name="t0519" select="$form-values/values/value[@key='0519']"/>
					<xsl:variable name="test0519" select="($which-tests eq 'all' or $t05 eq 'on' or $t0519 eq 'on')"/>
					<xsl:variable name="t0520" select="$form-values/values/value[@key='0520']"/>
					<xsl:variable name="test0520" select="($which-tests eq 'all' or $t05 eq 'on' or $t0520 eq 'on')"/>
					<xsl:variable name="test05" select="$test0501 or $test0502 or $test0503 or $test0504 or $test0505 or $test0506 or $test0507 or $test0508 or $test0509 or $test0510 or $test0511 or $test0512 or $test0513 or $test0514 or $test0515 or $test0516 or $test0517 or $test0518 or $test0519 or $test0520"/><!-- all test in 05-->

					<xsl:variable name="t06" select="$form-values/values/value[@key='06']"/>
					<xsl:variable name="t0601" select="$form-values/values/value[@key='0601']"/>
					<xsl:variable name="test0601" select="($which-tests eq 'all' or $t06 eq 'on' or $t0601 eq 'on')"/>
					<xsl:variable name="t0602" select="$form-values/values/value[@key='0602']"/>
					<xsl:variable name="test0602" select="($which-tests eq 'all' or $t06 eq 'on' or $t0602 eq 'on')"/>
					<xsl:variable name="t0603" select="$form-values/values/value[@key='0603']"/>
					<xsl:variable name="test0603" select="($which-tests eq 'all' or $t06 eq 'on' or $t0603 eq 'on')"/>
					<xsl:variable name="t0604" select="$form-values/values/value[@key='0604']"/>
					<xsl:variable name="test0604" select="($which-tests eq 'all' or $t06 eq 'on' or $t0604 eq 'on')"/>
					<xsl:variable name="t0605" select="$form-values/values/value[@key='0605']"/>
					<xsl:variable name="test0605" select="($which-tests eq 'all' or $t06 eq 'on' or $t0605 eq 'on')"/>
					<xsl:variable name="t0606" select="$form-values/values/value[@key='0606']"/>
					<xsl:variable name="test0606" select="($which-tests eq 'all' or $t06 eq 'on' or $t0606 eq 'on')"/>
					<xsl:variable name="t0607" select="$form-values/values/value[@key='0607']"/>
					<xsl:variable name="test0607" select="($which-tests eq 'all' or $t06 eq 'on' or $t0607 eq 'on')"/>
					<xsl:variable name="t0608" select="$form-values/values/value[@key='0608']"/>
					<xsl:variable name="test0608" select="($which-tests eq 'all' or $t06 eq 'on' or $t0608 eq 'on')"/>
					<xsl:variable name="t0609" select="$form-values/values/value[@key='0609']"/>
					<xsl:variable name="test0609" select="($which-tests eq 'all' or $t06 eq 'on' or $t0609 eq 'on')"/>
					<xsl:variable name="t0610" select="$form-values/values/value[@key='0610']"/>
					<xsl:variable name="test0610" select="($which-tests eq 'all' or $t06 eq 'on' or $t0610 eq 'on')"/>
					<xsl:variable name="t0611" select="$form-values/values/value[@key='0611']"/>
					<xsl:variable name="test0611" select="($which-tests eq 'all' or $t06 eq 'on' or $t0611 eq 'on')"/>
					<xsl:variable name="t0612" select="$form-values/values/value[@key='0612']"/>
					<xsl:variable name="test0612" select="($which-tests eq 'all' or $t06 eq 'on' or $t0612 eq 'on')"/>
					<xsl:variable name="t0613" select="$form-values/values/value[@key='0613']"/>
					<xsl:variable name="test0613" select="($which-tests eq 'all' or $t06 eq 'on' or $t0613 eq 'on')"/>
					<xsl:variable name="t0614" select="$form-values/values/value[@key='0614']"/>
					<xsl:variable name="test0614" select="($which-tests eq 'all' or $t06 eq 'on' or $t0614 eq 'on')"/>
					<xsl:variable name="t0615" select="$form-values/values/value[@key='0615']"/>
					<xsl:variable name="test0615" select="($which-tests eq 'all' or $t06 eq 'on' or $t0615 eq 'on')"/>
					<xsl:variable name="test06" select="$test0601 or $test0602 or $test0603 or $test0604 or $test0605 or $test0606 or $test0607 or $test0608 or $test0609 or $test0610 or $test0611 or $test0612 or $test0613 or $test0614 or $test0615"/><!-- all test in 06-->

					<xsl:variable name="t07" select="$form-values/values/value[@key='07']"/>
					<xsl:variable name="t0701" select="$form-values/values/value[@key='0701']"/>
					<xsl:variable name="test0701" select="($which-tests eq 'all' or $t07 eq 'on' or $t0701 eq 'on')"/>
					<xsl:variable name="t0702" select="$form-values/values/value[@key='0702']"/>
					<xsl:variable name="test0702" select="($which-tests eq 'all' or $t07 eq 'on' or $t0702 eq 'on')"/>
					<xsl:variable name="t0703" select="$form-values/values/value[@key='0703']"/>
					<xsl:variable name="test0703" select="($which-tests eq 'all' or $t07 eq 'on' or $t0703 eq 'on')"/>
					<xsl:variable name="t0704" select="$form-values/values/value[@key='0704']"/>
					<xsl:variable name="test0704" select="($which-tests eq 'all' or $t07 eq 'on' or $t0704 eq 'on')"/>
					<xsl:variable name="t0705" select="$form-values/values/value[@key='0705']"/>
					<xsl:variable name="test0705" select="($which-tests eq 'all' or $t07 eq 'on' or $t0705 eq 'on')"/>
					<xsl:variable name="t0706" select="$form-values/values/value[@key='0706']"/>
					<xsl:variable name="test0706" select="($which-tests eq 'all' or $t07 eq 'on' or $t0706 eq 'on')"/>
					<xsl:variable name="t0707" select="$form-values/values/value[@key='0707']"/>
					<xsl:variable name="test0707" select="($which-tests eq 'all' or $t07 eq 'on' or $t0707 eq 'on')"/>
					<xsl:variable name="t0708" select="$form-values/values/value[@key='0708']"/>
					<xsl:variable name="test0708" select="($which-tests eq 'all' or $t07 eq 'on' or $t0708 eq 'on')"/>
					<xsl:variable name="t0709" select="$form-values/values/value[@key='0709']"/>
					<xsl:variable name="test0709" select="($which-tests eq 'all' or $t07 eq 'on' or $t0709 eq 'on')"/>
					<xsl:variable name="test07" select="$test0701 or $test0702 or $test0703 or $test0704 or $test0705 or $test0706 or $test0707 or $test0708 or $test0709"/><!-- all test in 07-->
					
					<xsl:variable name="test08" select="'1' eq '2'"/><!-- all test in 08-->
					<xsl:variable name="test09" select="'1' eq '2'"/><!-- all test in 09-->
					<xsl:variable name="test10" select="'1' eq '2'"/><!-- all test in 10-->
					<xsl:variable name="test11" select="'1' eq '2'"/><!-- all test in 11-->
					<xsl:variable name="test12" select="'1' eq '2'"/><!-- all test in 12-->
					<xsl:variable name="test13" select="'1' eq '2'"/><!-- all test in 13-->
					<xsl:variable name="test14" select="'1' eq '2'"/><!-- all test in 14-->
					<xsl:variable name="test15" select="'1' eq '2'"/><!-- all test in 15-->
					
					
					<!-- Show message about selected test.  -->
					<ctl:message select="concat('run 01.OWS Main: ',$test01)"/>
					<ctl:message select="concat('run 01.01.OWS.ContentType.1: ',$test0101)"/>
					<ctl:message select="concat('run 01.02.OWS.GetCapabilities-Exceptions.2: ',$test0102)"/>
					<ctl:message select="concat('run 01.03.OWS.GetCapabilities-UpdateSequence.1: ',$test0103)"/>
					<ctl:message select="concat('run 01.04.OWS.GetCapabilities-Exceptions.5: ',$test0104)"/>
					<ctl:message select="concat('run 01.05.OWS.CaseInsensitiveKvpNames.1: ',$test0105)"/>
					<ctl:message select="concat('run 01.06.OWS.GetCapabilities-AcceptVersions.1: ',$test0106)"/>
					<ctl:message select="concat('run 01.07.OWS.GetCapabilities-AcceptVersions.2: ',$test0107)"/>
					<ctl:message select="concat('run 01.08.OWS.GetCapabilities-AcceptVersions.3: ',$test0108)"/>
					<ctl:message select="concat('run 01.09.OWS.GetCapabilities-Sections.1: ',$test0109)"/>
					<ctl:message select="concat('run 01.10.OWS.GetCapabilities-Sections.2: ',$test0110)"/>
					<ctl:message select="concat('run 01.11.OWS.GetCapabilities-AcceptFormats.1: ',$test0111)"/>
					
					<ctl:message select="concat('run 02.SOS General Main: ',$test02)"/>
					<ctl:message select="concat('run 02.01.SOS.General-InvalidRequest.1: ',$test0201)"/>
					
					<ctl:message select="concat('run 03.SOS Core: Get Capabilities: ',$test03)"/>
					<ctl:message select="concat('run 03.01.CorrectServiceParameter: ',$test0301)"/>
					<ctl:message select="concat('run 03.02.OperationMetadataMandatory: ',$test0302)"/>
					<ctl:message select="concat('run 03.03.RequiredSectionsInCapabilities: ',$test0303)"/>
					<ctl:message select="concat('run 03.04.WrongSectionParameter: ',$test0304)"/>
					<ctl:message select="concat('run 03.05.BBOX: ',$test0305)"/>
					<ctl:message select="concat('run 03.06.OperatorDuringAndTEquals: ',$test0306)"/>
					<ctl:message select="concat('run 03.07.ParametersInObservationOffering: ',$test0307)"/>
					<ctl:message select="concat('run 03.08.ResponseFormat: ',$test0308)"/>
					
					<ctl:message select="concat('run 04.SOS Core: DescribeSensor: ',$test04)"/>
					<ctl:message select="concat('run 04.01.RequestNoService: ',$test0401)"/>
					<ctl:message select="concat('run 04.02.RequestNullService: ',$test0402)"/>
					<ctl:message select="concat('run 04.03.RequestInvalidService: ',$test0403)"/>
					<ctl:message select="concat('run 04.04.RequestNoVersion: ',$test0404)"/>
					<ctl:message select="concat('run 04.05.RequestNullVersion: ',$test0405)"/>
					<ctl:message select="concat('run 04.06.RequestInvalidVersion: ',$test0406)"/>
					<ctl:message select="concat('run 04.07.RequestNullProcedure: ',$test0407)"/>
					<ctl:message select="concat('run 04.08.RequestInvalidProcedure: ',$test0408)"/>
					<ctl:message select="concat('run 04.09.RequestNullProcedureDescriptionFormat: ',$test0409)"/>
					<ctl:message select="concat('run 04.10.RequestInvalidProcedureDescriptionFormat: ',$test0410)"/>
					<ctl:message select="concat('run 04.11.RequestValidRequest: ',$test0411)"/>
						
					<ctl:message select="concat('run 05.SOS Core: GetObservation: ',$test05)"/>
					<ctl:message select="concat('run 05.01.RequestNoService: ',$test0501)"/>
					<ctl:message select="concat('run 05.02.RequestNullService: ',$test0502)"/>
					<ctl:message select="concat('run 05.03.RequestInvalidService: ',$test0503)"/>
					<ctl:message select="concat('run 05.04.RequestNoVersion: ',$test0504)"/>
					<ctl:message select="concat('run 05.05.RequestNullVersion: ',$test0505)"/>
					<ctl:message select="concat('run 05.06.RequestInvalidVersion: ',$test0506)"/>
					<ctl:message select="concat('run 05.07.RequestNullOffering: ',$test0507)"/>
					<ctl:message select="concat('run 05.08.RequestInvalidOffering: ',$test0508)"/>
					<ctl:message select="concat('run 05.09.RequestNullObservedProperty: ',$test0509)"/>
					<ctl:message select="concat('run 05.10.RequestInvalidObservedProperty: ',$test0510)"/>
					<ctl:message select="concat('run 05.11.RequestNullProcedure: ',$test0511)"/>
					<ctl:message select="concat('run 05.12.RequestInvalidProcedure: ',$test0512)"/>
					<ctl:message select="concat('run 05.13.RequestNullFeatureOfInterest: ',$test0513)"/>
					<ctl:message select="concat('run 05.14.RequestInvalidFeatureOfInterest: ',$test0514)"/>
					<ctl:message select="concat('run 05.15.RequestNullResponseFormat: ',$test0515)"/>
					<ctl:message select="concat('run 05.16.RequestInvalidResponseFormat: ',$test0516)"/>
					<ctl:message select="concat('run 05.17.RequestNoResponseFormat: ',$test0517)"/>
					<ctl:message select="concat('run 05.18.RequestOtherResponseFormat: ',$test0518)"/>
					<ctl:message select="concat('run 05.19.RequestEmptyObservation: ',$test0519)"/>
					<ctl:message select="concat('run 05.20.RequestResponseExceedsSizeLimit: ',$test0520)"/>
									
					<ctl:message select="concat('run 06.SOS enhancedOperations: GetFeatureOfInterest: ',$test06)"/>
					<ctl:message select="concat('run 06.01.RequestNoService: ',$test0601)"/>
					<ctl:message select="concat('run 06.02.RequestNullService: ',$test0602)"/>
					<ctl:message select="concat('run 06.03.RequestInvalidService: ',$test0603)"/>
					<ctl:message select="concat('run 06.04.RequestNoVersion: ',$test0604)"/>
					<ctl:message select="concat('run 06.05.RequestNullVersion: ',$test0605)"/>
					<ctl:message select="concat('run 06.06.RequestInvalidVersion: ',$test0606)"/>
					<ctl:message select="concat('run 06.07.RequestNullProcedure: ',$test0607)"/>
					<ctl:message select="concat('run 06.08.RequestInvalidProcedure: ',$test0608)"/>
					<ctl:message select="concat('run 06.09.RequestNullObservedProperty: ',$test0609)"/>
					<ctl:message select="concat('run 06.10.RequestInvalidObservedProperty: ',$test0610)"/>
					<ctl:message select="concat('run 06.11.RequestNullFeatureOfInterest: ',$test0611)"/>
					<ctl:message select="concat('run 06.12.RequestInvalidFeatureOfInterest: ',$test0612)"/>
					<ctl:message select="concat('run 06.13.RequestNULLSpatialFilter: ',$test0613)"/>
					<ctl:message select="concat('run 06.14.RequestInvalidSpatialFilter: ',$test0614)"/>
					<ctl:message select="concat('run 06.15.RequestEmptyResponse: ',$test0615)"/>
					
					<ctl:message select="concat('run 07.SOS enhancedOperations: GetObservationById: ',$test07)"/>
					<ctl:message select="concat('run 07.01.RequestNoService: ',$test0701)"/>
					<ctl:message select="concat('run 07.02.RequestNullService: ',$test0702)"/>
					<ctl:message select="concat('run 07.03.RequestInvalidService: ',$test0703)"/>
					<ctl:message select="concat('run 07.04.RequestNoVersion: ',$test0704)"/>
					<ctl:message select="concat('run 07.05.RequestNullVersion: ',$test0705)"/>
					<ctl:message select="concat('run 07.06.RequestInvalidVersion: ',$test0706)"/>
					<ctl:message select="concat('run 07.07.RequestNullobservation: ',$test0707)"/>
					<ctl:message select="concat('run 07.08.RequestInvalidobservation: ',$test0708)"/>
					<ctl:message select="concat('run 07.09.RequestValidRequest: ',$test0709)"/>
					
					<ctl:message select="concat('run 08.SOS Transactional: InsertionCapabilities: ',$test08)"/>
					
					<ctl:message select="concat('run 09.SOS Transactional: InsertSensor: ',$test09)"/>
					
					<ctl:message select="concat('run 10.SOS Transactional: DeleteSensor: ',$test10)"/>
					
					<ctl:message select="concat('run 11.SOS Transactional: InsertObservation: ',$test11)"/>
					
					<ctl:message select="concat('run 12.SOS resultHandling: InsertResultTemplate: ',$test12)"/>
					
					<ctl:message select="concat('run 13.SOS resultHandling: InsertResult: ',$test13)"/>
					
					<ctl:message select="concat('run 14.SOS resultRetrieval: GetResultTemplate: ',$test14)"/>
					
					<ctl:message select="concat('run 15.SOS resultRetrieval: GetResult: ',$test15)"/>
					
					<!-- set other "global" variables -->			
					<xsl:variable name="ogc.schema.root" select="'xsd/ogc/'"/>
					<xsl:variable name="sos.schema.root" select="$ogc.schema.root"/>

					<xsl:variable name="sos.version" select="'2.0.0'"/>		
					<xsl:variable name="ows.version" select="'1.1.0'"/>
					<xsl:variable name="exceptionReportSchema" select="sosFunctions:exceptionReportSchemaPath($ogc.schema.root, $ows.version)"/>


					<!-- 分類測試 -->
					<xsl:if test="$test01">
						<ctl:message>***************************</ctl:message>
						<ctl:message>Running OWS Common Tests...</ctl:message>
						<ctl:message>***************************</ctl:message>
						<ctl:call-test name="owsTests:ows-main">
							<ctl:with-param name="serviceURL" select="$GetCapabilities-URL"/>
							<ctl:with-param name="isGET" select="$IsGetCapabilities-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="capabilitiesRootElementName" select="string('Capabilities')" />
							<ctl:with-param name="capabilitiesResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetCapabilities.xsd')"/>
							<ctl:with-param name="capabilitiesResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="capabilitiesResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0101" select="$test0101"/>
							<ctl:with-param name="test0102" select="$test0102"/>
							<ctl:with-param name="test0103" select="$test0103"/>
							<ctl:with-param name="test0104" select="$test0104"/>
							<ctl:with-param name="test0105" select="$test0105"/>
							<ctl:with-param name="test0106" select="$test0106"/>
							<ctl:with-param name="test0107" select="$test0107"/>
							<ctl:with-param name="test0108" select="$test0108"/>
							<ctl:with-param name="test0109" select="$test0109"/>
							<ctl:with-param name="test0110" select="$test0110"/>
							<ctl:with-param name="test0111" select="$test0111"/>
						</ctl:call-test>
					</xsl:if>

					<xsl:if test="$test02">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running General SOS Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:general-main">
							<ctl:with-param name="serviceURL" select="$GetCapabilities-URL" />
							<ctl:with-param name="isGET" select="$IsGetCapabilities-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema" />
							<ctl:with-param name="test0201" select="$test0201"/>
						</ctl:call-test>			
					</xsl:if>

					<xsl:if test="$test03">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 03.SOS Core: Get Capabilities Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:GetCapabilities-Test">
							<ctl:with-param name="serviceURL" select="$GetCapabilities-URL"/>
							<ctl:with-param name="isGET" select="$IsGetCapabilities-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="capabilitiesRootElementName" select="string('Capabilities')" />
							<ctl:with-param name="capabilitiesResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetCapabilities.xsd')"/>
							<ctl:with-param name="capabilitiesResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="capabilitiesResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0301" select="$test0301"/>
							<ctl:with-param name="test0302" select="$test0302"/>
							<ctl:with-param name="test0303" select="$test0303"/>
							<ctl:with-param name="test0304" select="$test0304"/>
							<ctl:with-param name="test0305" select="$test0305"/>
							<ctl:with-param name="test0306" select="$test0306"/>
							<ctl:with-param name="test0307" select="$test0307"/>
							<ctl:with-param name="test0308" select="$test0308"/>
							<ctl:with-param name="test0309" select="$test0309"/>
						</ctl:call-test>
					</xsl:if>
					
					<xsl:if test="$test04">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 04.SOS Core: DescribeSensor Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:DescribeSensor-Test">
							<ctl:with-param name="serviceURL" select="$DescribeSensor-URL"/>
							<ctl:with-param name="isGET" select="$IsDescribeSensor-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="test0401" select="$test0401"/>
							<ctl:with-param name="test0402" select="$test0402"/>
							<ctl:with-param name="test0403" select="$test0403"/>
							<ctl:with-param name="test0404" select="$test0404"/>
							<ctl:with-param name="test0405" select="$test0405"/>
							<ctl:with-param name="test0406" select="$test0406"/>
							<ctl:with-param name="test0407" select="$test0407"/>
							<ctl:with-param name="test0408" select="$test0408"/>
							<ctl:with-param name="test0409" select="$test0409"/>
							<ctl:with-param name="test0410" select="$test0410"/>
							<ctl:with-param name="test0411" select="$test0411"/>
						</ctl:call-test>
					</xsl:if>
					
					<xsl:if test="$test05">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 05.SOS Core: GetObservation Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:GetObservation-Test">
							<ctl:with-param name="serviceURL" select="$GetObservation-URL"/>
							<ctl:with-param name="isGET" select="$IsGetObservation-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="observationRootElementName" select="string('GetObservationResponse')" />
							<ctl:with-param name="observationResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetObservation.xsd')"/>
							<ctl:with-param name="observationResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0501" select="$test0501"/>
							<ctl:with-param name="test0502" select="$test0502"/>
							<ctl:with-param name="test0503" select="$test0503"/>
							<ctl:with-param name="test0504" select="$test0504"/>
							<ctl:with-param name="test0505" select="$test0505"/>
							<ctl:with-param name="test0506" select="$test0506"/>
							<ctl:with-param name="test0507" select="$test0507"/>
							<ctl:with-param name="test0508" select="$test0508"/>
							<ctl:with-param name="test0509" select="$test0509"/>
							<ctl:with-param name="test0510" select="$test0510"/>
							<ctl:with-param name="test0511" select="$test0511"/>
							<ctl:with-param name="test0512" select="$test0512"/>
							<ctl:with-param name="test0513" select="$test0513"/>
							<ctl:with-param name="test0514" select="$test0514"/>
							<ctl:with-param name="test0515" select="$test0515"/>
							<ctl:with-param name="test0516" select="$test0516"/>
							<ctl:with-param name="test0517" select="$test0517"/>
							<ctl:with-param name="test0518" select="$test0518"/>
							<ctl:with-param name="test0519" select="$test0519"/>
							<ctl:with-param name="test0520" select="$test0520"/>
						</ctl:call-test>
					</xsl:if>
					
					<xsl:if test="$test06">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 06.SOS enhancedOperations: GetFeatureOfInterest Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:GetFeatureOfInterest-Test">
							<ctl:with-param name="GetObservationURL" select="$GetObservation-URL"/>
							<ctl:with-param name="isGetObservationGET" select="$IsGetObservation-GET"/>
							<ctl:with-param name="observationResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="observationResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetObservation.xsd')"/>
							<ctl:with-param name="serviceURL" select="$GetFeatureOfInterest-URL"/>
							<ctl:with-param name="hasFOI" select="$hasGetFeatureOfInterest"/>
							<ctl:with-param name="isGET" select="$IsGetFeatureOfInterest-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="featureOfInterestRootElementName" select="string('GetFeatureOfInterestResponse')" />
							<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetFeatureOfInterest.xsd')"/>
							<ctl:with-param name="featureOfInterestResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="featureOfInterestResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0601" select="$test0601"/>
							<ctl:with-param name="test0602" select="$test0602"/>
							<ctl:with-param name="test0603" select="$test0603"/>
							<ctl:with-param name="test0604" select="$test0604"/>
							<ctl:with-param name="test0605" select="$test0605"/>
							<ctl:with-param name="test0606" select="$test0606"/>
							<ctl:with-param name="test0607" select="$test0607"/>
							<ctl:with-param name="test0608" select="$test0608"/>
							<ctl:with-param name="test0609" select="$test0609"/>
							<ctl:with-param name="test0610" select="$test0610"/>
							<ctl:with-param name="test0611" select="$test0611"/>
							<ctl:with-param name="test0612" select="$test0612"/>
							<ctl:with-param name="test0613" select="$test0613"/>
							<ctl:with-param name="test0614" select="$test0614"/>
							<ctl:with-param name="test0615" select="$test0615"/>
						</ctl:call-test>
					</xsl:if>

					<xsl:if test="$test07">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 07.SOS enhancedOperations: GetObservationById Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
						<ctl:call-test name="sos:GetObservationById-Test">
							<ctl:with-param name="serviceURL" select="$GetObservationById-URL"/>
							<ctl:with-param name="hasGOBI" select="$hasGetObservationById"/>
							<ctl:with-param name="isGET" select="$IsGetObservationById-GET"/>
							<ctl:with-param name="isSOAP" select="$isSOAP"/>
							<ctl:with-param name="getCapabilitiesResponse" select="$user-capabilities" />
							<ctl:with-param name="serviceType" select="string('SOS')"/>
							<ctl:with-param name="serviceVersion" select="$sos.version" />
							<ctl:with-param name="GetObservationByIdRootElementName" select="string('GetObservationByIdResponse')" />
							<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="sosFunctions:schemaPath($sos.schema.root, $sos.version,'sos', 'sosGetObservationById.xsd')"/>
							<ctl:with-param name="GetObservationByIdResponseSchemaType" select="string('resource')" />
							<ctl:with-param name="GetObservationByIdResponseContentType" select="string('text/xml')" />
							<ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
							<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
							<ctl:with-param name="test0701" select="$test0701"/>
							<ctl:with-param name="test0702" select="$test0702"/>
							<ctl:with-param name="test0703" select="$test0703"/>
							<ctl:with-param name="test0704" select="$test0704"/>
							<ctl:with-param name="test0705" select="$test0705"/>
							<ctl:with-param name="test0706" select="$test0706"/>
							<ctl:with-param name="test0707" select="$test0707"/>
							<ctl:with-param name="test0708" select="$test0708"/>
							<ctl:with-param name="test0709" select="$test0709"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="$test08">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 08.SOS Transactional: InsertionCapabilities Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
					</xsl:if>
					<xsl:if test="$test09">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 09.SOS Transactional: InsertSensor Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
					</xsl:if>
					<xsl:if test="$test10">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 10.SOS Transactional: DeleteSensor Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
					</xsl:if>
					<xsl:if test="$test11">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 11.SOS Transactional: InsertObservation Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
					</xsl:if>
					<xsl:if test="$test12">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 12.SOS resultHandling: InsertResultTemplate Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
					</xsl:if>
					<xsl:if test="$test13">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 13.SOS resultHandling: InsertResult Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
					</xsl:if>
					<xsl:if test="$test14">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 14.SOS resultRetrieval: GetResultTemplate Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
					</xsl:if>
					<xsl:if test="$test15">
						<ctl:message>****************************</ctl:message>
						<ctl:message>Running 15.SOS resultRetrieval: GetResult Tests...</ctl:message>
						<ctl:message>****************************</ctl:message>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>

	<!-- 02.SOS General Main -->
	<ctl:package>
		<ctl:test name="sos:general-main">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="exceptionReportSchema" />
			<ctl:param name="test0201" />
			<ctl:assertion>All assertions for "general" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the general module.</ctl:comment>
			<ctl:code>
				<ctl:message select="concat('run 02.01.SOS.General-InvalidRequest.1: ',$test0201)"/>
				<xsl:if test="$test0201 eq 'true'">
					<ctl:message select="'******************** test0201 sos:general-SOS.General-InvalidRequest.1 ********************'"/>
					<ctl:call-test name="sos:general-SOS.General-InvalidRequest.1">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema" />
					</ctl:call-test>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:general-SOS.General-InvalidRequest.1">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="exceptionReportSchema" />
			<ctl:assertion>Sending a request that is non-conformant to a schema associated with an SOS operation causes the server to return a valid error report message with an exceptionCode value of MissingParameterValue.</ctl:assertion>
			<ctl:comment>Send several test documents that are invalid according to the schemas associated with some of the SOS operations (i.e. the mandatory operations). Pass if the service returns a valid exception message with an exceptionCode value of InvalidParamterValue; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid request produces an appropriate response from the server.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.General-InvalidRequest</ctl:link>
			<ctl:code>
				<!--
                    1.)  Issue several invalid request documents to the service.
                    2.)  Validate the response against the ExceptionReport schema.
                    3.)  If the response validates, then check that the exceptionCode value is "MissingParameterValue", not "InvalidRequest" (which is not specified as a valid exception code by the SOS spec)
                -->
				<ctl:message>Issuing an invalid request to:  <xsl:value-of select="$serviceURL" /></ctl:message>		     
				<ctl:message select="'The body of the request will be &quot;test&quot;'"/>
				<xsl:variable name="invalidRequestResponse">
					<xsl:choose>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>test</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="'resource'" /></xsl:attribute>
												<xsl:value-of select="$exceptionReportSchema" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>test</ctl:body>
								<ctl:call-function name="sosFunctions:xmlValidatingParser">	
									<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
								</ctl:call-function>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
					
				</xsl:variable>        
				<xsl:choose>
					<xsl:when test="not($invalidRequestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid request or the response from the server was not a valid exception report.  The response from the server was:  "<xsl:copy-of select="$invalidRequestResponse/*" />"</ctl:message>
						<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>The response was <xsl:value-of select="sosFunctions:getExceptionInfo($invalidRequestResponse)" /></ctl:message>
						<ctl:message>Checking the validity of the response to an invalid request.</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="sosFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$invalidRequestResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('*')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The response to an invalid request was expected to be an exception report with an exceptionCode of "MissingParameterValue" and a locator value containing the validation issue.  The returned exception report was:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
							<ctl:message select="concat('Returned exception code was: &quot;', sosFunctions:exceptionCode($invalidRequestResponse), '&quot;')"/>
							<ctl:message select="'Expected exception code was: &quot;MissingParameterValue&quot;'"/>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<!-- 03.SOS Core: Get Capabilities -->
		<!-- 03 Send a valid GetCapailities (no parameters) ,Check the response (valid Capabilities) and pass the capabilities to other tests-->
	<ctl:package>
		<ctl:test name="sos:GetCapabilities-Test">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="capabilitiesRootElementName" />
			<ctl:param name="capabilitiesResponseSchemaLocation" />
			<ctl:param name="capabilitiesResponseSchemaType" />
			<ctl:param name="capabilitiesResponseContentType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test0301" />
			<ctl:param name="test0302" />
			<ctl:param name="test0303" />
			<ctl:param name="test0304" />
			<ctl:param name="test0305" />
			<ctl:param name="test0306" />
			<ctl:param name="test0307" />
			<ctl:param name="test0308" />
			<ctl:param name="test0309" />
			<ctl:assertion>All assertions for "GetCapabilities" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the GetCapabilities module.</ctl:comment>
			<ctl:code>
				<xsl:variable name="CapabilitiesResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">GetCapabilities</ctl:param>				   
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetCapabilities>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"/>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($CapabilitiesResponse/*)">
						<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="concat('run 03.01.CorrectServiceParameter: ',$test0301)"/>
						<xsl:if test="$test0301 eq 'true'">
							<ctl:message select="'******************** 03.01.CorrectServiceParameter ********************'"/>
							<ctl:call-test name="sos:GCCorrectServiceParameter">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="capabilitiesRootElementName" select="$capabilitiesRootElementName" />
								<ctl:with-param name="capabilitiesResponseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
								<ctl:with-param name="capabilitiesResponseSchemaType" select="$capabilitiesResponseSchemaType" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.02.OperationMetadataMandatory: ',$test0302)"/>
						<xsl:if test="$test0302 eq 'true'">
							<ctl:message select="'******************** 03.02.OperationMetadataMandatory ********************'"/>
							<ctl:call-test name="sos:GCOperationMetadataMandatory">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.03.RequiredSectionsInCapabilities: ',$test0303)"/>
						<xsl:if test="$test0303 eq 'true'">
							<ctl:message select="'******************** 03.03.RequiredSectionsInCapabilities ********************'"/>
							<ctl:call-test name="sos:GCRequiredSectionsInCapabilities">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.04.WrongSectionParameter: ',$test0304)"/>
						<xsl:if test="$test0304 eq 'true'">
							<ctl:message select="'******************** 03.04.WrongSectionParameter ********************'"/>
							<ctl:call-test name="sos:GCWrongSectionParameter">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="capabilitiesRootElementName" select="$capabilitiesRootElementName" />
								<ctl:with-param name="capabilitiesResponseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
								<ctl:with-param name="capabilitiesResponseSchemaType" select="$capabilitiesResponseSchemaType" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.05.BBOX: ',$test0305)"/>
						<xsl:if test="$test0305 eq 'true'">
							<ctl:message select="'******************** 03.05.BBOX ********************'"/>
							<ctl:call-test name="sos:GCBBOX">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.06.OperatorDuringAndTEquals: ',$test0306)"/>
						<xsl:if test="$test0306 eq 'true'">
							<ctl:message select="'******************** 03.06.OperatorDuringAndTEquals ********************'"/>
							<ctl:call-test name="sos:GCOperatorDuringAndTEquals">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.07.ParametersInObservationOffering: ',$test0307)"/>
						<xsl:if test="$test0307 eq 'true'">
							<ctl:message select="'******************** 03.07.ParametersInObservationOffering ********************'"/>
							<ctl:call-test name="sos:GCParametersInObservationOffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.08.ResponseFormat: ',$test0308)"/>
						<xsl:if test="$test0308 eq 'true'">
							<ctl:message select="'******************** 03.08.ResponseFormat ********************'"/>
							<ctl:call-test name="sos:GCResponseFormat">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
						<ctl:message select="concat('run 03.09.InsertionCapabilities: ',$test0309)"/>
						<xsl:if test="$test0309 eq 'true'">
							<ctl:message select="'******************** 03.08.InsertionCapabilities ********************'"/>
							<ctl:call-test name="sos:GCInsertionCapabilities">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="CapabilitiesResponse" select="$CapabilitiesResponse" />
							</ctl:call-test>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0301 Send GetCapabilities request with parameter service=SOS ,check the response is valid capabilities. -->
		<ctl:test name="sos:GCCorrectServiceParameter">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="capabilitiesRootElementName" />
			<ctl:param name="capabilitiesResponseSchemaLocation" />
			<ctl:param name="capabilitiesResponseSchemaType" />
			<ctl:assertion>
			The response to a GetCapabilities request that includes a service parameter
			with CORRECT VALUE provided shall include an complete capabilities document.
			</ctl:assertion>
			<ctl:comment>
			Pass if all of the following conditions are true:
				(1) the response is schema valid;
				(2) the root document matches the root element name.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="request">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">GetCapabilities</ctl:param>				   
								<ctl:param name="service"><xsl:value-of select="'SOS'" /></ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetCapabilities>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetCapabilities service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"/>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>	
				<xsl:choose>
					<xsl:when test="not($request/*)">
						<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($request/*[1]))" />
						<xsl:choose>
							<xsl:when test="not($responseRoot=$capabilitiesRootElementName)">
								<ctl:message>FAILURE:  The root element from the response to a GetCapabilities request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$capabilitiesRootElementName" />"</ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Passed.</ctl:message>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>
		</ctl:test>
		
		<!-- 0302 Check test03 Capabilities OperationMetadata must contain GetCapabilities DescribeSensor GetObservation operations -->
		<ctl:test name="sos:GCOperationMetadataMandatory">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>There are three operations ,GetCapabilities DescribeSensor and GetObservation, in OperationMetadata in the Capabilities.</ctl:assertion>
			<ctl:comment>Pass if there are at least three operations in OperationMetadata Sections in the Capabilities.</ctl:comment>
			<ctl:code>
				<xsl:variable name="GetCapabilities" select="count($CapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities'])" />
				<xsl:variable name="DescribeSensor" select="count($CapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeSensor'])" />
				<xsl:variable name="GetObservation" select="count($CapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetObservation'])" />
				<xsl:choose>
					<xsl:when test="not($GetCapabilities=1)">
						<ctl:message>FAILURE: Mandatory Operation "GetCapabilities" Missed in OperationMetadata.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($DescribeSensor=1)">
						<ctl:message>FAILURE: Mandatory Operation "DescribeSensor" Missed in OperationMetadata.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($GetObservation=1)">
						<ctl:message>FAILURE: Mandatory Operation "GetObservation" Missed in OperationMetadata.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Passed.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0303 Check test03 Capabilities must have and only have those sections ServiceIdentification ,ServiceProvider ,OperationMetadata ,filter_Capabilities ,contents [,extension] -->
		<ctl:test name="sos:GCRequiredSectionsInCapabilities">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>There are required sections,ServiceIdentification ServiceProvider OperationMetadata filter_Capabilities and contents in the Capabilities.</ctl:assertion>
			<ctl:comment>Pass if there are at least required sections in the Capabilities.</ctl:comment>
			<ctl:code>
				<xsl:variable name="ServiceIdentification" select="count($CapabilitiesResponse//ows:ServiceIdentification)" />
				<xsl:variable name="ServiceProvider" select="count($CapabilitiesResponse//ows:ServiceProvider)" />
				<xsl:variable name="OperationMetadata" select="count($CapabilitiesResponse//ows:OperationsMetadata)" />
				<xsl:variable name="filterCapabilities" select="count($CapabilitiesResponse//sos:filterCapabilities)" />
				<xsl:variable name="contents" select="count($CapabilitiesResponse//sos:contents)" />
				<xsl:choose>
					<xsl:when test="not($ServiceIdentification=1)">
						<ctl:message>FAILURE: Required section "ServiceIdentification" Missed in the Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($ServiceProvider=1)">
						<ctl:message>FAILURE: Required section "ServiceProvider" Missed in the Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($OperationMetadata=1)">
						<ctl:message>FAILURE: Required section "OperationMetadata" Missed in the Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($filterCapabilities=1)">
						<ctl:message>FAILURE: Required section "filterCapabilities" Missed in the Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($contents=1)">
						<ctl:message>FAILURE: Required section "contents" Missed in the Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Passed.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0304 Send GetCapabilities request with section=WrongSections,server must return complete capabilities (by OWS 1.1.0 table 3) -->
		<ctl:test name="sos:GCWrongSectionParameter">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="capabilitiesRootElementName" />
			<ctl:param name="capabilitiesResponseSchemaLocation" />
			<ctl:param name="capabilitiesResponseSchemaType" />
			<ctl:assertion>
			The response to a GetCapabilities request that includes a sections parameter 
			with WRONG VALUE provided shall include an complete capabilities document.
			</ctl:assertion>
			<ctl:comment>
			Pass if the response is schema valid and contains all sections elements.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="request">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">GetCapabilities</ctl:param>				   
								<ctl:param name="sections">WrongSections</ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<ows:Sections>
											<ows:Section>WrongSections</ows:Section>
										</ows:Sections>
									</sos:GetCapabilities>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetCapabilities xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<ows:Sections>
											<ows:Section>WrongSections</ows:Section>
										</ows:Sections>
									</sos:GetCapabilities>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>	
				<xsl:choose>
					<xsl:when test="not($request/*)">
						<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<!-- 檢查是否所有sections都有 -->
						<xsl:variable name="CountServiceIdentification" select="count($request/*/ows:ServiceIdentification)" />
						<xsl:variable name="CountServiceProvider" select="count($request/*/ows:ServiceProvider)" />
						<xsl:variable name="CountOperationsMetadata" select="count($request/*/ows:OperationsMetadata)" />
						<xsl:variable name="CountfilterCapabilities" select="count($request/*/sos:filterCapabilities)" />
						<xsl:variable name="Countcontents" select="count($request/*/sos:contents)" />
						<xsl:choose>
							<xsl:when test="not($CountServiceIdentification=1)">
								<ctl:message>FAILURE: The Capabilities must contains section "ows:ServiceIdentification". </ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:when test="not($CountServiceProvider=1)">
								<ctl:message>FAILURE: The Capabilities must contains section "ows:ServiceProvider". </ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:when test="not($CountOperationsMetadata=1)">
								<ctl:message>FAILURE: The Capabilities must contains section "ows:OperationsMetadata". </ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:when test="not($CountfilterCapabilities=1)">
								<ctl:message>FAILURE: The Capabilities must contains section "sos:filterCapabilities". </ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:when test="not($Countcontents=1)">
								<ctl:message>FAILURE: The Capabilities must contains section "sos:contents". </ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Passed.</ctl:message>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>
		</ctl:test>
		
		<!-- 0305 Check test03 Capabilities <sos:filterCapabilities>/<fes:Filter_Capabilities>/<fes:Spatial_Capabilities>/<fes:SpatialOperators> must contain <fes:SpatialOperator name="BBOX"/> -->
		<ctl:test name="sos:GCBBOX">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>
			The spatial operator BBOX is listed in the
			FilterCapabilities of the Capabilities document
			</ctl:assertion>
			<ctl:comment>
			Pass if the BBOX operator is listed in the FilterCapabilities section.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="BBOX" select="count($CapabilitiesResponse//sos:filterCapabilities/fes:Filter_Capabilities/fes:Spatial_Capabilities/fes:SpatialOperators/fes:SpatialOperator[@name='BBOX'])" />
				<xsl:choose>
					<xsl:when test="not($BBOX=1)">
						<ctl:message>FAILURE: The BBOX operator is not listed in the FilterCapabilities section.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Passed.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0306 Check test03 Capabilities <sos:filterCapabilities>/<fes:Filter_Capabilities>/<fes:Temporal_Capabilities>/<fes:TemporalOperators> must contain <fes:TemporalOperator name="During"/> and <fes:TemporalOperator name="TEquals"/> -->
		<ctl:test name="sos:GCOperatorDuringAndTEquals">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>
			The During and TEquals TemporalOperators are listed in the
			FilterCapabilities of the Capabilities document.
			</ctl:assertion>
			<ctl:comment>
			Pass if the During and TEquals TemporalOperators are listed in the FilterCapabilities section.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="During" select="count($CapabilitiesResponse//sos:filterCapabilities/fes:Filter_Capabilities/fes:Temporal_Capabilities/fes:TemporalOperators/fes:TemporalOperator [@name='During'])" />
				<xsl:variable name="TEquals" select="count($CapabilitiesResponse//sos:filterCapabilities/fes:Filter_Capabilities/fes:Temporal_Capabilities/fes:TemporalOperators/fes:TemporalOperator [@name='TEquals'])" />
				<xsl:choose>
					<xsl:when test="not($During=1)">
						<ctl:message>FAILURE: The During TemporalOperator is not listed in the FilterCapabilities section.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not($TEquals=1)">
						<ctl:message>FAILURE: The TEquals TemporalOperator is not listed in the FilterCapabilities section.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Passed.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0307 Check test03 Capabilities Each ObservationOffering  
			Element 					count
			swes:identifier				1
			observableProperty			1..* - -maybe in Contents
			procedure 					1
			procedureDescriptionFormat 	1..* - -maybe in Contents
			observationType 			1..* - -maybe in Contents
			observedArea 				0..1
			phenomenonTime 				0..1
			responseFormat 				1..* - -maybe in Contents
			resultTime 					0..1 -->
		<ctl:test name="sos:GCParametersInObservationOffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>
			Every elements in each observationOffering occur specified times.
			</ctl:assertion>
			<ctl:comment>
			Pass if all elements in each observationOffering or in Contents occur specified times.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="ContentsobservableProperty" select="count($CapabilitiesResponse//sos:Contents/swes:observableProperty)" />
				<xsl:variable name="ContentsprocedureDescriptionFormat" select="count($CapabilitiesResponse//sos:Contents/swes:procedureDescriptionFormat)" />
				<xsl:variable name="ContentsobservationType" select="count($CapabilitiesResponse//sos:Contents/sos:observationType)" />
				<xsl:variable name="ContentsresponseFormat" select="count($CapabilitiesResponse//sos:Contents/sos:responseFormat)" />
				<xsl:for-each select="$CapabilitiesResponse//sos:ObservationOffering">
					<ctl:message>1.identifier 1 </ctl:message>
					<xsl:variable name="identifier" select="./swes:identifier" />
					<ctl:message>identifier = <xsl:value-of select="$identifier"/></ctl:message>
					<xsl:variable name="identifierCount" select="count(./swes:identifier)" />
					<xsl:if test="not($identifierCount=1)">
						<ctl:message>FAILURE: Each ObservationOffering must contains one and only one identifier.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>2.observableProperty 1 or more than 1</ctl:message>
					<xsl:variable name="observablePropertyCount" select="count(./swes:observableProperty)" />
					<xsl:if test="($ContentsobservableProperty=0 and $observablePropertyCount=0)">
						<ctl:message>FAILURE: The Contents or Each ObservationOffering must contains one or more observableProperty.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>3.procedure 1</ctl:message>
					<xsl:variable name="procedureCount" select="count(./swes:procedure)" />
					<xsl:if test="not($procedureCount=1)">
						<ctl:message>FAILURE: Each ObservationOffering must contains one and only one procedure.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>4.procedureDescriptionFormat 1 or more than 1</ctl:message>
					<xsl:variable name="procedureDescriptionFormatCount" select="count(./swes:procedureDescriptionFormat)" />
					<xsl:if test="($ContentsprocedureDescriptionFormat=0 and $procedureDescriptionFormatCount=0)">
						<ctl:message>FAILURE: The Contents or Each ObservationOffering must contains one or more procedureDescriptionFormat.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>5.observationType 1 or more than 1</ctl:message>
					<xsl:variable name="observationTypeCount" select="count(./sos:observationType)" />
					<xsl:if test="($ContentsobservationType=0 and $observationTypeCount=0)">
						<ctl:message>FAILURE: The Contents or Each ObservationOffering must contains one or more observationType.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>6.observedArea 0 or 1</ctl:message>
					<xsl:variable name="observedAreaCount" select="count(./sos:observedArea)" />
					<xsl:if test="not($observedAreaCount=1 or $observedAreaCount=0)">
						<ctl:message>FAILURE: Each ObservationOffering must contains zero or one observedArea.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>7.phenomenonTime 0 or 1</ctl:message>
					<xsl:variable name="phenomenonTimeCount" select="count(./sos:phenomenonTime)" />
					<xsl:if test="not($phenomenonTimeCount=1 or $phenomenonTimeCount=0)">
						<ctl:message>FAILURE: Each ObservationOffering must contains zero or one phenomenonTime.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>8.responseFormat 1 or more than 1</ctl:message>
					<xsl:variable name="responseFormatCount" select="count(./sos:responseFormat)" />
					<xsl:if test="($ContentsresponseFormat=0 and $responseFormatCount=0)">
						<ctl:message>FAILURE: The Contents or Each ObservationOffering must contains one or more responseFormat.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<ctl:message>9.resultTime 0 or 1</ctl:message>
					<xsl:variable name="resultTimeCount" select="count(./sos:resultTime)" />
					<xsl:if test="not($resultTimeCount=1 or $resultTimeCount=0)">
						<ctl:message>FAILURE: Each ObservationOffering must contains zero or one resultTime.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>

		<!-- 0308 Check test03 Capabilities Each ObservationOffering the responseFormat must contain "http://www.opengis.net/om/2.0". -->
		<ctl:test name="sos:GCResponseFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>
			The responseFormat element which value is "http://www.opengis.net/om/2.0" is listed in the
			ObservationOffering or in the Contents of the Capabilities document.
			</ctl:assertion>
			<ctl:comment>
			Pass if the responseFormat element which value is "http://www.opengis.net/om/2.0" is listed in the ObservationOffering or Contents element.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="AllresponseFormat" select="count($CapabilitiesResponse//sos:Contents[sos:responseFormat='http://www.opengis.net/om/2.0']/sos:responseFormat)" />
				<xsl:choose>
					<xsl:when test="not($AllresponseFormat=1)">
						<xsl:for-each select="$CapabilitiesResponse//sos:ObservationOffering">
							<xsl:variable name="identifier" select="count(./swes:identifier)" />
							<xsl:variable name="responseFormat" select="count(.[sos:responseFormat='http://www.opengis.net/om/2.0']/sos:responseFormat)" />
							<xsl:if test="not($responseFormat=1)">
								<ctl:message>FAILURE: The ObservationOffering (identifier = <xsl:value-of select="$identifier"/>) must contain responseFormat which value is "http://www.opengis.net/om/2.0".</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:for-each>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Passed.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0309 Check test03 Capabilities contains InsertionCapabilities and check that InsertionCapabilities are valid according to the model defined SOS 2.0 specification.. -->
		<ctl:test name="sos:GCInsertionCapabilities">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="CapabilitiesResponse" />
			<ctl:assertion>
			Check that the InsertionCapabilities is contained in a Capabilities response, if it is requested.
			If existed ,check that the InsertionCapabilities is structured as defined in Subclause 10.1.1 of SOS 2.0 specification.
			</ctl:assertion>
			<ctl:comment>
			Pass if the InsertionCapabilities is contained in the Capabilities response and they are valid.
			</ctl:comment>
			<ctl:code>
				<xsl:variable name="SectionsInsertionCapabilitiesCount" select="count($CapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:Parameter[@name='Sections']/ows:AllowedValues[ows:Value='InsertionCapabilities']/ows:Value)" />
				<xsl:choose>
					<xsl:when test="$SectionsInsertionCapabilitiesCount > 0">
						<xsl:variable name="InsertionCapabilitiesCount" select="count($CapabilitiesResponse//sos:extension/sos:InsertionCapabilities)" />
						<xsl:choose>
							<xsl:when test="$InsertionCapabilitiesCount > 0">
								<xsl:variable name="procedureDescriptionFormatCount" select="count($CapabilitiesResponse//sos:extension/sos:InsertionCapabilities/sos:procedureDescriptionFormat)" />
								<xsl:variable name="featureOfInterestTypeCount" select="count($CapabilitiesResponse//sos:extension/sos:InsertionCapabilities/sos:featureOfInterestType)" />
								<xsl:variable name="observationTypeCount" select="count($CapabilitiesResponse//sos:extension/sos:InsertionCapabilities/sos:observationType)" />
								<xsl:if test="procedureDescriptionFormatCount eq 0">
									<ctl:message>Elements "sos:procedureDescriptionFormat" must be contained in sos:InsertionCapabilities (one or many).</ctl:message>
									<ctl:fail/>
								</xsl:if>
								<xsl:if test="featureOfInterestTypeCount eq 0">
									<ctl:message>Elements "sos:featureOfInterestType" must be contained in sos:InsertionCapabilities (one or many).</ctl:message>
									<ctl:fail/>
								</xsl:if>
								<xsl:if test="observationTypeCount eq 0">
									<ctl:message>Elements "sos:observationType" must be contained in sos:InsertionCapabilities (one or many).</ctl:message>
									<ctl:fail/>
								</xsl:if>
								<xsl:for-each select="$CapabilitiesResponse//sos:extension/sos:InsertionCapabilities/*">
									<xsl:variable name="target" select="local-name-from-QName(node-name(.))" />
									<xsl:if test="not($target eq 'procedureDescriptionFormat') or not($target eq 'featureOfInterestType') or not($target eq 'observationType') or not($target eq 'supportedEncoding')">
										<ctl:message>Elements "<xsl:value-of select="$target"/>" in InsertionCapabilities must be one of "procedureDescriptionFormat,featureOfInterestType,observationType,supportedEncoding".</ctl:message>
										<ctl:fail/>
									</xsl:if>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Elements "InsertionCapabilities" must be contained in sos:extension in the capabilities.</ctl:message>
								<ctl:fail/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Section "InsertionCapabilities" is no contained in OperationsMetadata/Sections. So skip this test.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	</ctl:package>
	
	<!-- 04.SOS Core: DescribeSensor -->
		<!-- 04 go each single test-->
	<ctl:package>
		<ctl:test name="sos:DescribeSensor-Test">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="test0401" />
			<ctl:param name="test0402" />
			<ctl:param name="test0403" />
			<ctl:param name="test0404" />
			<ctl:param name="test0405" />
			<ctl:param name="test0406" />
			<ctl:param name="test0407" />
			<ctl:param name="test0408" />
			<ctl:param name="test0409" />
			<ctl:param name="test0410" />
			<ctl:param name="test0411" />
			<ctl:assertion>Execute DescribeSensor Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<xsl:if test="$test0401 eq 'true'">
					<ctl:message select="'******************** 04.01.RequestNoService ********************'"/>
					<ctl:call-test name="sos:DSRequestNoService">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0402 eq 'true'">
					<ctl:message select="'******************** 04.02.RequestNullService ********************'"/>
					<ctl:call-test name="sos:DSRequestNullService">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0403 eq 'true'">
					<ctl:message select="'******************** 04.03.RequestInvalidService ********************'"/>
					<ctl:call-test name="sos:DSRequestInvalidService">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0404 eq 'true'">
					<ctl:message select="'******************** 04.04.RequestNoVersion ********************'"/>
					<ctl:call-test name="sos:DSRequestNoVersion">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0405 eq 'true'">
					<ctl:message select="'******************** 04.05.RequestNullVersion ********************'"/>
					<ctl:call-test name="sos:DSRequestNullVersion">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0406 eq 'true'">
					<ctl:message select="'******************** 04.06.RequestInvalidVersion ********************'"/>
					<ctl:call-test name="sos:DSRequestInvalidVersion">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0407 eq 'true'">
					<ctl:message select="'******************** 04.07.RequestNullProcedure ********************'"/>
					<ctl:call-test name="sos:DSRequestNullProcedure">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0408 eq 'true'">
					<ctl:message select="'******************** 04.08.RequestInvalidProcedure ********************'"/>
					<ctl:call-test name="sos:DSRequestInvalidProcedure">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0409 eq 'true'">
					<ctl:message select="'******************** 04.09.RequestNullProcedureDescriptionFormat ********************'"/>
					<ctl:call-test name="sos:DSRequestNullProcedureDescriptionFormat">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0410 eq 'true'">
					<ctl:message select="'******************** 04.10.RequestInvalidProcedureDescriptionFormat ********************'"/>
					<ctl:call-test name="sos:DSRequestInvalidProcedureDescriptionFormat">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
				<xsl:if test="$test0411 eq 'true'">
					<ctl:message select="'******************** 04.11.RequestValidRequest ********************'"/>
					<ctl:call-test name="sos:DSRequestValidRequest">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="isGET" select="$isGET"/>
						<ctl:with-param name="isSOAP" select="$isSOAP"/>
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
					</ctl:call-test>
				</xsl:if>
			</ctl:code>
		</ctl:test>
	
		<!-- 0401 Send DescribeSensor request without parameter service ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0".. -->
		<ctl:test name="sos:DSRequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- get a valid procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="version">2.0.0</ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with no service parameter specified. </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0402 Send DescribeSensor request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:DSRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="String('')" /></ctl:param>
								<ctl:param name="version">2.0.0</ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0403 Send DescribeSensor request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:DSRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="String('999')" /></ctl:param>
								<ctl:param name="version">2.0.0</ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="999" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="999" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0404 Send DescribeSensor request without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0".. -->
		<ctl:test name="sos:DSRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="String('SOS')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with no version parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0405 Send DescribeSensor request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:DSRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="String('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="String('')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0406 Send DescribeSensor request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:DSRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="String('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="String('999')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="999" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="999" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid version parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0407 Send DescribeSensor request with null parameter procedure ,the response must be a valid exception with code "MissingParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:DSRequestNullProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with null parameter "procedure",and the response must be a valid exception with code "MissingParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- set a invalid procedure -->
				<xsl:variable name="procedure" select="string('')" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="String('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="String('2.0.0')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null procedure parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0408 Send DescribeSensor request with invalid parameter procedure ,the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:DSRequestInvalidProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- set a invalid procedure -->
				<xsl:variable name="procedure" select="current-dateTime()" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="String('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="String('2.0.0')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid procedure parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0409 Send DescribeSensor request with null parameter ProcedureDescriptionFormat ,the response must be a valid exception with code "MissingParameterValue" and locator "ProcedureDescriptionFormat".. -->
		<ctl:test name="sos:DSRequestNullProcedureDescriptionFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with null parameter "ProcedureDescriptionFormat",and the response must be a valid exception with code "MissingParameterValue" and locator "ProcedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "ProcedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!--  get procedure value first -->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- set a invalid procedureDescriptionFormat -->
				<xsl:variable name="procedureDescriptionFormat" select="string('')" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="String('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="String('2.0.0')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedureDescriptionFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedureDescriptionFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null ProcedureDescriptionFormat parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedureDescriptionFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0410 Send DescribeSensor request with invalid parameter ProcedureDescriptionFormat ,the response must be a valid exception with code "InvalidParameterValue" and locator "ProcedureDescriptionFormat".. -->
		<ctl:test name="sos:DSRequestInvalidProcedureDescriptionFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a request with invalid parameter "ProcedureDescriptionFormat",and the response must be a valid exception with code "InvalidParameterValue" and locator "ProcedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "ProcedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!--  get procedure value first -->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure" />
				<!-- set a invalid procedureDescriptionFormat -->
				<xsl:variable name="procedureDescriptionFormat" select="current-dateTime()" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">DescribeSensor</ctl:param>
								<ctl:param name="service"><xsl:value-of select="String('SOS')" /></ctl:param>
								<ctl:param name="version"><xsl:value-of select="String('2.0.0')" /></ctl:param>
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedureDescriptionFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedureDescriptionFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid procedureDescriptionFormat parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedureDescriptionFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0411 Send valid DescribeSensor request, the response must be a valid sensorML. -->
		<ctl:test name="sos:DSRequestValidRequest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Send a valid request ,and there must be have a valid DescribeSensor response returned. </ctl:assertion>
			<ctl:comment>Pass if the DescribeSensor responses for all procedures listed in GetCapabilities response are valid; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- get the main procedureDescriptionFormat -->
				<xsl:variable name="main_procedureDescriptionFormat" select="$getCapabilitiesResponse//sos:contents/sos:SOSContents/swes:procedureDescriptionFormat" />
				<!-- check every offering -->
				<xsl:for-each select="$getCapabilitiesResponse//sos:contents/sos:SOSContents/swes:offering">
					<xsl:variable name="procedure" select="./sos:SensorOffering/swes:procedure" />
					<xsl:variable name="inner_procedureDescriptionFormat" select="./sos:SensorOffering/swes:observableProperty" />
					<xsl:variable name="procedureDescriptionFormat">
						<xsl:if test="$inner_procedureDescriptionFormat"><xsl:value-of select="$inner_procedureDescriptionFormat" /></xsl:if>
						<xsl:if test="not($inner_procedureDescriptionFormat)"><xsl:value-of select="$main_procedureDescriptionFormat" /></xsl:if>
					</xsl:variable>
					<!-- 對每個 procedure 發出request 檢查回應是否正確 (swes:DescribeSensorResponse 開頭,有相同的 procedureDescriptionFormat )-->
					<xsl:variable name="describeSensorResponse">
						<xsl:choose>
							<xsl:when test="($isGET)">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$serviceURL"/>
									</ctl:url>
									<ctl:method>get</ctl:method>
									<ctl:param name="request">DescribeSensor</ctl:param>
									<ctl:param name="service"><xsl:value-of select="String('SOS')" /></ctl:param>
									<ctl:param name="version"><xsl:value-of select="String('2.0.0')" /></ctl:param>
									<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
									<ctl:param name="procedureDescriptionFormat"><xsl:value-of select="$procedureDescriptionFormat" /></ctl:param>
									<ctl:call-function name="sosFunctions:validateExceptionReport" />
								</ctl:request>
							</xsl:when>
							<xsl:when test="($isSOAP)">
								<ctl:soap-request version="1.2" charset="UTF-8">
									<ctl:url>
										<xsl:value-of select="$serviceURL"/>
									</ctl:url> 
									<ctl:body>
										<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
											<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
											<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										</swes:DescribeSensor>
									</ctl:body>
									<ctl:call-function name="sosFunctions:validateDescribeSensorResponseNoExceptionReportSOAP" />
								</ctl:soap-request>
							</xsl:when>
							<xsl:otherwise>
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$serviceURL" />
									</ctl:url>
									<ctl:method>post</ctl:method>
									<ctl:body>
										<swes:DescribeSensor service="SOS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
											<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
											<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
										</swes:DescribeSensor>
									</ctl:body>
									<ctl:call-function name="sosFunctions:validateDescribeSensorResponseNoExceptionReport" />
								</ctl:request>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="not($describeSensorResponse/*)">
							<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SOS" />.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="ResponseRoot" select="local-name-from-QName(node-name($describeSensorResponse/*[1]))" />
							<xsl:variable name="TargetRoot" select="string('DescribeSensorResponse')" />
							<!-- check procedureDescriptionFormat -->
							<xsl:variable name="RespnseFormat" select="$describeSensorResponse//swes:procedureDescriptionFormat" />
							<xsl:choose>
								<xsl:when test="not($ResponseRoot=$TargetRoot)">
									<ctl:message>The root element from the response to a DescribeSensor request "<xsl:value-of select="$ResponseRoot" />" does not match the expected root element of "<xsl:value-of select="$TargetRoot" />"</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not($procedureDescriptionFormat=$RespnseFormat)">
									<ctl:message>The procedureDescriptionFormat from the response to a DescribeSensor request :"<xsl:value-of select="$RespnseFormat" />does not match the procedureDescriptionFormat :"<xsl:value-of select="$procedureDescriptionFormat" />" in the DescribeSensor request.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>procedure:"<xsl:value-of select="$procedure" />" check ok!</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
		
	</ctl:package>

	<!-- 05.SOS Core: GetObservation -->
		<!-- 05 Send a valid GetObservation (some parameters) ,Check the response (valid GetObservationResponse) and pass the GetObservationResponse to other tests-->
	<ctl:package>
		<ctl:test name="sos:GetObservation-Test">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test0501" />
			<ctl:param name="test0502" />
			<ctl:param name="test0503" />
			<ctl:param name="test0504" />
			<ctl:param name="test0505" />
			<ctl:param name="test0506" />
			<ctl:param name="test0507" />
			<ctl:param name="test0508" />
			<ctl:param name="test0509" />
			<ctl:param name="test0510" />
			<ctl:param name="test0511" />
			<ctl:param name="test0512" />
			<ctl:param name="test0513" />
			<ctl:param name="test0514" />
			<ctl:param name="test0516" />
			<ctl:param name="test0517" />
			<ctl:param name="test0518" />
			<ctl:param name="test0519" />
			<ctl:param name="test0520" />
			<ctl:assertion>Execute GetObservation Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 從GetCapabilities取得有效的 offering,procedure,observedProperty -->
				<!-- get a valid offering-->
				<xsl:variable name="offering" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:identifier" />
				<!-- get a valid procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure[1]" />
				<!-- get a valid observableProperty-->
				<xsl:variable name="observableProperty" select="$getCapabilitiesResponse//sos:contents//swes:observableProperty[1]" />
				<!-- get a valid responseFormat-->
				<xsl:variable name="responseFormat" select="string('http%3A%2F%2Fwww.opengis.net%2Fom%2F2.0')" />
				
				<!-- get a valid getObservationResponse-->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observableProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$observationResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$test0501 eq 'true'">
							<ctl:message select="'******************** 05.01.RequestNoService ********************'"/>
							<ctl:call-test name="sos:GORequestNoService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0502 eq 'true'">
							<ctl:message select="'******************** 05.02.RequestNullService ********************'"/>
							<ctl:call-test name="sos:GORequestNullService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0503 eq 'true'">
							<ctl:message select="'******************** 05.03.RequestInvalidService ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0504 eq 'true'">
							<ctl:message select="'******************** 05.04.RequestNoVersion ********************'"/>
							<ctl:call-test name="sos:GORequestNoVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0505 eq 'true'">
							<ctl:message select="'******************** 05.05.RequestNullVersion ********************'"/>
							<ctl:call-test name="sos:GORequestNullVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0506 eq 'true'">
							<ctl:message select="'******************** 05.06.RequestInvalidVersion ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0507 eq 'true'">
							<ctl:message select="'******************** 05.07.RequestNullOffering ********************'"/>
							<ctl:call-test name="sos:GORequestNullOffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0508 eq 'true'">
							<ctl:message select="'******************** 05.08.RequestInvalidOffering ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidOffering">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0509 eq 'true'">
							<ctl:message select="'******************** 05.09.RequestNullObservedProperty ********************'"/>
							<ctl:call-test name="sos:GORequestNullObservedProperty">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0510 eq 'true'">
							<ctl:message select="'******************** 05.10.RequestInvalidObservedProperty ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidObservedProperty">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0511 eq 'true'">
							<ctl:message select="'******************** 05.11.RequestNullProcedure ********************'"/>
							<ctl:call-test name="sos:GORequestNullProcedure">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0512 eq 'true'">
							<ctl:message select="'******************** 05.12.RequestInvalidProcedure ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidProcedure">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0513 eq 'true'">
							<ctl:message select="'******************** 05.13.RequestNullFeatureOfInterest ********************'"/>
							<ctl:call-test name="sos:GORequestNullFeatureOfInterest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0514 eq 'true'">
							<ctl:message select="'******************** 05.14.RequestInvalidFeatureOfInterest ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidFeatureOfInterest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0515 eq 'true'">
							<ctl:message select="'******************** 05.15.RequestNullResponseFormat ********************'"/>
							<ctl:call-test name="sos:GORequestNullResponseFormat">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0516 eq 'true'">
							<ctl:message select="'******************** 05.16.RequestInvalidResponseFormat ********************'"/>
							<ctl:call-test name="sos:GORequestInvalidResponseFormat">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0517 eq 'true'">
							<ctl:message select="'******************** 05.17.RequestNoResponseFormat ********************'"/>
							<ctl:call-test name="sos:GORequestNoResponseFormat">
								<ctl:with-param name="getObservationResponse" select="$getObservationResponse" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0518 eq 'true'">
							<ctl:message select="'******************** 05.18.RequestOtherResponseFormat ********************'"/>
							<ctl:call-test name="sos:GORequestOtherResponseFormat">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0519 eq 'true'">
							<ctl:message select="'******************** 05.19.RequestEmptyObservation ********************'"/>
							<ctl:call-test name="sos:GORequestEmptyObservation">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0520 eq 'true'">
							<ctl:message select="'******************** 05.20.RequestResponseExceedsSizeLimit ********************'"/>
							<ctl:call-test name="sos:GORequestResponseExceedsSizeLimit">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="observationRootElementName" select="$observationRootElementName" />
								<ctl:with-param name="observationResponseSchemaLocation" select="$observationResponseSchemaLocation" />
								<ctl:with-param name="observationResponseSchemaType" select="$observationResponseSchemaType" />
								<ctl:with-param name="procedure" select="$procedure" />
								<ctl:with-param name="offering" select="$offering" />
								<ctl:with-param name="observableProperty" select="$observableProperty" />
							</ctl:call-test>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0501 Send GetObservation request without parameter service ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GORequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no service parameter specified. </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element GetObservation@http://www.opengis.net/sos/2.0".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0502 Send GetObservation request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:GORequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service"></ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0503 Send GetObservation request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:GORequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">ASDF</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 0504 Send GetObservation request without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GORequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no version parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element GetObservation@http://www.opengis.net/sos/2.0".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0505 Send GetObservation request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:GORequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version"></ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0506 Send GetObservation request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:GORequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">999</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0507 Send GetObservation request with null Element offering ,the response must be a valid exception with code "MissingParameterValue" and locator "offering".. -->
		<ctl:test name="sos:GORequestNullOffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "offering",and the response must be a valid exception with code "MissingParameterValue" and locator "offering". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid offering parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('offering')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null offering parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "offering".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0508 Send GetObservation request with invalid Element offering ,the response must be a valid exception with code "InvalidParameterValue" and locator "offering".. -->
		<ctl:test name="sos:GORequestInvalidOffering">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "offering",and the response must be a valid exception with code "InvalidParameterValue" and locator "offering". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "offering"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$current-dateTime()" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$current-dateTime()" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid offering parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('offering')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid offering parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "offering".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 0509 Send GetObservation request with null Element observedProperty ,the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GORequestNullObservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "observedProperty",and the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid observedProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null observedProperty parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observedProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0510 Send GetObservation request with invalid Element observedProperty ,the response must be a valid exception with code "InvalidParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GORequestInvalidObservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "observableProperty",and the response must be a valid exception with code "InvalidParameterValue" and locator "observableProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observableProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="current-dateTime()" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid observableProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observableProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid observableProperty parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observableProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0511 Send GetObservation request with null Element procedure ,the response must be a valid exception with code "MissingParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:GORequestNullProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "procedure",and the response must be a valid exception with code "MissingParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null procedure parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0512 Send GetObservation request with invalid Element procedure ,the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:GORequestInvalidProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="current-dateTime()" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="current-dateTime()" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid procedure parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0513 Send GetObservation request with null Element featureOfInterest ,the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest".. -->
		<ctl:test name="sos:GORequestNullFeatureOfInterest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "featureOfInterest",and the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="featureOfInterest"></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:featureOfInterest></sos:featureOfInterest>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:featureOfInterest></sos:featureOfInterest>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid featureOfInterest parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null featureOfInterest parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "featureOfInterest".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0514 Send GetObservation request with invalid Element featureOfInterest ,the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest".. -->
		<ctl:test name="sos:GORequestInvalidFeatureOfInterest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "featureOfInterest",and the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="featureOfInterest"><xsl:value-of select="current-dateTime()" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:featureOfInterest><xsl:value-of select="current-dateTime()" /></sos:featureOfInterest>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:featureOfInterest><xsl:value-of select="current-dateTime()" /></sos:featureOfInterest>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid featureOfInterest parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid featureOfInterest parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "featureOfInterest".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0515 Send GetObservation request with null Element responseFormat ,the response must be a valid exception with code "MissingParameterValue" and locator "responseFormat".. -->
		<ctl:test name="sos:GORequestNullResponseFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "responseFormat",and the response must be a valid exception with code "MissingParameterValue" and locator "responseFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "responseFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="responseFormat"></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid responseFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('responseFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null responseFormat parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "responseFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0516 Send GetObservation request with invalid Element responseFormat ,the response must be a valid exception with code "InvalidParameterValue" and locator "responseFormat".. -->
		<ctl:test name="sos:GORequestInvalidResponseFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "responseFormat",and the response must be a valid exception with code "InvalidParameterValue" and locator "responseFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "responseFormat"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="responseFormat"><xsl:value-of select="current-dateTime()" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat><xsl:value-of select="current-dateTime()" /></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat><xsl:value-of select="current-dateTime()" /></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getObservationResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with invalid responseFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('responseFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with invalid responseFormat parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "responseFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0517 Send GetObservation request without Element responseFormat ,the response must be a valid GetObservationResponse which format is O&M 2.0 -->
		<ctl:test name="sos:GORequestNoResponseFormat">
			<ctl:param name="getObservationResponse" />
			<ctl:assertion>Check the response format of GetObservation which request without responseFormat parameter is 'OM 2.0'.</ctl:assertion>
			<ctl:comment>For The GetObservation request without parameter responseFormat ,the response must be a valid GetObservationResponse which format is "OM 2.0"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- If O&M 2.0 [OGC 10-004r3/ISO 19156] is returned by an SOS server, the response shall contain an instance of the GetObservationResponse type. -->
				<!-- In addition to the properties inherited from SWES ExtensibleResponse, the SOS GetObservationResponse shall include the properties observationData. -->
				<!-- 1.root is sos:GetObservationResponse -->
				<xsl:variable name="Root" select="local-name-from-QName(node-name($getObservationResponse/*[1]))" />
				<xsl:choose>			
					<xsl:when test="not($Root=string('GetObservationResponse'))">
						<ctl:message>The root element from the response to a GetObservation request "<xsl:value-of select="$Root" />" does not match the expected root element of "<xsl:value-of select="string('GetObservationResponse')" />"</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<!-- 2.sonElement of root is sos:observationData -->
						<xsl:for-each select="$getObservationResponse/*[1]/*">
							<xsl:variable name="sonElement" select="local-name-from-QName(node-name(.))" />
							<xsl:choose>
								<xsl:when test="not($sonElement=string('observationData'))">
									<ctl:message>The son element "<xsl:value-of select="$sonElement" />" does not match the expected root element of "<xsl:value-of select="string('observationData')" />"</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>PASS</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0518* Send GetObservation request for each format in content of Capabilities,check each response match specified format -->
		<ctl:test name="sos:GORequestOtherResponseFormat">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with valid parameter responseFormat = "http%3A%2F%2Fwww.opengis.net%2Fom%2F2.0",and the response must be a valid GetObservationResponse with responseFormat is OM 2.0. </ctl:assertion>
			<ctl:comment>Send GetObservation request for each format in content of Capabilities,check each response match specified format; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="targetResponseFormat" select="string('http%3A%2F%2Fwww.opengis.net%2Fom%2F2.0')" />
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="responseFormat"><xsl:value-of select="$targetResponseFormat" /></ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat><xsl:value-of select="$targetResponseFormat" /></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$observationResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<sos:responseFormat><xsl:value-of select="$targetResponseFormat" /></sos:responseFormat>
									</sos:GetObservation>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<!-- 1.root is sos:GetObservationResponse -->
				<xsl:variable name="Root" select="local-name-from-QName(node-name($getObservationResponse/*[1]))" />
				<xsl:choose>			
					<xsl:when test="not($Root=string('GetObservationResponse'))">
						<ctl:message>The root element from the response to a GetObservation request "<xsl:value-of select="$Root" />" does not match the expected root element of "<xsl:value-of select="string('GetObservationResponse')" />"</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<!-- 2.sonElement of root is sos:observationData -->
						<xsl:for-each select="$getObservationResponse/*[1]/*">
							<xsl:variable name="sonElement" select="local-name-from-QName(node-name(.))" />
							<xsl:choose>
								<xsl:when test="not($sonElement=string('observationData'))">
									<ctl:message>The son element "<xsl:value-of select="$sonElement" />" does not match the expected root element of "<xsl:value-of select="string('observationData')" />"</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>PASS</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0519 Send GetObservation request with stringent conditions,check the response is empty GetObservationResponse.-->
			<!-- Send valid GetObservation request with request parameters that
					do not match any observations to server and verify that the SOS
					responds with an empty GetObservation response. -->
		<ctl:test name="sos:GORequestEmptyObservation">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>
				Send valid GetObservation request with request parameters that
				do not match any observations to server and verify that the SOS
				responds with an empty GetObservation response.</ctl:assertion>
			<ctl:comment>Pass if the observation is empty; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="TemporalOperatorTEquals" select="count($getCapabilitiesResponse//sos:filterCapabilities//fes:TemporalOperator[@name='TEquals'])" />
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<xsl:if test="($TemporalOperatorTEquals>0)">
									<ctl:param name="temporalFilter">om:phenomenonTime,2020-01-01T01:00:00Z</ctl:param>
								</xsl:if>
								<xsl:if test="not($TemporalOperatorTEquals>0)">
									<ctl:param name="temporalFilter">om:phenomenonTime,2020-01-01T01:00:00Z/2020-01-01T01:00:01Z</ctl:param>
								</xsl:if>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<xsl:if test="($TemporalOperatorTEquals>0)">
											<sos:temporalFilter>
												<fes:TEquals>
													<fes:ValueReference>phenomenonTime</fes:ValueReference>
													<gml:TimeInstant gml:id="startPosition">
														<gml:timePosition>2020-01-01T01:00:00.000Z</gml:timePosition>
													</gml:TimeInstant>
												</fes:TEquals>
											</sos:temporalFilter>
										</xsl:if>
										<xsl:if test="not($TemporalOperatorTEquals>0)">
											<sos:temporalFilter>
												<fes:During>
													<fes:ValueReference>phenomenonTime</fes:ValueReference>
													<gml:TimePeriod gml:id="phenomenonTime">
														<gml:beginPosition>2020-01-01T01:00:00.000Z</gml:beginPosition>
														<gml:endPosition>2020-01-01T01:00:01.000Z</gml:endPosition>
													</gml:TimePeriod>
												</fes:During>
											</sos:temporalFilter>
										</xsl:if>
									</sos:GetObservation>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$observationResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
										<sos:offering><xsl:value-of select="$offering" /></sos:offering>
										<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
										<xsl:if test="($TemporalOperatorTEquals>0)">
											<sos:temporalFilter>
												<fes:TEquals>
													<fes:ValueReference>phenomenonTime</fes:ValueReference>
													<gml:TimeInstant gml:id="startPosition">
														<gml:timePosition>2020-01-01T01:00:00.000Z</gml:timePosition>
													</gml:TimeInstant>
												</fes:TEquals>
											</sos:temporalFilter>
										</xsl:if>
										<xsl:if test="not($TemporalOperatorTEquals>0)">
											<sos:temporalFilter>
												<fes:During>
													<fes:ValueReference>phenomenonTime</fes:ValueReference>
													<gml:TimePeriod gml:id="phenomenonTime">
														<gml:beginPosition>2020-01-01T01:00:00.000Z</gml:beginPosition>
														<gml:endPosition>2020-01-01T01:00:01.000Z</gml:endPosition>
													</gml:TimePeriod>
												</fes:During>
											</sos:temporalFilter>
										</xsl:if>
									</sos:GetObservation>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$observationResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<!-- 1.root is sos:GetObservationResponse -->
				<xsl:variable name="Root" select="local-name-from-QName(node-name($getObservationResponse/*[1]))" />
				<xsl:choose>			
					<xsl:when test="not($Root=string('GetObservationResponse'))">
						<ctl:message>The root element from the response to a GetObservation request "<xsl:value-of select="$Root" />" does not match the expected root element of "<xsl:value-of select="string('GetObservationResponse')" />"</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<!-- 2.sonElement of root is empty -->
						<xsl:choose>
							<xsl:when test="not($getObservationResponse/*[1]/*)">
								<ctl:message>PASS</ctl:message>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>The son element of root must be empty</ctl:message>
								<ctl:fail />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0520 Send GetObservation request with no optional parameters, check if the response is valid response or exception response with code "ResponseExceedsSizeLimit" and omit locator. -->
		<ctl:test name="sos:GORequestResponseExceedsSizeLimit">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="observationRootElementName" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="offering" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>If there are to many observations in the response,the server can return an exception response with ExceptionCode = "ResponseExceedsSizeLimit" and no locator. </ctl:assertion>
			<ctl:comment>Send GetObservation request for each format in content of Capabilities,check each response match specified format; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getObservationResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservation</ctl:param>	
								<ctl:call-function name="sosFunctions:validateGetObservationResponse" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" ></sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateGetCapabilitiesResponseSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" ></sos:GetObservation>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateGetObservationResponse" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getObservationResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservation response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="Root" select="local-name-from-QName(node-name($getObservationResponse/*[1]))" />
						<xsl:if test="$Root=string('ExceptionReport')">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getObservationResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservation request with no parameter specified.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getObservationResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('ResponseExceedsSizeLimit')" />
									<ctl:with-param name="locatorToCheck" select="string('*')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with no parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "ResponseExceedsSizeLimit" and omit locator.</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
						<xsl:if test="not($Root=string('ExceptionReport'))">
							<ctl:message>The response is not an Exception response,omit this test.</ctl:message>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
				
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<!-- 06.SOS enhancedOperations: GetFeatureOfInterest -->
	<ctl:package>
		<ctl:test name="sos:GetFeatureOfInterest-Test">
			<ctl:param name="GetObservationURL" />
			<ctl:param name="isGetObservationGET" />
			<ctl:param name="observationResponseSchemaType" />
			<ctl:param name="observationResponseSchemaLocation" />
			<ctl:param name="serviceURL" />
			<ctl:param name="hasFOI" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="featureOfInterestResponseContentType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test0601" />
			<ctl:param name="test0602" />
			<ctl:param name="test0603" />
			<ctl:param name="test0604" />
			<ctl:param name="test0605" />
			<ctl:param name="test0606" />
			<ctl:param name="test0607" />
			<ctl:param name="test0608" />
			<ctl:param name="test0609" />
			<ctl:param name="test0610" />
			<ctl:param name="test0611" />
			<ctl:param name="test0612" />
			<ctl:param name="test0613" />
			<ctl:param name="test0614" />
			<ctl:param name="test0615" />
			<ctl:assertion>Execute GetFeatureOfInterest Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				

				<xsl:choose>
					<xsl:when test="not($hasFOI)">
						<ctl:message>The server does not support the operation "GetFeatureOfInterest", so skip this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<!-- get a valid offering-->
						<xsl:variable name="offering" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:identifier" />
						<!-- get a valid procedure-->
						<xsl:variable name="procedure" select="$getCapabilitiesResponse//sos:contents//swes:procedure[1]" />
						<!-- get a valid observableProperty-->
						<xsl:variable name="observableProperty" select="$getCapabilitiesResponse//sos:contents//swes:observableProperty[1]" />
						<!-- get a valid featureOfInterest From GetObservation-->
						<xsl:variable name="getObservationResponse">
							<xsl:choose>
								<xsl:when test="($isGetObservationGET)">
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$serviceURL"/>
										</ctl:url>
										<ctl:method>get</ctl:method>
										<ctl:param name="service">SOS</ctl:param>	
										<ctl:param name="version">2.0.0</ctl:param>	
										<ctl:param name="request">GetObservation</ctl:param>	
										<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
										<ctl:param name="offering"><xsl:value-of select="$offering" /></ctl:param>
										<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$observationResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:when>
								<xsl:when test="($isSOAP)">
									<ctl:soap-request version="1.2" charset="UTF-8">
										<ctl:url>
											<xsl:value-of select="$serviceURL"/>
										</ctl:url>
										<ctl:body>
											<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
												xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
												<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
											</sos:GetObservation>
										</ctl:body>
										<parsers:SOAPParser return="content">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema>
														<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
														<xsl:value-of select="$observationResponseSchemaLocation" />
													</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:SOAPParser>
									</ctl:soap-request>
								</xsl:when>
								<xsl:otherwise>
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$serviceURL" />
										</ctl:url>
										<ctl:method>post</ctl:method>
										<ctl:body>
											<sos:GetObservation service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
												<sos:procedure><xsl:value-of select="$procedure" /></sos:procedure>
												<sos:offering><xsl:value-of select="$offering" /></sos:offering>
												<sos:observedProperty><xsl:value-of select="$observableProperty" /></sos:observedProperty>
											</sos:GetObservation>
										</ctl:body>
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$observationResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$observationResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="featureOfInterest" select="$getCapabilitiesResponse//om:featureOfInterest[1]/@href" />
						<!-- Get a getFeatureOfInterestResponse -->
						<xsl:variable name="getFeatureOfInterestResponse">
							<xsl:choose>
								<xsl:when test="($isGET)">
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$serviceURL"/>
										</ctl:url>
										<ctl:method>get</ctl:method>
										<ctl:param name="service">SOS</ctl:param>	
										<ctl:param name="version">2.0.0</ctl:param>	
										<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:when>
								<xsl:when test="($isSOAP)">
									<ctl:soap-request version="1.2" charset="UTF-8">
										<ctl:url>
											<xsl:value-of select="$serviceURL"/>
										</ctl:url>
										<ctl:body>
											<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
												xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
											</sos:GetFeatureOfInterest>
										</ctl:body>
										<parsers:SOAPParser return="content">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema>
														<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
														<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
													</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:SOAPParser>
									</ctl:soap-request>
								</xsl:when>
								<xsl:otherwise>
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$serviceURL" />
										</ctl:url>
										<ctl:method>post</ctl:method>
										<ctl:body>
											<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
												xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
												http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
											</sos:GetFeatureOfInterest>
										</ctl:body>
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
												<parsers:schema>
													<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
													<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
												</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</ctl:request>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="not($getFeatureOfInterestResponse/*)">
								<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
								<ctl:fail/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:if test="$test0601 eq 'true'">
									<ctl:message select="'******************** 06.01.RequestNoService ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNoService">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0602 eq 'true'">
									<ctl:message select="'******************** 06.02.RequestNullService ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNullService">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0603 eq 'true'">
									<ctl:message select="'******************** 06.03.RequestInvalidService ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidService">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0604 eq 'true'">
									<ctl:message select="'******************** 06.04.RequestNoVersion ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNoVersion">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0605 eq 'true'">
									<ctl:message select="'******************** 06.05.RequestNullVersion ********************'"/>
									<ctl:message select="'******************** 06.05.RequestNullVersion ********************'"/>
									<ctl:call-test name="sos:GORequestNullVersion">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0606 eq 'true'">
									<ctl:message select="'******************** 06.06.RequestInvalidVersion ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidVersion">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0607 eq 'true'">
									<ctl:message select="'******************** 06.07.RequestNullProcedure ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNullProcedure">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0608 eq 'true'">
									<ctl:message select="'******************** 06.08.RequestInvalidProcedure ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidProcedure">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0609 eq 'true'">
									<ctl:message select="'******************** 06.09.RequestNullObservedProperty ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNullObservedProperty">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0610 eq 'true'">
									<ctl:message select="'******************** 06.10.RequestInvalidObservedProperty ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidObservedProperty">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0611 eq 'true'">
									<ctl:message select="'******************** 06.11.RequestNullFeatureOfInterest ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNullFeatureOfInterest">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0612 eq 'true'">
									<ctl:message select="'******************** 06.12.RequestInvalidFeatureOfInterest ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidFeatureOfInterest">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0613 eq 'true'">
									<ctl:message select="'******************** 06.13.RequestNULLSpatialFilter ********************'"/>
									<ctl:call-test name="sos:GFOIRequestNULLSpatialFilter">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0614 eq 'true'">
									<ctl:message select="'******************** 06.14.RequestInvalidSpatialFilter ********************'"/>
									<ctl:call-test name="sos:GFOIRequestInvalidSpatialFilter">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
								<xsl:if test="$test0615 eq 'true'">
									<ctl:message select="'******************** 06.15.RequestEmptyResponse ********************'"/>
									<ctl:call-test name="sos:GFOIRequestEmptyResponse">
										<ctl:with-param name="serviceURL" select="$serviceURL" />
										<ctl:with-param name="isGET" select="$isGET"/>
										<ctl:with-param name="isSOAP" select="$isSOAP"/>
										<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
										<ctl:with-param name="featureOfInterestRootElementName" select="$featureOfInterestRootElementName" />
										<ctl:with-param name="featureOfInterestResponseSchemaLocation" select="$featureOfInterestResponseSchemaLocation" />
										<ctl:with-param name="featureOfInterestResponseSchemaType" select="$featureOfInterestResponseSchemaType" />
										<ctl:with-param name="procedure" select="$procedure" />
										<ctl:with-param name="featureOfInterest" select="$featureOfInterest" />
										<ctl:with-param name="observableProperty" select="$observableProperty" />
									</ctl:call-test>
								</xsl:if>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
				
				
				
			</ctl:code>
		</ctl:test>
		
		<!-- 0601 Send GetFeatureOfInterest request without parameter service ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GFOIRequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with no service parameter specified. </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0602 Send GetFeatureOfInterest request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:GFOIRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service"></ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0603 Send GetFeatureOfInterest request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:GFOIRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">ASDF</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 0604 Send GetFeatureOfInterest request without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GFOIRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with no version parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0605 Send GetFeatureOfInterest request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:GFOIRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version"></ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0606 Send GetFeatureOfInterest request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:GFOIRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">999</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0607 Send GetFeatureOfInterest request with null Element procedure ,the response must be a valid exception with code "MissingParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:GFOIRequestNullProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "procedure",and the response must be a valid exception with code "MissingParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="procedure"></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure></sos:procedure>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure></sos:procedure>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null procedure parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0608 Send GetFeatureOfInterest request with invalid Element procedure ,the response must be a valid exception with code "InvalidParameterValue" and locator "procedure".. -->
		<ctl:test name="sos:GFOIRequestInvalidProcedure">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:procedure><xsl:value-of select="current-dateTime()" /></sos:procedure>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:procedure><xsl:value-of select="current-dateTime()" /></sos:procedure>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid procedure parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0609 Send GetFeatureOfInterest request with null Element observedProperty ,the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GFOIRequestNullObservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "observedProperty",and the response must be a valid exception with code "MissingParameterValue" and locator "observedProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observedProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="observedProperty"></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observedProperty></sos:observedProperty>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observedProperty></sos:observedProperty>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid observedProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observedProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with null observedProperty parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observedProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<!-- 0610 Send GetFeatureOfInterest request with invalid Element observedProperty ,the response must be a valid exception with code "InvalidParameterValue" and locator "observedProperty".. -->
		<ctl:test name="sos:GFOIRequestInvalidObservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "observableProperty",and the response must be a valid exception with code "InvalidParameterValue" and locator "observableProperty". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "observableProperty"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="observedProperty"><xsl:value-of select="current-dateTime()" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observedProperty><xsl:value-of select="current-dateTime()" /></sos:observedProperty>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid observableProperty parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observableProperty')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid observableProperty parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "observableProperty".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0611 Send GetFeatureOfInterest request with null Element featureOfInterest ,the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest".. -->
		<ctl:test name="sos:GFOIRequestNullObservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "featureOfInterest",and the response must be a valid exception with code "MissingParameterValue" and locator "featureOfInterest". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="featureOfInterest"></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:featureOfInterest></sos:featureOfInterest>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:featureOfInterest></sos:featureOfInterest>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid featureOfInterest parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with null featureOfInterest parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "featureOfInterest".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0612 Send GetFeatureOfInterest request with invalid Element featureOfInterest ,the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest".. -->
		<ctl:test name="sos:GFOIRequestInvalidObservedProperty">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "featureOfInterest",and the response must be a valid exception with code "InvalidParameterValue" and locator "featureOfInterest". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "featureOfInterest"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="featureOfInterest"><xsl:value-of select="current-dateTime()" /></ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:featureOfInterest><xsl:value-of select="current-dateTime()" /></sos:featureOfInterest>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:featureOfInterest><xsl:value-of select="current-dateTime()" /></sos:featureOfInterest>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid featureOfInterest parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('featureOfInterest')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid featureOfInterest parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "featureOfInterest".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0613 Send GetFeatureOfInterest request with null Element spatialFilter\\ValueReference ,the response must be a valid exception with code "MissingParameterValue" and locator "ValueReference".. -->
		<ctl:test name="sos:GFOIRequestNULLSpatialFilter">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with null parameter "spatialFilter\\ValueReference",and the response must be a valid exception with code "MissingParameterValue" and locator "ValueReference". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "ValueReference"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="spatialFilter">,0.0,10,0,0.0,10.0,urn:ogc:def:crs:EPSG::4326</ctl:param>								
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:spatialFilter>
											<fes:Intersects>
												<fes:ValueReference></fes:ValueReference>
												<gml:Point gml:id="point1" srsName="http://www.opengis.net/def/crs/EPSG/0/4326">
												<gml:pos>0.0 10,0</gml:pos>
												</gml:Point>
											</fes:Intersects>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:spatialFilter>
											<fes:Intersects>
												<fes:ValueReference></fes:ValueReference>
												<gml:Point gml:id="point1" srsName="http://www.opengis.net/def/crs/EPSG/0/4326">
												<gml:pos>0.0 10,0</gml:pos>
												</gml:Point>
											</fes:Intersects>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid ValueReference parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('ValueReference')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with null ValueReference parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "ValueReference".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0614 Send GetFeatureOfInterest request with invalid Element spatialFilter\\ValueReference ,the response must be a valid exception with code "InvalidParameterValue" and locator "ValueReference".. -->
		<ctl:test name="sos:GFOIRequestInvalidSpatialFilter">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>Send a request with invalid parameter "ValueReference",and the response must be a valid exception with code "InvalidParameterValue" and locator "ValueReference". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "ValueReference"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
									<ctl:param name="spatialFilter"><xsl:value-of select="current-dateTime()" />,0.0,10,0,0.0,10.0,urn:ogc:def:crs:EPSG::4326</ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:spatialFilter>
											<fes:Intersects>
												<fes:ValueReference><xsl:value-of select="current-dateTime()" /></fes:ValueReference>
												<gml:Point gml:id="point1" srsName="http://www.opengis.net/def/crs/EPSG/0/4326">
												<gml:pos>0.0 10,0</gml:pos>
												</gml:Point>
											</fes:Intersects>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:spatialFilter>
											<fes:Intersects>
												<fes:ValueReference><xsl:value-of select="current-dateTime()" /></fes:ValueReference>
												<gml:Point gml:id="point1" srsName="http://www.opengis.net/def/crs/EPSG/0/4326">
												<gml:pos>0.0 10,0</gml:pos>
												</gml:Point>
											</fes:Intersects>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getFeatureOfInterestResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetFeatureOfInterest response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getFeatureOfInterestResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($getFeatureOfInterestResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetFeatureOfInterest request with invalid ValueReference parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getFeatureOfInterestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('ValueReference')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetFeatureOfInterest request with invalid ValueReference parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "ValueReference".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0615 Send valid GetFeatureOfInterest request with Specific parameter values, check the response is empty. -->
		<ctl:test name="sos:GFOIRequestEmptyResponse">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="featureOfInterestRootElementName" />
			<ctl:param name="featureOfInterestResponseSchemaLocation" />
			<ctl:param name="featureOfInterestResponseSchemaType" />
			<ctl:param name="procedure" />
			<ctl:param name="featureOfInterest" />
			<ctl:param name="observableProperty" />
			<ctl:assertion>
				Send valid GetFeatureOfInterest request with request parameters that
				do not match any response to server and verify that the SOS
				responds with an empty getFeatureOfInterestResponse response.</ctl:assertion>
			<ctl:comment>Pass if the response is empty; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getFeatureOfInterestResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetFeatureOfInterest</ctl:param>	
								<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
								<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
								<ctl:param name="featureOfInterest"><xsl:value-of select="$featureOfInterest" /></ctl:param>
								<ctl:param name="spatialFilter">om:featureOfInterest/*/sams:shape,179,90,179,90,urn:ogc:def:crs:EPSG::4326</ctl:param>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
										<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
										<ctl:param name="featureOfInterest"><xsl:value-of select="$featureOfInterest" /></ctl:param>
										<sos:spatialFilter>
											<fes:BBOX>
												<fes:ValueReference>om:featureOfInterest/*/sams:shape</fes:ValueReference>
												<gml:Envelope srsName="urn:ogc:def:crs:EPSG::1234">
													<gml:lowerCorner>179 90</gml:lowerCorner>
													<gml:upperCorner>179 90</gml:upperCorner>
												</gml:Envelope>
											</fes:BBOX>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<parsers:SOAPParser return="content">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema>
												<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
												<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
											</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:SOAPParser>
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetFeatureOfInterest service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<ctl:param name="procedure"><xsl:value-of select="$procedure" /></ctl:param>
										<ctl:param name="observedProperty"><xsl:value-of select="$observableProperty" /></ctl:param>
										<ctl:param name="featureOfInterest"><xsl:value-of select="$featureOfInterest" /></ctl:param>
										<sos:spatialFilter>
											<fes:BBOX>
												<fes:ValueReference>om:featureOfInterest/*/sams:shape</fes:ValueReference>
												<gml:Envelope srsName="urn:ogc:def:crs:EPSG::1234">
													<gml:lowerCorner>179 90</gml:lowerCorner>
													<gml:upperCorner>179 90</gml:upperCorner>
												</gml:Envelope>
											</fes:BBOX>
										</sos:spatialFilter>
									</sos:GetFeatureOfInterest>
								</ctl:body>
								<parsers:XMLValidatingParser>
									<parsers:schemas>
										<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
										<parsers:schema>
											<xsl:attribute name="type"><xsl:value-of select="$featureOfInterestResponseSchemaType" /></xsl:attribute>
											<xsl:value-of select="$featureOfInterestResponseSchemaLocation" />
										</parsers:schema>
									</parsers:schemas>
								</parsers:XMLValidatingParser>
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<!-- 1.root is sos:GetFeatureOfInterestResponse -->
				<xsl:variable name="Root" select="local-name-from-QName(node-name($getFeatureOfInterestResponse/*[1]))" />
				<xsl:choose>			
					<xsl:when test="not($Root=string('getFeatureOfInterestResponse'))">
						<ctl:message>The root element from the response to a GetFeatureOfInterest request "<xsl:value-of select="$Root" />" does not match the expected root element of "<xsl:value-of select="string('GetFeatureOfInterestResponse')" />"</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<!-- 2.sonElement of root is empty -->
						<xsl:choose>
							<xsl:when test="not($getFeatureOfInterestResponse/*[1]/*)">
								<ctl:message>PASS</ctl:message>
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>The son element of root must be empty</ctl:message>
								<ctl:fail />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

	</ctl:package>

	<!-- 07.SOS enhancedOperations: GetObservationById -->
	<ctl:package>
		<ctl:test name="sos:GetObservationById-Test">
			<ctl:param name="serviceURL" />
			<ctl:param name="hasGOBI" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceType" />
			<ctl:param name="serviceVersion" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="featureOfInterestResponseContentType" />
			<ctl:param name="exceptionReportSchemaLocation" />
			<ctl:param name="exceptionReportSchemaType" />
			<ctl:param name="test0701" />
			<ctl:param name="test0702" />
			<ctl:param name="test0703" />
			<ctl:param name="test0704" />
			<ctl:param name="test0705" />
			<ctl:param name="test0706" />
			<ctl:param name="test0707" />
			<ctl:param name="test0708" />
			<ctl:param name="test0709" />
			<ctl:assertion>Execute GetObservationById Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				

				<xsl:choose>
					<xsl:when test="not($hasGOBI)">
						<ctl:message>The server does not support the operation "GetObservationById", so skip this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<!-- get a valid observation //just use offering id....wait the response by SOS2 mailing list.-->
						<xsl:variable name="observation" select="$getCapabilitiesResponse//sos:contents//swes:offering[1]//swes:identifier" />
						<ctl:message>The observation was:  <xsl:value-of select="$observation" /></ctl:message>
						<xsl:if test="$test0701 eq 'true'">
							<ctl:message select="'******************** 07.01.RequestNoService ********************'"/>
							<ctl:call-test name="sos:GOBIRequestNoService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
								<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
								<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0702 eq 'true'">
							<ctl:message select="'******************** 07.02.RequestNullService ********************'"/>
							<ctl:call-test name="sos:GOBIRequestNullService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
								<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
								<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0703 eq 'true'">
							<ctl:message select="'******************** 07.03.RequestInvalidService ********************'"/>
							<ctl:call-test name="sos:GOBIRequestInvalidService">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
								<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
								<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0704 eq 'true'">
							<ctl:message select="'******************** 07.04.RequestNoVersion ********************'"/>
							<ctl:call-test name="sos:GOBIRequestNoVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
								<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
								<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0705 eq 'true'">
							<ctl:message select="'******************** 07.05.RequestNullVersion ********************'"/>
							<ctl:call-test name="sos:GORequestNullVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
								<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
								<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0706 eq 'true'">
							<ctl:message select="'******************** 07.06.RequestInvalidVersion ********************'"/>
							<ctl:call-test name="sos:GOBIRequestInvalidVersion">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
								<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
								<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0707 eq 'true'">
							<ctl:message select="'******************** 07.07.RequestNullobservation ********************'"/>
							<ctl:call-test name="sos:GOBIRequestNullobservation">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
								<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
								<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0708 eq 'true'">
							<ctl:message select="'******************** 07.08.RequestInvalidobservation ********************'"/>
							<ctl:call-test name="sos:GOBIRequestInvalidobservation">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
								<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
								<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
						<xsl:if test="$test0709 eq 'true'">
							<ctl:message select="'******************** 07.09.RequestValidRequest ********************'"/>
							<ctl:call-test name="sos:GOBIRequestValidRequest">
								<ctl:with-param name="serviceURL" select="$serviceURL" />
								<ctl:with-param name="isGET" select="$isGET"/>
								<ctl:with-param name="isSOAP" select="$isSOAP"/>
								<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
								<ctl:with-param name="GetObservationByIdRootElementName" select="$GetObservationByIdRootElementName" />
								<ctl:with-param name="GetObservationByIdResponseSchemaLocation" select="$GetObservationByIdResponseSchemaLocation" />
								<ctl:with-param name="GetObservationByIdResponseSchemaType" select="$GetObservationByIdResponseSchemaType" />
								<ctl:with-param name="observation" select="$observation" />
							</ctl:call-test>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		
		<!-- 0701 Send GetObservationById request without parameter service ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GOBIRequestNoService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: service in element GetFeatureOfInterest@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>									
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with no service parameter specified. </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element GetObservationById@http://www.opengis.net/sos/2.0".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0702 Send GetObservationById request with null parameter service ,the response must be a valid exception with code "MissingParameterValue" and locator "service".. -->
		<ctl:test name="sos:GOBIRequestNullService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service"></ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0703 Send GetObservationById request with invalid parameter service ,the response must be a valid exception with code "InvalidParameterValue" and locator "service".. -->
		<ctl:test name="sos:GOBIRequestInvalidService">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">ASDF</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="ASDF" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	
		<!-- 0704 Send GetObservationById request without parameter version ,the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0".. -->
		<ctl:test name="sos:GOBIRequestNoVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with no version parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element GetObservationById@http://www.opengis.net/sos/2.0".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0705 Send GetObservationById request with null parameter version ,the response must be a valid exception with code "MissingParameterValue" and locator "version".. -->
		<ctl:test name="sos:GOBIRequestNullVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version"></ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0706 Send GetObservationById request with invalid parameter version ,the response must be a valid exception with code "InvalidParameterValue" and locator "version".. -->
		<ctl:test name="sos:GOBIRequestInvalidVersion">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">999</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="999" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservationById request with invalid version parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0707 Send GetObservationById request with null Element observation ,the response must be a valid exception with code "MissingParameterValue" and locator "observation".. -->
		<ctl:test name="sos:GOBIRequestNullobservation">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with null parameter "observation",and the response must be a valid exception with code "MissingParameterValue" and locator "observation". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "observation"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- send request -->
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<xsl:if test="$isSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfoSOAP($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($isSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="sosFunctions:getExceptionInfo($GetObservationByIdResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetObservationById request with invalid observation parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="sosFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$GetObservationByIdResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('observation')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$isSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetObservation request with null observation parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "observation".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0708 Send GetObservationById request with invalid Element observation ,the response must be an empty GetObservationByIdResponse. -->
		<ctl:test name="sos:GOBIRequestInvalidobservation">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a request with invalid parameter "observation",and the response must be an empty GetObservationByIdResponse. </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid empty GetObservationByIdResponse; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="current-dateTime()" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="current-dateTime()" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="current-dateTime()" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$GetObservationByIdResponse/*">
							<!-- check the root is "sos:GetObservationByIdResponse" and empty context.-->
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($GetObservationByIdResponse/*[1]))" />
							<xsl:choose>
								<xsl:when test="not($responseRoot=$GetObservationByIdRootElementName)">
									<ctl:message>FAILURE:  The root element from the response to a GetObservationById request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$GetObservationByIdRootElementName" />"</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="$GetObservationByIdResponse/*[1]/*)">
									<ctl:message>FAILURE:  An empty GetObservationByIdResponse should be returned if no observation was found matching one or more of the identifiers provided in the request.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>Passed.</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

		<!-- 0709 Send valid GetObservationById request, the response must be a valid GetObservationByIdResponse. -->
		<ctl:test name="sos:GOBIRequestValidRequest">
			<ctl:param name="serviceURL" />
			<ctl:param name="isGET" />
			<ctl:param name="isSOAP" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="GetObservationByIdRootElementName" />
			<ctl:param name="GetObservationByIdResponseSchemaLocation" />
			<ctl:param name="GetObservationByIdResponseSchemaType" />
			<ctl:param name="observation" />
			<ctl:assertion>Send a valid request ,and there must be have a valid GetObservationByIdResponse returned. </ctl:assertion>
			<ctl:comment>Pass if the observation listed in GetObservationByIdResponse are same to GetObservationById request; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="GetObservationByIdResponse">
					<xsl:choose>
						<xsl:when test="($isGET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">SOS</ctl:param>	
								<ctl:param name="version">2.0.0</ctl:param>	
								<ctl:param name="request">GetObservationById</ctl:param>	
								<ctl:param name="observation"><xsl:value-of select="$observation" /></ctl:param>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:when>
						<xsl:when test="($isSOAP)">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:when>
						<xsl:otherwise>
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sos:GetObservationById service="SOS" version="2.0.0" xmlns:sos="http://www.opengis.net/sos/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd 
										http://www.opengis.net/sos/2.0 http://schemas.opengis.net/sos/2.0/sos.xsd" >
										<sos:observation><xsl:value-of select="$observation" /></sos:observation>
									</sos:GetObservationById>
								</ctl:body>
								<ctl:call-function name="sosFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($GetObservationByIdResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetObservationById response schema for "SOS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<!-- check the gml:identifier value is same to observation value in the request. -->
						<xsl:if test="$GetObservationByIdResponse/*">
							<!-- check the root is "sos:GetObservationByIdResponse" and empty context.-->
							<xsl:variable name="responseRoot" select="local-name-from-QName(node-name($GetObservationByIdResponse/*[1]))" />
							<xsl:variable name="gmlidentifier " select="$GetObservationByIdResponse/sos:GetObservationByIdResponse//gml:identifier" />
							<xsl:choose>
								<xsl:when test="not($responseRoot=$GetObservationByIdRootElementName)">
									<ctl:message>FAILURE:  The root element from the response to a GetObservationById request "<xsl:value-of select="$responseRoot" />" does not match the expected root element of "<xsl:value-of select="$GetObservationByIdRootElementName" />"</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not($gmlidentifier=$observation)">
									<ctl:message>FAILURE: The gml:identifier values in response is not same to observation value in the request.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>Passed.</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>

	</ctl:package>

	<!-- 08.SOS Transactional: InsertionCapabilities -->
	<ctl:package>
	</ctl:package>

	<!-- 09.SOS Transactional: InsertSensor -->
	<ctl:package>
	</ctl:package>

	<!-- 10.SOS Transactional: DeleteSensor -->
	<ctl:package>
	</ctl:package>

	<!-- 11.SOS Transactional: InsertObservation -->
	<ctl:package>
	</ctl:package>

	<!-- 12.SOS resultHandling: InsertResultTemplate -->
	<ctl:package>
	</ctl:package>

	<!-- 13.SOS resultHandling: InsertResult -->
	<ctl:package>
	</ctl:package>

	<!-- 14.SOS resultRetrieval: GetResultTemplate -->
	<ctl:package>
	</ctl:package>

	<!-- 15.SOS resultRetrieval: GetResult -->
	<ctl:package>
	</ctl:package>

	<!-- functions -->
	<ctl:package>
	<ctl:function name="sosFunctions:exceptionReportSchemaPath">
        <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
		<ctl:param name="owsVersion">The numeric version of the schema</ctl:param>
		<ctl:code>			
			<xsl:value-of select="sosFunctions:schemaPath($schemaRoot, $owsVersion, 'ows', 'owsExceptionReport.xsd')"/>
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:schemaPath">
        <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
		<ctl:param name="version">The numeric version of the schema</ctl:param>
		<ctl:param name="encoding">The name of the service or encoding to be used</ctl:param>
		<ctl:param name="filename">Filename of schema file</ctl:param>	
		<ctl:code>			
			<xsl:value-of select="concat($schemaRoot, $encoding, '/', $version, '/', $filename)"/>
		</ctl:code>
	</ctl:function> 

	<ctl:function name="sosFunctions:xmlValidatingParser">
        <ctl:param name="schemaFile">schemaFile</ctl:param>
		<ctl:description>Standard CTL XMLValidatingParser</ctl:description>
        <ctl:code>						
			<xsl:choose>
				<xsl:when test="starts-with($schemaFile,'http')">
					<parsers:XMLValidatingParser ignoreErrors="false">
						<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
						<xsl:if test="$schemaFile='xsd/ogc/om/1.0.0/om.xsd'">
							<parsers:schema type="resource">xsd/ogc/sampling/1.0.0/sampling.xsd</parsers:schema>
						</xsl:if>
						<parsers:schemas>
							<parsers:schema type="resource">
								<xsl:value-of select="$schemaFile"/>								
							</parsers:schema>							
							<parsers:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</parsers:schema>	
						</parsers:schemas>
					</parsers:XMLValidatingParser>	
				</xsl:when>
				<xsl:otherwise>
					<parsers:XMLValidatingParser ignoreErrors="false">
						<parsers:schemas>
							<parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>						
							<parsers:schema type="resource">
								<xsl:value-of select="$schemaFile"/>
							</parsers:schema>						
						</parsers:schemas>
					</parsers:XMLValidatingParser>
				</xsl:otherwise>
			</xsl:choose>				
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="sosFunctions:exceptionCode">
		<ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
		<ctl:description>Return the @exceptionCode attribute of an ows:ExceptionReport </ctl:description>
		<ctl:code>
			<xsl:variable name="exceptionElement" select="sosFunctions:exceptionElement($exceptionResponse)"/>
			<xsl:value-of select="$exceptionElement/@exceptionCode" />
		</ctl:code>
	</ctl:function>

    <ctl:function name="sosFunctions:xmlValidatingParser">
        <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
		<ctl:param name="version">The numeric version of the schema</ctl:param>
		<ctl:param name="encoding">The name of the service or encoding to be used</ctl:param>
		<ctl:param name="filename">Filenam of schema file</ctl:param>
		<ctl:description>Standard CTL XMLValidatingParser</ctl:description>
        <ctl:code>				
			<xsl:variable name="schemaFile" select="sosFunctions:schemaPath($schemaRoot, $version, $encoding, $filename)"/>
			<xsl:copy-of select="sosFunctions:xmlValidatingParser($schemaFile)"/>
        </ctl:code>
    </ctl:function>

	<ctl:function name="sosFunctions:exceptionElement">
		<ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
		<ctl:description>Return the Exception element of an ows:ExceptionReport </ctl:description>
		<ctl:code>
			<xsl:copy-of select="$exceptionResponse//ows:ExceptionReport/ows:Exception" />
		</ctl:code>
	</ctl:function>
	
    <ctl:function name="sosFunctions:validateGetCapabilitiesResponseSOAP">
        <ctl:return>The GetCapabilitiesResponse document if it's valid</ctl:return>
        <ctl:description>Validates a GetCapabilitiesResponse document according to its schema</ctl:description>
        <ctl:code>
			<parsers:SOAPParser return="content">
				<parsers:XMLValidatingParser>
					<parsers:schemas>
						<parsers:schema type="resource">
							<xsl:value-of select="sosFunctions:getSchemaLocation(string('sosGetCapabilities.xsd'))" />
						</parsers:schema>
						<parsers:schema type="resource">
							<xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
						</parsers:schema>
					</parsers:schemas>
				</parsers:XMLValidatingParser>
			</parsers:SOAPParser>
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="sosFunctions:getSchemaLocation">
        <ctl:param name="schemaName">The name of the schema file for which the full path will be returned</ctl:param>
        <ctl:return>The full schema path</ctl:return>
        <ctl:description>Based on the provided schema name, this function returns the full URL to the schema document</ctl:description>
        <ctl:code>
            <xsl:variable name="schemaLocation" select="string('xsd/ogc/')" />
            <xsl:variable name="sosSchemaLocation" select="concat($schemaLocation,'sos/2.0.0/')" />
			<xsl:variable name="swesSchemaLocation" select="concat($schemaLocation,'swes/2.0/')" />
            <xsl:variable name="owsSchemaLocation" select="concat($schemaLocation,'ows/1.1.0/')" />
            <xsl:variable name="sensorMLSchemaLocation" select="concat($schemaLocation,'sensorML/1.0.1/')" />
            <xsl:variable name="tmlSchemaLocation" select="concat($schemaLocation,'tml/1.0.0/')" />
            <xsl:choose>
                <xsl:when test="starts-with($schemaName,'sos')">
                    <xsl:value-of select="concat($sosSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:when test="starts-with($schemaName,'swes')">
                    <xsl:value-of select="concat($swesSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:when test="starts-with($schemaName,'ows')">
                    <xsl:value-of select="concat($owsSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:when test="starts-with($schemaName,'sensorML')">
                    <xsl:value-of select="concat($sensorMLSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:when test="starts-with($schemaName,'tml')">
                    <xsl:value-of select="concat($tmlSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$schemaLocation" />
                </xsl:otherwise>
            </xsl:choose>
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="sosFunctions:validateExceptionReport"><!-- CHECK OK -->
        <ctl:return>The exception report if it's valid</ctl:return>
        <ctl:description>Validates a returned exception report according to its schema and determines if it is an appropriate exception report for an SOS</ctl:description>
        <ctl:code>
			<parsers:XMLValidatingParser>
				<parsers:schemas>
					<parsers:schema type="resource">
						<xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
					</parsers:schema>
				</parsers:schemas>
			</parsers:XMLValidatingParser>
        </ctl:code>
    </ctl:function>
	
    <ctl:function name="sosFunctions:validateExceptionReportSOAP">
        <ctl:return>The exception report if it's valid</ctl:return>
        <ctl:description>Validates a returned exception report according to its schema and determines if it is an appropriate exception report for an SOS</ctl:description>
        <ctl:code>
			<parsers:SOAPParser return="content">
				<parsers:XMLValidatingParser>
					<parsers:schemas>
						<parsers:schema type="resource">
							<xsl:value-of select="sosFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
						</parsers:schema>
					</parsers:schemas>
				</parsers:XMLValidatingParser>
			</parsers:SOAPParser>
        </ctl:code>
    </ctl:function>
	
	<!--Validates an ExceptionReport and checks for specific exceptionCode and locator values-->
    <ctl:function name="sosFunctions:checkExceptionReport"><!-- CHECK OK -->
        <ctl:param name="exceptionReport">The exception report to check</ctl:param>
        <ctl:param name="exceptionCodeToCheck">The exceptionCode to check</ctl:param>
        <ctl:param name="locatorToCheck">The locator to check (a * can be provided to indicate that any locator value is allowed)</ctl:param>
		<ctl:param name="PostEncodingIsSOAP">Encoding Type</ctl:param>
        <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
        <ctl:description></ctl:description>
        <ctl:code>
			<xsl:if test="$PostEncodingIsSOAP=string('true')">
				<xsl:variable name="exceptionElement" select="$exceptionReport//soap12:Detail/ows:Exception" />
				<xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
				<xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
				<xsl:choose>
					<xsl:when test="$locatorToCheck='*'">
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (string-length(normalize-space($locatorValue))>=0)" />
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (lower-case($locatorToCheck)=lower-case($locatorValue))" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
			<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
				<xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception" />
				<xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
				<xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
				<xsl:choose>
					<xsl:when test="$locatorToCheck='*'">
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (string-length(normalize-space($locatorValue))>=0)" />
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (lower-case($locatorToCheck)=lower-case($locatorValue))" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="sosFunctions:getExceptionInfo">
        <ctl:param name="exceptionReport">The exception report</ctl:param>
        <ctl:return>The Exception Code and Locator of an exception report</ctl:return>
        <ctl:code>
            <xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception" />
            <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
            <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
            <xsl:value-of select="concat('Exception Report (exceptionCode, locator):  ',$exceptionCodeValue,',',$locatorValue)" />
        </ctl:code>
    </ctl:function>

	<ctl:function name="sosFunctions:getExceptionInfoSOAP"><!-- CHECK OK -->
        <ctl:param name="exceptionReport">The exception report to check</ctl:param>
        <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
        <ctl:description></ctl:description>
        <ctl:code>
            <xsl:variable name="exceptionElement" select="$exceptionReport//soap12:Detail/ows:Exception" />
            <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
            <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
            <xsl:variable name="exceptionText" select="$exceptionElement//ows:ExceptionText" />
            <xsl:value-of select="concat('ExceptionReport (exceptionCode, locator):  ',$exceptionCodeValue,', ',$locatorValue,' - ',$exceptionText)" />
        </ctl:code>
	</ctl:function>
	
	<!--Validates a GetObservation response-->
    <ctl:function name="sosFunctions:validateGetObservationResponse">
        <ctl:return>The GetObservationResponse document if it's valid</ctl:return>
        <ctl:description>Validates a GetObservationResponse document according to its schema</ctl:description>
        <ctl:code>
			<parsers:XMLValidatingParser>
				<parsers:schemas>
					<parsers:schema type="resource">
						<xsl:value-of select="spsFunctions:getSchemaLocation(string('sosGetObservation.xsd'))" />
					</parsers:schema>
					<parsers:schema type="resource">
						<xsl:value-of select="spsFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
					</parsers:schema>
				</parsers:schemas>
			</parsers:XMLValidatingParser>
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="sosFunctions:validateGetCapabilitiesResponseSOAP">
        <ctl:return>The GetObservationResponse document if it's valid</ctl:return>
        <ctl:description>Validates a GetObservationResponse document according to its schema</ctl:description>
        <ctl:code>
			<parsers:SOAPParser return="content">
				<parsers:XMLValidatingParser>
					<parsers:schemas>
						<parsers:schema type="resource">
							<xsl:value-of select="spsFunctions:getSchemaLocation(string('sosGetObservation.xsd'))" />
						</parsers:schema>
						<parsers:schema type="resource">
							<xsl:value-of select="spsFunctions:getSchemaLocation(string('owsExceptionReport.xsd'))" />
						</parsers:schema>
					</parsers:schemas>
				</parsers:XMLValidatingParser>
			</parsers:SOAPParser>
        </ctl:code>
    </ctl:function>
	</ctl:package>

</ctl:package>